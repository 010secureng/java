/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.coreos.monitoring.models.V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorizationCredentials;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization {
  public static final String SERIALIZED_NAME_CREDENTIALS = "credentials";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS)
  private V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorizationCredentials credentials;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization() {
  }

  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization credentials(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorizationCredentials credentials) {
    
    this.credentials = credentials;
    return this;
  }

   /**
   * Get credentials
   * @return credentials
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorizationCredentials getCredentials() {
    return credentials;
  }


  public void setCredentials(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorizationCredentials credentials) {
    this.credentials = credentials;
  }


  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Set the authentication type. Defaults to Bearer, Basic will cause an error
   * @return type
  **/
  @jakarta.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization v1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization = (V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization) o;
    return Objects.equals(this.credentials, v1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization.credentials) &&
        Objects.equals(this.type, v1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(credentials, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization {\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("credentials");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization is not found in the empty JSON string", V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `credentials`
      if (jsonObj.get("credentials") != null && !jsonObj.get("credentials").isJsonNull()) {
        V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorizationCredentials.validateJsonObject(jsonObj.getAsJsonObject("credentials"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization.class));

       return (TypeAdapter<T>) new TypeAdapter<V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization>() {
           @Override
           public void write(JsonWriter out, V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization
  * @throws IOException if the JSON string is invalid with respect to V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization
  */
  public static V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization.class);
  }

 /**
  * Convert an instance of V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

