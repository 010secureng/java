/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.coreos.monitoring.models.V1PodMonitorSpecAttachMetadata;
import com.coreos.monitoring.models.V1PodMonitorSpecNamespaceSelector;
import com.coreos.monitoring.models.V1PodMonitorSpecPodMetricsEndpointsInner;
import com.coreos.monitoring.models.V1PodMonitorSpecSelector;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Specification of desired Pod selection for target discovery by Prometheus.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1PodMonitorSpec {
  public static final String SERIALIZED_NAME_ATTACH_METADATA = "attachMetadata";
  @SerializedName(SERIALIZED_NAME_ATTACH_METADATA)
  private V1PodMonitorSpecAttachMetadata attachMetadata;

  public static final String SERIALIZED_NAME_JOB_LABEL = "jobLabel";
  @SerializedName(SERIALIZED_NAME_JOB_LABEL)
  private String jobLabel;

  public static final String SERIALIZED_NAME_LABEL_LIMIT = "labelLimit";
  @SerializedName(SERIALIZED_NAME_LABEL_LIMIT)
  private Long labelLimit;

  public static final String SERIALIZED_NAME_LABEL_NAME_LENGTH_LIMIT = "labelNameLengthLimit";
  @SerializedName(SERIALIZED_NAME_LABEL_NAME_LENGTH_LIMIT)
  private Long labelNameLengthLimit;

  public static final String SERIALIZED_NAME_LABEL_VALUE_LENGTH_LIMIT = "labelValueLengthLimit";
  @SerializedName(SERIALIZED_NAME_LABEL_VALUE_LENGTH_LIMIT)
  private Long labelValueLengthLimit;

  public static final String SERIALIZED_NAME_NAMESPACE_SELECTOR = "namespaceSelector";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_SELECTOR)
  private V1PodMonitorSpecNamespaceSelector namespaceSelector;

  public static final String SERIALIZED_NAME_POD_METRICS_ENDPOINTS = "podMetricsEndpoints";
  @SerializedName(SERIALIZED_NAME_POD_METRICS_ENDPOINTS)
  private List<V1PodMonitorSpecPodMetricsEndpointsInner> podMetricsEndpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_POD_TARGET_LABELS = "podTargetLabels";
  @SerializedName(SERIALIZED_NAME_POD_TARGET_LABELS)
  private List<String> podTargetLabels;

  public static final String SERIALIZED_NAME_SAMPLE_LIMIT = "sampleLimit";
  @SerializedName(SERIALIZED_NAME_SAMPLE_LIMIT)
  private Long sampleLimit;

  public static final String SERIALIZED_NAME_SELECTOR = "selector";
  @SerializedName(SERIALIZED_NAME_SELECTOR)
  private V1PodMonitorSpecSelector selector;

  public static final String SERIALIZED_NAME_TARGET_LIMIT = "targetLimit";
  @SerializedName(SERIALIZED_NAME_TARGET_LIMIT)
  private Long targetLimit;

  public V1PodMonitorSpec() {
  }

  public V1PodMonitorSpec attachMetadata(V1PodMonitorSpecAttachMetadata attachMetadata) {
    
    this.attachMetadata = attachMetadata;
    return this;
  }

   /**
   * Get attachMetadata
   * @return attachMetadata
  **/
  @jakarta.annotation.Nullable
  public V1PodMonitorSpecAttachMetadata getAttachMetadata() {
    return attachMetadata;
  }


  public void setAttachMetadata(V1PodMonitorSpecAttachMetadata attachMetadata) {
    this.attachMetadata = attachMetadata;
  }


  public V1PodMonitorSpec jobLabel(String jobLabel) {
    
    this.jobLabel = jobLabel;
    return this;
  }

   /**
   * The label to use to retrieve the job name from.
   * @return jobLabel
  **/
  @jakarta.annotation.Nullable
  public String getJobLabel() {
    return jobLabel;
  }


  public void setJobLabel(String jobLabel) {
    this.jobLabel = jobLabel;
  }


  public V1PodMonitorSpec labelLimit(Long labelLimit) {
    
    this.labelLimit = labelLimit;
    return this;
  }

   /**
   * Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
   * @return labelLimit
  **/
  @jakarta.annotation.Nullable
  public Long getLabelLimit() {
    return labelLimit;
  }


  public void setLabelLimit(Long labelLimit) {
    this.labelLimit = labelLimit;
  }


  public V1PodMonitorSpec labelNameLengthLimit(Long labelNameLengthLimit) {
    
    this.labelNameLengthLimit = labelNameLengthLimit;
    return this;
  }

   /**
   * Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
   * @return labelNameLengthLimit
  **/
  @jakarta.annotation.Nullable
  public Long getLabelNameLengthLimit() {
    return labelNameLengthLimit;
  }


  public void setLabelNameLengthLimit(Long labelNameLengthLimit) {
    this.labelNameLengthLimit = labelNameLengthLimit;
  }


  public V1PodMonitorSpec labelValueLengthLimit(Long labelValueLengthLimit) {
    
    this.labelValueLengthLimit = labelValueLengthLimit;
    return this;
  }

   /**
   * Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
   * @return labelValueLengthLimit
  **/
  @jakarta.annotation.Nullable
  public Long getLabelValueLengthLimit() {
    return labelValueLengthLimit;
  }


  public void setLabelValueLengthLimit(Long labelValueLengthLimit) {
    this.labelValueLengthLimit = labelValueLengthLimit;
  }


  public V1PodMonitorSpec namespaceSelector(V1PodMonitorSpecNamespaceSelector namespaceSelector) {
    
    this.namespaceSelector = namespaceSelector;
    return this;
  }

   /**
   * Get namespaceSelector
   * @return namespaceSelector
  **/
  @jakarta.annotation.Nullable
  public V1PodMonitorSpecNamespaceSelector getNamespaceSelector() {
    return namespaceSelector;
  }


  public void setNamespaceSelector(V1PodMonitorSpecNamespaceSelector namespaceSelector) {
    this.namespaceSelector = namespaceSelector;
  }


  public V1PodMonitorSpec podMetricsEndpoints(List<V1PodMonitorSpecPodMetricsEndpointsInner> podMetricsEndpoints) {
    
    this.podMetricsEndpoints = podMetricsEndpoints;
    return this;
  }

  public V1PodMonitorSpec addPodMetricsEndpointsItem(V1PodMonitorSpecPodMetricsEndpointsInner podMetricsEndpointsItem) {
    if (this.podMetricsEndpoints == null) {
      this.podMetricsEndpoints = new ArrayList<>();
    }
    this.podMetricsEndpoints.add(podMetricsEndpointsItem);
    return this;
  }

   /**
   * A list of endpoints allowed as part of this PodMonitor.
   * @return podMetricsEndpoints
  **/
  @jakarta.annotation.Nonnull
  public List<V1PodMonitorSpecPodMetricsEndpointsInner> getPodMetricsEndpoints() {
    return podMetricsEndpoints;
  }


  public void setPodMetricsEndpoints(List<V1PodMonitorSpecPodMetricsEndpointsInner> podMetricsEndpoints) {
    this.podMetricsEndpoints = podMetricsEndpoints;
  }


  public V1PodMonitorSpec podTargetLabels(List<String> podTargetLabels) {
    
    this.podTargetLabels = podTargetLabels;
    return this;
  }

  public V1PodMonitorSpec addPodTargetLabelsItem(String podTargetLabelsItem) {
    if (this.podTargetLabels == null) {
      this.podTargetLabels = new ArrayList<>();
    }
    this.podTargetLabels.add(podTargetLabelsItem);
    return this;
  }

   /**
   * PodTargetLabels transfers labels on the Kubernetes Pod onto the target.
   * @return podTargetLabels
  **/
  @jakarta.annotation.Nullable
  public List<String> getPodTargetLabels() {
    return podTargetLabels;
  }


  public void setPodTargetLabels(List<String> podTargetLabels) {
    this.podTargetLabels = podTargetLabels;
  }


  public V1PodMonitorSpec sampleLimit(Long sampleLimit) {
    
    this.sampleLimit = sampleLimit;
    return this;
  }

   /**
   * SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
   * @return sampleLimit
  **/
  @jakarta.annotation.Nullable
  public Long getSampleLimit() {
    return sampleLimit;
  }


  public void setSampleLimit(Long sampleLimit) {
    this.sampleLimit = sampleLimit;
  }


  public V1PodMonitorSpec selector(V1PodMonitorSpecSelector selector) {
    
    this.selector = selector;
    return this;
  }

   /**
   * Get selector
   * @return selector
  **/
  @jakarta.annotation.Nonnull
  public V1PodMonitorSpecSelector getSelector() {
    return selector;
  }


  public void setSelector(V1PodMonitorSpecSelector selector) {
    this.selector = selector;
  }


  public V1PodMonitorSpec targetLimit(Long targetLimit) {
    
    this.targetLimit = targetLimit;
    return this;
  }

   /**
   * TargetLimit defines a limit on the number of scraped targets that will be accepted.
   * @return targetLimit
  **/
  @jakarta.annotation.Nullable
  public Long getTargetLimit() {
    return targetLimit;
  }


  public void setTargetLimit(Long targetLimit) {
    this.targetLimit = targetLimit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PodMonitorSpec v1PodMonitorSpec = (V1PodMonitorSpec) o;
    return Objects.equals(this.attachMetadata, v1PodMonitorSpec.attachMetadata) &&
        Objects.equals(this.jobLabel, v1PodMonitorSpec.jobLabel) &&
        Objects.equals(this.labelLimit, v1PodMonitorSpec.labelLimit) &&
        Objects.equals(this.labelNameLengthLimit, v1PodMonitorSpec.labelNameLengthLimit) &&
        Objects.equals(this.labelValueLengthLimit, v1PodMonitorSpec.labelValueLengthLimit) &&
        Objects.equals(this.namespaceSelector, v1PodMonitorSpec.namespaceSelector) &&
        Objects.equals(this.podMetricsEndpoints, v1PodMonitorSpec.podMetricsEndpoints) &&
        Objects.equals(this.podTargetLabels, v1PodMonitorSpec.podTargetLabels) &&
        Objects.equals(this.sampleLimit, v1PodMonitorSpec.sampleLimit) &&
        Objects.equals(this.selector, v1PodMonitorSpec.selector) &&
        Objects.equals(this.targetLimit, v1PodMonitorSpec.targetLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachMetadata, jobLabel, labelLimit, labelNameLengthLimit, labelValueLengthLimit, namespaceSelector, podMetricsEndpoints, podTargetLabels, sampleLimit, selector, targetLimit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PodMonitorSpec {\n");
    sb.append("    attachMetadata: ").append(toIndentedString(attachMetadata)).append("\n");
    sb.append("    jobLabel: ").append(toIndentedString(jobLabel)).append("\n");
    sb.append("    labelLimit: ").append(toIndentedString(labelLimit)).append("\n");
    sb.append("    labelNameLengthLimit: ").append(toIndentedString(labelNameLengthLimit)).append("\n");
    sb.append("    labelValueLengthLimit: ").append(toIndentedString(labelValueLengthLimit)).append("\n");
    sb.append("    namespaceSelector: ").append(toIndentedString(namespaceSelector)).append("\n");
    sb.append("    podMetricsEndpoints: ").append(toIndentedString(podMetricsEndpoints)).append("\n");
    sb.append("    podTargetLabels: ").append(toIndentedString(podTargetLabels)).append("\n");
    sb.append("    sampleLimit: ").append(toIndentedString(sampleLimit)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("    targetLimit: ").append(toIndentedString(targetLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachMetadata");
    openapiFields.add("jobLabel");
    openapiFields.add("labelLimit");
    openapiFields.add("labelNameLengthLimit");
    openapiFields.add("labelValueLengthLimit");
    openapiFields.add("namespaceSelector");
    openapiFields.add("podMetricsEndpoints");
    openapiFields.add("podTargetLabels");
    openapiFields.add("sampleLimit");
    openapiFields.add("selector");
    openapiFields.add("targetLimit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("podMetricsEndpoints");
    openapiRequiredFields.add("selector");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1PodMonitorSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1PodMonitorSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1PodMonitorSpec is not found in the empty JSON string", V1PodMonitorSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1PodMonitorSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1PodMonitorSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1PodMonitorSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `attachMetadata`
      if (jsonObj.get("attachMetadata") != null && !jsonObj.get("attachMetadata").isJsonNull()) {
        V1PodMonitorSpecAttachMetadata.validateJsonObject(jsonObj.getAsJsonObject("attachMetadata"));
      }
      if ((jsonObj.get("jobLabel") != null && !jsonObj.get("jobLabel").isJsonNull()) && !jsonObj.get("jobLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobLabel").toString()));
      }
      // validate the optional field `namespaceSelector`
      if (jsonObj.get("namespaceSelector") != null && !jsonObj.get("namespaceSelector").isJsonNull()) {
        V1PodMonitorSpecNamespaceSelector.validateJsonObject(jsonObj.getAsJsonObject("namespaceSelector"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("podMetricsEndpoints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `podMetricsEndpoints` to be an array in the JSON string but got `%s`", jsonObj.get("podMetricsEndpoints").toString()));
      }

      JsonArray jsonArraypodMetricsEndpoints = jsonObj.getAsJsonArray("podMetricsEndpoints");
      // validate the required field `podMetricsEndpoints` (array)
      for (int i = 0; i < jsonArraypodMetricsEndpoints.size(); i++) {
        V1PodMonitorSpecPodMetricsEndpointsInner.validateJsonObject(jsonArraypodMetricsEndpoints.get(i).getAsJsonObject());
      };
      // ensure the optional json data is an array if present
      if (jsonObj.get("podTargetLabels") != null && !jsonObj.get("podTargetLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `podTargetLabels` to be an array in the JSON string but got `%s`", jsonObj.get("podTargetLabels").toString()));
      }
      // validate the required field `selector`
      V1PodMonitorSpecSelector.validateJsonObject(jsonObj.getAsJsonObject("selector"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1PodMonitorSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1PodMonitorSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1PodMonitorSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1PodMonitorSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<V1PodMonitorSpec>() {
           @Override
           public void write(JsonWriter out, V1PodMonitorSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1PodMonitorSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1PodMonitorSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1PodMonitorSpec
  * @throws IOException if the JSON string is invalid with respect to V1PodMonitorSpec
  */
  public static V1PodMonitorSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1PodMonitorSpec.class);
  }

 /**
  * Convert an instance of V1PodMonitorSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

