/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.coreos.monitoring.models.V1AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1AlertmanagerSpecStorageVolumeClaimTemplateStatus {
  public static final String SERIALIZED_NAME_ACCESS_MODES = "accessModes";
  @SerializedName(SERIALIZED_NAME_ACCESS_MODES)
  private List<String> accessModes;

  public static final String SERIALIZED_NAME_ALLOCATED_RESOURCES = "allocatedResources";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_RESOURCES)
  private Map<String, Object> allocatedResources = new HashMap<>();

  public static final String SERIALIZED_NAME_CAPACITY = "capacity";
  @SerializedName(SERIALIZED_NAME_CAPACITY)
  private Map<String, Object> capacity = new HashMap<>();

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<V1AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsInner> conditions;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private String phase;

  public static final String SERIALIZED_NAME_RESIZE_STATUS = "resizeStatus";
  @SerializedName(SERIALIZED_NAME_RESIZE_STATUS)
  private String resizeStatus;

  public V1AlertmanagerSpecStorageVolumeClaimTemplateStatus() {
  }

  public V1AlertmanagerSpecStorageVolumeClaimTemplateStatus accessModes(List<String> accessModes) {
    
    this.accessModes = accessModes;
    return this;
  }

  public V1AlertmanagerSpecStorageVolumeClaimTemplateStatus addAccessModesItem(String accessModesItem) {
    if (this.accessModes == null) {
      this.accessModes = new ArrayList<>();
    }
    this.accessModes.add(accessModesItem);
    return this;
  }

   /**
   * accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
   * @return accessModes
  **/
  @jakarta.annotation.Nullable
  public List<String> getAccessModes() {
    return accessModes;
  }


  public void setAccessModes(List<String> accessModes) {
    this.accessModes = accessModes;
  }


  public V1AlertmanagerSpecStorageVolumeClaimTemplateStatus allocatedResources(Map<String, Object> allocatedResources) {
    
    this.allocatedResources = allocatedResources;
    return this;
  }

  public V1AlertmanagerSpecStorageVolumeClaimTemplateStatus putAllocatedResourcesItem(String key, Object allocatedResourcesItem) {
    if (this.allocatedResources == null) {
      this.allocatedResources = new HashMap<>();
    }
    this.allocatedResources.put(key, allocatedResourcesItem);
    return this;
  }

   /**
   * allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
   * @return allocatedResources
  **/
  @jakarta.annotation.Nullable
  public Map<String, Object> getAllocatedResources() {
    return allocatedResources;
  }


  public void setAllocatedResources(Map<String, Object> allocatedResources) {
    this.allocatedResources = allocatedResources;
  }


  public V1AlertmanagerSpecStorageVolumeClaimTemplateStatus capacity(Map<String, Object> capacity) {
    
    this.capacity = capacity;
    return this;
  }

  public V1AlertmanagerSpecStorageVolumeClaimTemplateStatus putCapacityItem(String key, Object capacityItem) {
    if (this.capacity == null) {
      this.capacity = new HashMap<>();
    }
    this.capacity.put(key, capacityItem);
    return this;
  }

   /**
   * capacity represents the actual resources of the underlying volume.
   * @return capacity
  **/
  @jakarta.annotation.Nullable
  public Map<String, Object> getCapacity() {
    return capacity;
  }


  public void setCapacity(Map<String, Object> capacity) {
    this.capacity = capacity;
  }


  public V1AlertmanagerSpecStorageVolumeClaimTemplateStatus conditions(List<V1AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsInner> conditions) {
    
    this.conditions = conditions;
    return this;
  }

  public V1AlertmanagerSpecStorageVolumeClaimTemplateStatus addConditionsItem(V1AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsInner conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to &#39;ResizeStarted&#39;.
   * @return conditions
  **/
  @jakarta.annotation.Nullable
  public List<V1AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsInner> getConditions() {
    return conditions;
  }


  public void setConditions(List<V1AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsInner> conditions) {
    this.conditions = conditions;
  }


  public V1AlertmanagerSpecStorageVolumeClaimTemplateStatus phase(String phase) {
    
    this.phase = phase;
    return this;
  }

   /**
   * phase represents the current phase of PersistentVolumeClaim.
   * @return phase
  **/
  @jakarta.annotation.Nullable
  public String getPhase() {
    return phase;
  }


  public void setPhase(String phase) {
    this.phase = phase;
  }


  public V1AlertmanagerSpecStorageVolumeClaimTemplateStatus resizeStatus(String resizeStatus) {
    
    this.resizeStatus = resizeStatus;
    return this;
  }

   /**
   * resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
   * @return resizeStatus
  **/
  @jakarta.annotation.Nullable
  public String getResizeStatus() {
    return resizeStatus;
  }


  public void setResizeStatus(String resizeStatus) {
    this.resizeStatus = resizeStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1AlertmanagerSpecStorageVolumeClaimTemplateStatus v1AlertmanagerSpecStorageVolumeClaimTemplateStatus = (V1AlertmanagerSpecStorageVolumeClaimTemplateStatus) o;
    return Objects.equals(this.accessModes, v1AlertmanagerSpecStorageVolumeClaimTemplateStatus.accessModes) &&
        Objects.equals(this.allocatedResources, v1AlertmanagerSpecStorageVolumeClaimTemplateStatus.allocatedResources) &&
        Objects.equals(this.capacity, v1AlertmanagerSpecStorageVolumeClaimTemplateStatus.capacity) &&
        Objects.equals(this.conditions, v1AlertmanagerSpecStorageVolumeClaimTemplateStatus.conditions) &&
        Objects.equals(this.phase, v1AlertmanagerSpecStorageVolumeClaimTemplateStatus.phase) &&
        Objects.equals(this.resizeStatus, v1AlertmanagerSpecStorageVolumeClaimTemplateStatus.resizeStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessModes, allocatedResources, capacity, conditions, phase, resizeStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1AlertmanagerSpecStorageVolumeClaimTemplateStatus {\n");
    sb.append("    accessModes: ").append(toIndentedString(accessModes)).append("\n");
    sb.append("    allocatedResources: ").append(toIndentedString(allocatedResources)).append("\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    resizeStatus: ").append(toIndentedString(resizeStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessModes");
    openapiFields.add("allocatedResources");
    openapiFields.add("capacity");
    openapiFields.add("conditions");
    openapiFields.add("phase");
    openapiFields.add("resizeStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1AlertmanagerSpecStorageVolumeClaimTemplateStatus
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1AlertmanagerSpecStorageVolumeClaimTemplateStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1AlertmanagerSpecStorageVolumeClaimTemplateStatus is not found in the empty JSON string", V1AlertmanagerSpecStorageVolumeClaimTemplateStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1AlertmanagerSpecStorageVolumeClaimTemplateStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1AlertmanagerSpecStorageVolumeClaimTemplateStatus` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("accessModes") != null && !jsonObj.get("accessModes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessModes` to be an array in the JSON string but got `%s`", jsonObj.get("accessModes").toString()));
      }
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            V1AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsInner.validateJsonObject(jsonArrayconditions.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) && !jsonObj.get("phase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phase").toString()));
      }
      if ((jsonObj.get("resizeStatus") != null && !jsonObj.get("resizeStatus").isJsonNull()) && !jsonObj.get("resizeStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resizeStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resizeStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1AlertmanagerSpecStorageVolumeClaimTemplateStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1AlertmanagerSpecStorageVolumeClaimTemplateStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1AlertmanagerSpecStorageVolumeClaimTemplateStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1AlertmanagerSpecStorageVolumeClaimTemplateStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<V1AlertmanagerSpecStorageVolumeClaimTemplateStatus>() {
           @Override
           public void write(JsonWriter out, V1AlertmanagerSpecStorageVolumeClaimTemplateStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1AlertmanagerSpecStorageVolumeClaimTemplateStatus read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1AlertmanagerSpecStorageVolumeClaimTemplateStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1AlertmanagerSpecStorageVolumeClaimTemplateStatus
  * @throws IOException if the JSON string is invalid with respect to V1AlertmanagerSpecStorageVolumeClaimTemplateStatus
  */
  public static V1AlertmanagerSpecStorageVolumeClaimTemplateStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1AlertmanagerSpecStorageVolumeClaimTemplateStatus.class);
  }

 /**
  * Convert an instance of V1AlertmanagerSpecStorageVolumeClaimTemplateStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

