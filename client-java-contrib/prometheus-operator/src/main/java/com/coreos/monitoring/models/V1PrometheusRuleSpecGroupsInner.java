/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.coreos.monitoring.models.V1PrometheusRuleSpecGroupsInnerRulesInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * RuleGroup is a list of sequentially evaluated recording and alerting rules.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1PrometheusRuleSpecGroupsInner {
  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private String interval;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARTIAL_RESPONSE_STRATEGY = "partial_response_strategy";
  @SerializedName(SERIALIZED_NAME_PARTIAL_RESPONSE_STRATEGY)
  private String partialResponseStrategy;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private List<V1PrometheusRuleSpecGroupsInnerRulesInner> rules;

  public V1PrometheusRuleSpecGroupsInner() {
  }

  public V1PrometheusRuleSpecGroupsInner interval(String interval) {
    
    this.interval = interval;
    return this;
  }

   /**
   * Interval determines how often rules in the group are evaluated.
   * @return interval
  **/
  @jakarta.annotation.Nullable
  public String getInterval() {
    return interval;
  }


  public void setInterval(String interval) {
    this.interval = interval;
  }


  public V1PrometheusRuleSpecGroupsInner limit(Integer limit) {
    
    this.limit = limit;
    return this;
  }

   /**
   * Limit the number of alerts an alerting rule and series a recording rule can produce. Limit is supported starting with Prometheus &gt;&#x3D; 2.31 and Thanos Ruler &gt;&#x3D; 0.24.
   * @return limit
  **/
  @jakarta.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }


  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public V1PrometheusRuleSpecGroupsInner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the rule group.
   * @return name
  **/
  @jakarta.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V1PrometheusRuleSpecGroupsInner partialResponseStrategy(String partialResponseStrategy) {
    
    this.partialResponseStrategy = partialResponseStrategy;
    return this;
  }

   /**
   * PartialResponseStrategy is only used by ThanosRuler and will be ignored by Prometheus instances. More info: https://github.com/thanos-io/thanos/blob/main/docs/components/rule.md#partial-response
   * @return partialResponseStrategy
  **/
  @jakarta.annotation.Nullable
  public String getPartialResponseStrategy() {
    return partialResponseStrategy;
  }


  public void setPartialResponseStrategy(String partialResponseStrategy) {
    this.partialResponseStrategy = partialResponseStrategy;
  }


  public V1PrometheusRuleSpecGroupsInner rules(List<V1PrometheusRuleSpecGroupsInnerRulesInner> rules) {
    
    this.rules = rules;
    return this;
  }

  public V1PrometheusRuleSpecGroupsInner addRulesItem(V1PrometheusRuleSpecGroupsInnerRulesInner rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

   /**
   * List of alerting and recording rules.
   * @return rules
  **/
  @jakarta.annotation.Nullable
  public List<V1PrometheusRuleSpecGroupsInnerRulesInner> getRules() {
    return rules;
  }


  public void setRules(List<V1PrometheusRuleSpecGroupsInnerRulesInner> rules) {
    this.rules = rules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PrometheusRuleSpecGroupsInner v1PrometheusRuleSpecGroupsInner = (V1PrometheusRuleSpecGroupsInner) o;
    return Objects.equals(this.interval, v1PrometheusRuleSpecGroupsInner.interval) &&
        Objects.equals(this.limit, v1PrometheusRuleSpecGroupsInner.limit) &&
        Objects.equals(this.name, v1PrometheusRuleSpecGroupsInner.name) &&
        Objects.equals(this.partialResponseStrategy, v1PrometheusRuleSpecGroupsInner.partialResponseStrategy) &&
        Objects.equals(this.rules, v1PrometheusRuleSpecGroupsInner.rules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interval, limit, name, partialResponseStrategy, rules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PrometheusRuleSpecGroupsInner {\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    partialResponseStrategy: ").append(toIndentedString(partialResponseStrategy)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("interval");
    openapiFields.add("limit");
    openapiFields.add("name");
    openapiFields.add("partial_response_strategy");
    openapiFields.add("rules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1PrometheusRuleSpecGroupsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1PrometheusRuleSpecGroupsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1PrometheusRuleSpecGroupsInner is not found in the empty JSON string", V1PrometheusRuleSpecGroupsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1PrometheusRuleSpecGroupsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1PrometheusRuleSpecGroupsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1PrometheusRuleSpecGroupsInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) && !jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("partial_response_strategy") != null && !jsonObj.get("partial_response_strategy").isJsonNull()) && !jsonObj.get("partial_response_strategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partial_response_strategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partial_response_strategy").toString()));
      }
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
        if (jsonArrayrules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rules` to be an array in the JSON string but got `%s`", jsonObj.get("rules").toString()));
          }

          // validate the optional field `rules` (array)
          for (int i = 0; i < jsonArrayrules.size(); i++) {
            V1PrometheusRuleSpecGroupsInnerRulesInner.validateJsonObject(jsonArrayrules.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1PrometheusRuleSpecGroupsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1PrometheusRuleSpecGroupsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1PrometheusRuleSpecGroupsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1PrometheusRuleSpecGroupsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<V1PrometheusRuleSpecGroupsInner>() {
           @Override
           public void write(JsonWriter out, V1PrometheusRuleSpecGroupsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1PrometheusRuleSpecGroupsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1PrometheusRuleSpecGroupsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1PrometheusRuleSpecGroupsInner
  * @throws IOException if the JSON string is invalid with respect to V1PrometheusRuleSpecGroupsInner
  */
  public static V1PrometheusRuleSpecGroupsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1PrometheusRuleSpecGroupsInner.class);
  }

 /**
  * Convert an instance of V1PrometheusRuleSpecGroupsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

