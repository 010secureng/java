/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.coreos.monitoring.models.V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig;
import com.coreos.monitoring.models.V1AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieApiKey;
import com.coreos.monitoring.models.V1AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieApiUrl;
import com.coreos.monitoring.models.V1AlertmanagerSpecAlertmanagerConfigurationGlobalSlackApiUrl;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Defines the global parameters of the Alertmanager configuration.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1AlertmanagerSpecAlertmanagerConfigurationGlobal {
  public static final String SERIALIZED_NAME_HTTP_CONFIG = "httpConfig";
  @SerializedName(SERIALIZED_NAME_HTTP_CONFIG)
  private V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig httpConfig;

  public static final String SERIALIZED_NAME_OPS_GENIE_API_KEY = "opsGenieApiKey";
  @SerializedName(SERIALIZED_NAME_OPS_GENIE_API_KEY)
  private V1AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieApiKey opsGenieApiKey;

  public static final String SERIALIZED_NAME_OPS_GENIE_API_URL = "opsGenieApiUrl";
  @SerializedName(SERIALIZED_NAME_OPS_GENIE_API_URL)
  private V1AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieApiUrl opsGenieApiUrl;

  public static final String SERIALIZED_NAME_RESOLVE_TIMEOUT = "resolveTimeout";
  @SerializedName(SERIALIZED_NAME_RESOLVE_TIMEOUT)
  private String resolveTimeout;

  public static final String SERIALIZED_NAME_SLACK_API_URL = "slackApiUrl";
  @SerializedName(SERIALIZED_NAME_SLACK_API_URL)
  private V1AlertmanagerSpecAlertmanagerConfigurationGlobalSlackApiUrl slackApiUrl;

  public V1AlertmanagerSpecAlertmanagerConfigurationGlobal() {
  }

  public V1AlertmanagerSpecAlertmanagerConfigurationGlobal httpConfig(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig httpConfig) {
    
    this.httpConfig = httpConfig;
    return this;
  }

   /**
   * Get httpConfig
   * @return httpConfig
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig getHttpConfig() {
    return httpConfig;
  }


  public void setHttpConfig(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig httpConfig) {
    this.httpConfig = httpConfig;
  }


  public V1AlertmanagerSpecAlertmanagerConfigurationGlobal opsGenieApiKey(V1AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieApiKey opsGenieApiKey) {
    
    this.opsGenieApiKey = opsGenieApiKey;
    return this;
  }

   /**
   * Get opsGenieApiKey
   * @return opsGenieApiKey
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieApiKey getOpsGenieApiKey() {
    return opsGenieApiKey;
  }


  public void setOpsGenieApiKey(V1AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieApiKey opsGenieApiKey) {
    this.opsGenieApiKey = opsGenieApiKey;
  }


  public V1AlertmanagerSpecAlertmanagerConfigurationGlobal opsGenieApiUrl(V1AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieApiUrl opsGenieApiUrl) {
    
    this.opsGenieApiUrl = opsGenieApiUrl;
    return this;
  }

   /**
   * Get opsGenieApiUrl
   * @return opsGenieApiUrl
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieApiUrl getOpsGenieApiUrl() {
    return opsGenieApiUrl;
  }


  public void setOpsGenieApiUrl(V1AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieApiUrl opsGenieApiUrl) {
    this.opsGenieApiUrl = opsGenieApiUrl;
  }


  public V1AlertmanagerSpecAlertmanagerConfigurationGlobal resolveTimeout(String resolveTimeout) {
    
    this.resolveTimeout = resolveTimeout;
    return this;
  }

   /**
   * ResolveTimeout is the default value used by alertmanager if the alert does not include EndsAt, after this time passes it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt.
   * @return resolveTimeout
  **/
  @jakarta.annotation.Nullable
  public String getResolveTimeout() {
    return resolveTimeout;
  }


  public void setResolveTimeout(String resolveTimeout) {
    this.resolveTimeout = resolveTimeout;
  }


  public V1AlertmanagerSpecAlertmanagerConfigurationGlobal slackApiUrl(V1AlertmanagerSpecAlertmanagerConfigurationGlobalSlackApiUrl slackApiUrl) {
    
    this.slackApiUrl = slackApiUrl;
    return this;
  }

   /**
   * Get slackApiUrl
   * @return slackApiUrl
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalSlackApiUrl getSlackApiUrl() {
    return slackApiUrl;
  }


  public void setSlackApiUrl(V1AlertmanagerSpecAlertmanagerConfigurationGlobalSlackApiUrl slackApiUrl) {
    this.slackApiUrl = slackApiUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1AlertmanagerSpecAlertmanagerConfigurationGlobal v1AlertmanagerSpecAlertmanagerConfigurationGlobal = (V1AlertmanagerSpecAlertmanagerConfigurationGlobal) o;
    return Objects.equals(this.httpConfig, v1AlertmanagerSpecAlertmanagerConfigurationGlobal.httpConfig) &&
        Objects.equals(this.opsGenieApiKey, v1AlertmanagerSpecAlertmanagerConfigurationGlobal.opsGenieApiKey) &&
        Objects.equals(this.opsGenieApiUrl, v1AlertmanagerSpecAlertmanagerConfigurationGlobal.opsGenieApiUrl) &&
        Objects.equals(this.resolveTimeout, v1AlertmanagerSpecAlertmanagerConfigurationGlobal.resolveTimeout) &&
        Objects.equals(this.slackApiUrl, v1AlertmanagerSpecAlertmanagerConfigurationGlobal.slackApiUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(httpConfig, opsGenieApiKey, opsGenieApiUrl, resolveTimeout, slackApiUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1AlertmanagerSpecAlertmanagerConfigurationGlobal {\n");
    sb.append("    httpConfig: ").append(toIndentedString(httpConfig)).append("\n");
    sb.append("    opsGenieApiKey: ").append(toIndentedString(opsGenieApiKey)).append("\n");
    sb.append("    opsGenieApiUrl: ").append(toIndentedString(opsGenieApiUrl)).append("\n");
    sb.append("    resolveTimeout: ").append(toIndentedString(resolveTimeout)).append("\n");
    sb.append("    slackApiUrl: ").append(toIndentedString(slackApiUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("httpConfig");
    openapiFields.add("opsGenieApiKey");
    openapiFields.add("opsGenieApiUrl");
    openapiFields.add("resolveTimeout");
    openapiFields.add("slackApiUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1AlertmanagerSpecAlertmanagerConfigurationGlobal
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1AlertmanagerSpecAlertmanagerConfigurationGlobal.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1AlertmanagerSpecAlertmanagerConfigurationGlobal is not found in the empty JSON string", V1AlertmanagerSpecAlertmanagerConfigurationGlobal.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1AlertmanagerSpecAlertmanagerConfigurationGlobal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1AlertmanagerSpecAlertmanagerConfigurationGlobal` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `httpConfig`
      if (jsonObj.get("httpConfig") != null && !jsonObj.get("httpConfig").isJsonNull()) {
        V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig.validateJsonObject(jsonObj.getAsJsonObject("httpConfig"));
      }
      // validate the optional field `opsGenieApiKey`
      if (jsonObj.get("opsGenieApiKey") != null && !jsonObj.get("opsGenieApiKey").isJsonNull()) {
        V1AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieApiKey.validateJsonObject(jsonObj.getAsJsonObject("opsGenieApiKey"));
      }
      // validate the optional field `opsGenieApiUrl`
      if (jsonObj.get("opsGenieApiUrl") != null && !jsonObj.get("opsGenieApiUrl").isJsonNull()) {
        V1AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieApiUrl.validateJsonObject(jsonObj.getAsJsonObject("opsGenieApiUrl"));
      }
      if ((jsonObj.get("resolveTimeout") != null && !jsonObj.get("resolveTimeout").isJsonNull()) && !jsonObj.get("resolveTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolveTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolveTimeout").toString()));
      }
      // validate the optional field `slackApiUrl`
      if (jsonObj.get("slackApiUrl") != null && !jsonObj.get("slackApiUrl").isJsonNull()) {
        V1AlertmanagerSpecAlertmanagerConfigurationGlobalSlackApiUrl.validateJsonObject(jsonObj.getAsJsonObject("slackApiUrl"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1AlertmanagerSpecAlertmanagerConfigurationGlobal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1AlertmanagerSpecAlertmanagerConfigurationGlobal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1AlertmanagerSpecAlertmanagerConfigurationGlobal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1AlertmanagerSpecAlertmanagerConfigurationGlobal.class));

       return (TypeAdapter<T>) new TypeAdapter<V1AlertmanagerSpecAlertmanagerConfigurationGlobal>() {
           @Override
           public void write(JsonWriter out, V1AlertmanagerSpecAlertmanagerConfigurationGlobal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1AlertmanagerSpecAlertmanagerConfigurationGlobal read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1AlertmanagerSpecAlertmanagerConfigurationGlobal given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1AlertmanagerSpecAlertmanagerConfigurationGlobal
  * @throws IOException if the JSON string is invalid with respect to V1AlertmanagerSpecAlertmanagerConfigurationGlobal
  */
  public static V1AlertmanagerSpecAlertmanagerConfigurationGlobal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1AlertmanagerSpecAlertmanagerConfigurationGlobal.class);
  }

 /**
  * Convert an instance of V1AlertmanagerSpecAlertmanagerConfigurationGlobal to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

