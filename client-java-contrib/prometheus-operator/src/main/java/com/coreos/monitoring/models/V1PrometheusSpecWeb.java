/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.coreos.monitoring.models.V1AlertmanagerSpecWebHttpConfig;
import com.coreos.monitoring.models.V1AlertmanagerSpecWebTlsConfig;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Defines the web command line flags when starting Prometheus.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1PrometheusSpecWeb {
  public static final String SERIALIZED_NAME_HTTP_CONFIG = "httpConfig";
  @SerializedName(SERIALIZED_NAME_HTTP_CONFIG)
  private V1AlertmanagerSpecWebHttpConfig httpConfig;

  public static final String SERIALIZED_NAME_MAX_CONNECTIONS = "maxConnections";
  @SerializedName(SERIALIZED_NAME_MAX_CONNECTIONS)
  private Integer maxConnections;

  public static final String SERIALIZED_NAME_PAGE_TITLE = "pageTitle";
  @SerializedName(SERIALIZED_NAME_PAGE_TITLE)
  private String pageTitle;

  public static final String SERIALIZED_NAME_TLS_CONFIG = "tlsConfig";
  @SerializedName(SERIALIZED_NAME_TLS_CONFIG)
  private V1AlertmanagerSpecWebTlsConfig tlsConfig;

  public V1PrometheusSpecWeb() {
  }

  public V1PrometheusSpecWeb httpConfig(V1AlertmanagerSpecWebHttpConfig httpConfig) {
    
    this.httpConfig = httpConfig;
    return this;
  }

   /**
   * Get httpConfig
   * @return httpConfig
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecWebHttpConfig getHttpConfig() {
    return httpConfig;
  }


  public void setHttpConfig(V1AlertmanagerSpecWebHttpConfig httpConfig) {
    this.httpConfig = httpConfig;
  }


  public V1PrometheusSpecWeb maxConnections(Integer maxConnections) {
    
    this.maxConnections = maxConnections;
    return this;
  }

   /**
   * Defines the maximum number of simultaneous connections A zero value means that Prometheus doesn&#39;t accept any incoming connection.
   * minimum: 0
   * @return maxConnections
  **/
  @jakarta.annotation.Nullable
  public Integer getMaxConnections() {
    return maxConnections;
  }


  public void setMaxConnections(Integer maxConnections) {
    this.maxConnections = maxConnections;
  }


  public V1PrometheusSpecWeb pageTitle(String pageTitle) {
    
    this.pageTitle = pageTitle;
    return this;
  }

   /**
   * The prometheus web page title
   * @return pageTitle
  **/
  @jakarta.annotation.Nullable
  public String getPageTitle() {
    return pageTitle;
  }


  public void setPageTitle(String pageTitle) {
    this.pageTitle = pageTitle;
  }


  public V1PrometheusSpecWeb tlsConfig(V1AlertmanagerSpecWebTlsConfig tlsConfig) {
    
    this.tlsConfig = tlsConfig;
    return this;
  }

   /**
   * Get tlsConfig
   * @return tlsConfig
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecWebTlsConfig getTlsConfig() {
    return tlsConfig;
  }


  public void setTlsConfig(V1AlertmanagerSpecWebTlsConfig tlsConfig) {
    this.tlsConfig = tlsConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PrometheusSpecWeb v1PrometheusSpecWeb = (V1PrometheusSpecWeb) o;
    return Objects.equals(this.httpConfig, v1PrometheusSpecWeb.httpConfig) &&
        Objects.equals(this.maxConnections, v1PrometheusSpecWeb.maxConnections) &&
        Objects.equals(this.pageTitle, v1PrometheusSpecWeb.pageTitle) &&
        Objects.equals(this.tlsConfig, v1PrometheusSpecWeb.tlsConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(httpConfig, maxConnections, pageTitle, tlsConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PrometheusSpecWeb {\n");
    sb.append("    httpConfig: ").append(toIndentedString(httpConfig)).append("\n");
    sb.append("    maxConnections: ").append(toIndentedString(maxConnections)).append("\n");
    sb.append("    pageTitle: ").append(toIndentedString(pageTitle)).append("\n");
    sb.append("    tlsConfig: ").append(toIndentedString(tlsConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("httpConfig");
    openapiFields.add("maxConnections");
    openapiFields.add("pageTitle");
    openapiFields.add("tlsConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1PrometheusSpecWeb
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1PrometheusSpecWeb.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1PrometheusSpecWeb is not found in the empty JSON string", V1PrometheusSpecWeb.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1PrometheusSpecWeb.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1PrometheusSpecWeb` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `httpConfig`
      if (jsonObj.get("httpConfig") != null && !jsonObj.get("httpConfig").isJsonNull()) {
        V1AlertmanagerSpecWebHttpConfig.validateJsonObject(jsonObj.getAsJsonObject("httpConfig"));
      }
      if ((jsonObj.get("pageTitle") != null && !jsonObj.get("pageTitle").isJsonNull()) && !jsonObj.get("pageTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageTitle").toString()));
      }
      // validate the optional field `tlsConfig`
      if (jsonObj.get("tlsConfig") != null && !jsonObj.get("tlsConfig").isJsonNull()) {
        V1AlertmanagerSpecWebTlsConfig.validateJsonObject(jsonObj.getAsJsonObject("tlsConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1PrometheusSpecWeb.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1PrometheusSpecWeb' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1PrometheusSpecWeb> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1PrometheusSpecWeb.class));

       return (TypeAdapter<T>) new TypeAdapter<V1PrometheusSpecWeb>() {
           @Override
           public void write(JsonWriter out, V1PrometheusSpecWeb value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1PrometheusSpecWeb read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1PrometheusSpecWeb given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1PrometheusSpecWeb
  * @throws IOException if the JSON string is invalid with respect to V1PrometheusSpecWeb
  */
  public static V1PrometheusSpecWeb fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1PrometheusSpecWeb.class);
  }

 /**
  * Convert an instance of V1PrometheusSpecWeb to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

