/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.coreos.monitoring.models.V1AlertmanagerSpecContainersInnerVolumeMountsInner;
import com.coreos.monitoring.models.V1PrometheusSpecAdditionalArgsInner;
import com.coreos.monitoring.models.V1PrometheusSpecThanosGrpcServerTlsConfig;
import com.coreos.monitoring.models.V1PrometheusSpecThanosObjectStorageConfig;
import com.coreos.monitoring.models.V1PrometheusSpecThanosResources;
import com.coreos.monitoring.models.V1PrometheusSpecThanosTracingConfig;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Thanos configuration allows configuring various aspects of a Prometheus server in a Thanos environment.   This section is experimental, it may change significantly without deprecation notice in any release.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1PrometheusSpecThanos {
  public static final String SERIALIZED_NAME_ADDITIONAL_ARGS = "additionalArgs";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_ARGS)
  private List<V1PrometheusSpecAdditionalArgsInner> additionalArgs;

  public static final String SERIALIZED_NAME_BASE_IMAGE = "baseImage";
  @SerializedName(SERIALIZED_NAME_BASE_IMAGE)
  private String baseImage;

  public static final String SERIALIZED_NAME_BLOCK_SIZE = "blockSize";
  @SerializedName(SERIALIZED_NAME_BLOCK_SIZE)
  private String blockSize;

  public static final String SERIALIZED_NAME_GET_CONFIG_INTERVAL = "getConfigInterval";
  @SerializedName(SERIALIZED_NAME_GET_CONFIG_INTERVAL)
  private String getConfigInterval;

  public static final String SERIALIZED_NAME_GET_CONFIG_TIMEOUT = "getConfigTimeout";
  @SerializedName(SERIALIZED_NAME_GET_CONFIG_TIMEOUT)
  private String getConfigTimeout;

  public static final String SERIALIZED_NAME_GRPC_LISTEN_LOCAL = "grpcListenLocal";
  @SerializedName(SERIALIZED_NAME_GRPC_LISTEN_LOCAL)
  private Boolean grpcListenLocal;

  public static final String SERIALIZED_NAME_GRPC_SERVER_TLS_CONFIG = "grpcServerTlsConfig";
  @SerializedName(SERIALIZED_NAME_GRPC_SERVER_TLS_CONFIG)
  private V1PrometheusSpecThanosGrpcServerTlsConfig grpcServerTlsConfig;

  public static final String SERIALIZED_NAME_HTTP_LISTEN_LOCAL = "httpListenLocal";
  @SerializedName(SERIALIZED_NAME_HTTP_LISTEN_LOCAL)
  private Boolean httpListenLocal;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_LISTEN_LOCAL = "listenLocal";
  @SerializedName(SERIALIZED_NAME_LISTEN_LOCAL)
  private Boolean listenLocal;

  /**
   * LogFormat for Thanos sidecar to be configured with.
   */
  @JsonAdapter(LogFormatEnum.Adapter.class)
  public enum LogFormatEnum {
    EMPTY(""),
    
    LOGFMT("logfmt"),
    
    JSON("json");

    private String value;

    LogFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogFormatEnum fromValue(String value) {
      for (LogFormatEnum b : LogFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogFormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LOG_FORMAT = "logFormat";
  @SerializedName(SERIALIZED_NAME_LOG_FORMAT)
  private LogFormatEnum logFormat;

  /**
   * LogLevel for Thanos sidecar to be configured with.
   */
  @JsonAdapter(LogLevelEnum.Adapter.class)
  public enum LogLevelEnum {
    EMPTY(""),
    
    DEBUG("debug"),
    
    INFO("info"),
    
    WARN("warn"),
    
    ERROR("error");

    private String value;

    LogLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogLevelEnum fromValue(String value) {
      for (LogLevelEnum b : LogLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LOG_LEVEL = "logLevel";
  @SerializedName(SERIALIZED_NAME_LOG_LEVEL)
  private LogLevelEnum logLevel;

  public static final String SERIALIZED_NAME_MIN_TIME = "minTime";
  @SerializedName(SERIALIZED_NAME_MIN_TIME)
  private String minTime;

  public static final String SERIALIZED_NAME_OBJECT_STORAGE_CONFIG = "objectStorageConfig";
  @SerializedName(SERIALIZED_NAME_OBJECT_STORAGE_CONFIG)
  private V1PrometheusSpecThanosObjectStorageConfig objectStorageConfig;

  public static final String SERIALIZED_NAME_OBJECT_STORAGE_CONFIG_FILE = "objectStorageConfigFile";
  @SerializedName(SERIALIZED_NAME_OBJECT_STORAGE_CONFIG_FILE)
  private String objectStorageConfigFile;

  public static final String SERIALIZED_NAME_READY_TIMEOUT = "readyTimeout";
  @SerializedName(SERIALIZED_NAME_READY_TIMEOUT)
  private String readyTimeout;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private V1PrometheusSpecThanosResources resources;

  public static final String SERIALIZED_NAME_SHA = "sha";
  @SerializedName(SERIALIZED_NAME_SHA)
  private String sha;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_TRACING_CONFIG = "tracingConfig";
  @SerializedName(SERIALIZED_NAME_TRACING_CONFIG)
  private V1PrometheusSpecThanosTracingConfig tracingConfig;

  public static final String SERIALIZED_NAME_TRACING_CONFIG_FILE = "tracingConfigFile";
  @SerializedName(SERIALIZED_NAME_TRACING_CONFIG_FILE)
  private String tracingConfigFile;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_VOLUME_MOUNTS = "volumeMounts";
  @SerializedName(SERIALIZED_NAME_VOLUME_MOUNTS)
  private List<V1AlertmanagerSpecContainersInnerVolumeMountsInner> volumeMounts;

  public V1PrometheusSpecThanos() {
  }

  public V1PrometheusSpecThanos additionalArgs(List<V1PrometheusSpecAdditionalArgsInner> additionalArgs) {
    
    this.additionalArgs = additionalArgs;
    return this;
  }

  public V1PrometheusSpecThanos addAdditionalArgsItem(V1PrometheusSpecAdditionalArgsInner additionalArgsItem) {
    if (this.additionalArgs == null) {
      this.additionalArgs = new ArrayList<>();
    }
    this.additionalArgs.add(additionalArgsItem);
    return this;
  }

   /**
   * AdditionalArgs allows setting additional arguments for the Thanos container. The arguments are passed as-is to the Thanos container which may cause issues if they are invalid or not supported the given Thanos version. In case of an argument conflict (e.g. an argument which is already set by the operator itself) or when providing an invalid argument the reconciliation will fail and an error will be logged.
   * @return additionalArgs
  **/
  @jakarta.annotation.Nullable
  public List<V1PrometheusSpecAdditionalArgsInner> getAdditionalArgs() {
    return additionalArgs;
  }


  public void setAdditionalArgs(List<V1PrometheusSpecAdditionalArgsInner> additionalArgs) {
    this.additionalArgs = additionalArgs;
  }


  public V1PrometheusSpecThanos baseImage(String baseImage) {
    
    this.baseImage = baseImage;
    return this;
  }

   /**
   * Thanos base image if other than default. Deprecated: use &#39;image&#39; instead
   * @return baseImage
  **/
  @jakarta.annotation.Nullable
  public String getBaseImage() {
    return baseImage;
  }


  public void setBaseImage(String baseImage) {
    this.baseImage = baseImage;
  }


  public V1PrometheusSpecThanos blockSize(String blockSize) {
    
    this.blockSize = blockSize;
    return this;
  }

   /**
   * BlockDuration controls the size of TSDB blocks produced by Prometheus. Default is 2h to match the upstream Prometheus defaults. WARNING: Changing the block duration can impact the performance and efficiency of the entire Prometheus/Thanos stack due to how it interacts with memory and Thanos compactors. It is recommended to keep this value set to a multiple of 120 times your longest scrape or rule interval. For example, 30s * 120 &#x3D; 1h.
   * @return blockSize
  **/
  @jakarta.annotation.Nullable
  public String getBlockSize() {
    return blockSize;
  }


  public void setBlockSize(String blockSize) {
    this.blockSize = blockSize;
  }


  public V1PrometheusSpecThanos getConfigInterval(String getConfigInterval) {
    
    this.getConfigInterval = getConfigInterval;
    return this;
  }

   /**
   * How often to retrieve the Prometheus configuration.
   * @return getConfigInterval
  **/
  @jakarta.annotation.Nullable
  public String getGetConfigInterval() {
    return getConfigInterval;
  }


  public void setGetConfigInterval(String getConfigInterval) {
    this.getConfigInterval = getConfigInterval;
  }


  public V1PrometheusSpecThanos getConfigTimeout(String getConfigTimeout) {
    
    this.getConfigTimeout = getConfigTimeout;
    return this;
  }

   /**
   * Maximum time to wait when retrieving the Prometheus configuration.
   * @return getConfigTimeout
  **/
  @jakarta.annotation.Nullable
  public String getGetConfigTimeout() {
    return getConfigTimeout;
  }


  public void setGetConfigTimeout(String getConfigTimeout) {
    this.getConfigTimeout = getConfigTimeout;
  }


  public V1PrometheusSpecThanos grpcListenLocal(Boolean grpcListenLocal) {
    
    this.grpcListenLocal = grpcListenLocal;
    return this;
  }

   /**
   * If true, the Thanos sidecar listens on the loopback interface for the gRPC endpoints. It has no effect if &#x60;listenLocal&#x60; is true.
   * @return grpcListenLocal
  **/
  @jakarta.annotation.Nullable
  public Boolean getGrpcListenLocal() {
    return grpcListenLocal;
  }


  public void setGrpcListenLocal(Boolean grpcListenLocal) {
    this.grpcListenLocal = grpcListenLocal;
  }


  public V1PrometheusSpecThanos grpcServerTlsConfig(V1PrometheusSpecThanosGrpcServerTlsConfig grpcServerTlsConfig) {
    
    this.grpcServerTlsConfig = grpcServerTlsConfig;
    return this;
  }

   /**
   * Get grpcServerTlsConfig
   * @return grpcServerTlsConfig
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecThanosGrpcServerTlsConfig getGrpcServerTlsConfig() {
    return grpcServerTlsConfig;
  }


  public void setGrpcServerTlsConfig(V1PrometheusSpecThanosGrpcServerTlsConfig grpcServerTlsConfig) {
    this.grpcServerTlsConfig = grpcServerTlsConfig;
  }


  public V1PrometheusSpecThanos httpListenLocal(Boolean httpListenLocal) {
    
    this.httpListenLocal = httpListenLocal;
    return this;
  }

   /**
   * If true, the Thanos sidecar listens on the loopback interface for the HTTP endpoints. It has no effect if &#x60;listenLocal&#x60; is true.
   * @return httpListenLocal
  **/
  @jakarta.annotation.Nullable
  public Boolean getHttpListenLocal() {
    return httpListenLocal;
  }


  public void setHttpListenLocal(Boolean httpListenLocal) {
    this.httpListenLocal = httpListenLocal;
  }


  public V1PrometheusSpecThanos image(String image) {
    
    this.image = image;
    return this;
  }

   /**
   * Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Thanos is being configured.
   * @return image
  **/
  @jakarta.annotation.Nullable
  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    this.image = image;
  }


  public V1PrometheusSpecThanos listenLocal(Boolean listenLocal) {
    
    this.listenLocal = listenLocal;
    return this;
  }

   /**
   * If true, the Thanos sidecar listens on the loopback interface for the HTTP and gRPC endpoints. It takes precedence over &#x60;grpcListenLocal&#x60; and &#x60;httpListenLocal&#x60;. Deprecated: use &#x60;grpcListenLocal&#x60; and &#x60;httpListenLocal&#x60; instead.
   * @return listenLocal
  **/
  @jakarta.annotation.Nullable
  public Boolean getListenLocal() {
    return listenLocal;
  }


  public void setListenLocal(Boolean listenLocal) {
    this.listenLocal = listenLocal;
  }


  public V1PrometheusSpecThanos logFormat(LogFormatEnum logFormat) {
    
    this.logFormat = logFormat;
    return this;
  }

   /**
   * LogFormat for Thanos sidecar to be configured with.
   * @return logFormat
  **/
  @jakarta.annotation.Nullable
  public LogFormatEnum getLogFormat() {
    return logFormat;
  }


  public void setLogFormat(LogFormatEnum logFormat) {
    this.logFormat = logFormat;
  }


  public V1PrometheusSpecThanos logLevel(LogLevelEnum logLevel) {
    
    this.logLevel = logLevel;
    return this;
  }

   /**
   * LogLevel for Thanos sidecar to be configured with.
   * @return logLevel
  **/
  @jakarta.annotation.Nullable
  public LogLevelEnum getLogLevel() {
    return logLevel;
  }


  public void setLogLevel(LogLevelEnum logLevel) {
    this.logLevel = logLevel;
  }


  public V1PrometheusSpecThanos minTime(String minTime) {
    
    this.minTime = minTime;
    return this;
  }

   /**
   * MinTime for Thanos sidecar to be configured with. Option can be a constant time in RFC3339 format or time duration relative to current time, such as -1d or 2h45m. Valid duration units are ms, s, m, h, d, w, y.
   * @return minTime
  **/
  @jakarta.annotation.Nullable
  public String getMinTime() {
    return minTime;
  }


  public void setMinTime(String minTime) {
    this.minTime = minTime;
  }


  public V1PrometheusSpecThanos objectStorageConfig(V1PrometheusSpecThanosObjectStorageConfig objectStorageConfig) {
    
    this.objectStorageConfig = objectStorageConfig;
    return this;
  }

   /**
   * Get objectStorageConfig
   * @return objectStorageConfig
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecThanosObjectStorageConfig getObjectStorageConfig() {
    return objectStorageConfig;
  }


  public void setObjectStorageConfig(V1PrometheusSpecThanosObjectStorageConfig objectStorageConfig) {
    this.objectStorageConfig = objectStorageConfig;
  }


  public V1PrometheusSpecThanos objectStorageConfigFile(String objectStorageConfigFile) {
    
    this.objectStorageConfigFile = objectStorageConfigFile;
    return this;
  }

   /**
   * ObjectStorageConfigFile specifies the path of the object storage configuration file. When used alongside with ObjectStorageConfig, ObjectStorageConfigFile takes precedence.
   * @return objectStorageConfigFile
  **/
  @jakarta.annotation.Nullable
  public String getObjectStorageConfigFile() {
    return objectStorageConfigFile;
  }


  public void setObjectStorageConfigFile(String objectStorageConfigFile) {
    this.objectStorageConfigFile = objectStorageConfigFile;
  }


  public V1PrometheusSpecThanos readyTimeout(String readyTimeout) {
    
    this.readyTimeout = readyTimeout;
    return this;
  }

   /**
   * ReadyTimeout is the maximum time Thanos sidecar will wait for Prometheus to start. Eg 10m
   * @return readyTimeout
  **/
  @jakarta.annotation.Nullable
  public String getReadyTimeout() {
    return readyTimeout;
  }


  public void setReadyTimeout(String readyTimeout) {
    this.readyTimeout = readyTimeout;
  }


  public V1PrometheusSpecThanos resources(V1PrometheusSpecThanosResources resources) {
    
    this.resources = resources;
    return this;
  }

   /**
   * Get resources
   * @return resources
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecThanosResources getResources() {
    return resources;
  }


  public void setResources(V1PrometheusSpecThanosResources resources) {
    this.resources = resources;
  }


  public V1PrometheusSpecThanos sha(String sha) {
    
    this.sha = sha;
    return this;
  }

   /**
   * SHA of Thanos container image to be deployed. Defaults to the value of &#x60;version&#x60;. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use &#39;image&#39; instead.  The image digest can be specified as part of the image URL.
   * @return sha
  **/
  @jakarta.annotation.Nullable
  public String getSha() {
    return sha;
  }


  public void setSha(String sha) {
    this.sha = sha;
  }


  public V1PrometheusSpecThanos tag(String tag) {
    
    this.tag = tag;
    return this;
  }

   /**
   * Tag of Thanos sidecar container image to be deployed. Defaults to the value of &#x60;version&#x60;. Version is ignored if Tag is set. Deprecated: use &#39;image&#39; instead.  The image tag can be specified as part of the image URL.
   * @return tag
  **/
  @jakarta.annotation.Nullable
  public String getTag() {
    return tag;
  }


  public void setTag(String tag) {
    this.tag = tag;
  }


  public V1PrometheusSpecThanos tracingConfig(V1PrometheusSpecThanosTracingConfig tracingConfig) {
    
    this.tracingConfig = tracingConfig;
    return this;
  }

   /**
   * Get tracingConfig
   * @return tracingConfig
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecThanosTracingConfig getTracingConfig() {
    return tracingConfig;
  }


  public void setTracingConfig(V1PrometheusSpecThanosTracingConfig tracingConfig) {
    this.tracingConfig = tracingConfig;
  }


  public V1PrometheusSpecThanos tracingConfigFile(String tracingConfigFile) {
    
    this.tracingConfigFile = tracingConfigFile;
    return this;
  }

   /**
   * TracingConfig specifies the path of the tracing configuration file. When used alongside with TracingConfig, TracingConfigFile takes precedence.
   * @return tracingConfigFile
  **/
  @jakarta.annotation.Nullable
  public String getTracingConfigFile() {
    return tracingConfigFile;
  }


  public void setTracingConfigFile(String tracingConfigFile) {
    this.tracingConfigFile = tracingConfigFile;
  }


  public V1PrometheusSpecThanos version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Version describes the version of Thanos to use.
   * @return version
  **/
  @jakarta.annotation.Nullable
  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public V1PrometheusSpecThanos volumeMounts(List<V1AlertmanagerSpecContainersInnerVolumeMountsInner> volumeMounts) {
    
    this.volumeMounts = volumeMounts;
    return this;
  }

  public V1PrometheusSpecThanos addVolumeMountsItem(V1AlertmanagerSpecContainersInnerVolumeMountsInner volumeMountsItem) {
    if (this.volumeMounts == null) {
      this.volumeMounts = new ArrayList<>();
    }
    this.volumeMounts.add(volumeMountsItem);
    return this;
  }

   /**
   * VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the thanos-sidecar container.
   * @return volumeMounts
  **/
  @jakarta.annotation.Nullable
  public List<V1AlertmanagerSpecContainersInnerVolumeMountsInner> getVolumeMounts() {
    return volumeMounts;
  }


  public void setVolumeMounts(List<V1AlertmanagerSpecContainersInnerVolumeMountsInner> volumeMounts) {
    this.volumeMounts = volumeMounts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PrometheusSpecThanos v1PrometheusSpecThanos = (V1PrometheusSpecThanos) o;
    return Objects.equals(this.additionalArgs, v1PrometheusSpecThanos.additionalArgs) &&
        Objects.equals(this.baseImage, v1PrometheusSpecThanos.baseImage) &&
        Objects.equals(this.blockSize, v1PrometheusSpecThanos.blockSize) &&
        Objects.equals(this.getConfigInterval, v1PrometheusSpecThanos.getConfigInterval) &&
        Objects.equals(this.getConfigTimeout, v1PrometheusSpecThanos.getConfigTimeout) &&
        Objects.equals(this.grpcListenLocal, v1PrometheusSpecThanos.grpcListenLocal) &&
        Objects.equals(this.grpcServerTlsConfig, v1PrometheusSpecThanos.grpcServerTlsConfig) &&
        Objects.equals(this.httpListenLocal, v1PrometheusSpecThanos.httpListenLocal) &&
        Objects.equals(this.image, v1PrometheusSpecThanos.image) &&
        Objects.equals(this.listenLocal, v1PrometheusSpecThanos.listenLocal) &&
        Objects.equals(this.logFormat, v1PrometheusSpecThanos.logFormat) &&
        Objects.equals(this.logLevel, v1PrometheusSpecThanos.logLevel) &&
        Objects.equals(this.minTime, v1PrometheusSpecThanos.minTime) &&
        Objects.equals(this.objectStorageConfig, v1PrometheusSpecThanos.objectStorageConfig) &&
        Objects.equals(this.objectStorageConfigFile, v1PrometheusSpecThanos.objectStorageConfigFile) &&
        Objects.equals(this.readyTimeout, v1PrometheusSpecThanos.readyTimeout) &&
        Objects.equals(this.resources, v1PrometheusSpecThanos.resources) &&
        Objects.equals(this.sha, v1PrometheusSpecThanos.sha) &&
        Objects.equals(this.tag, v1PrometheusSpecThanos.tag) &&
        Objects.equals(this.tracingConfig, v1PrometheusSpecThanos.tracingConfig) &&
        Objects.equals(this.tracingConfigFile, v1PrometheusSpecThanos.tracingConfigFile) &&
        Objects.equals(this.version, v1PrometheusSpecThanos.version) &&
        Objects.equals(this.volumeMounts, v1PrometheusSpecThanos.volumeMounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalArgs, baseImage, blockSize, getConfigInterval, getConfigTimeout, grpcListenLocal, grpcServerTlsConfig, httpListenLocal, image, listenLocal, logFormat, logLevel, minTime, objectStorageConfig, objectStorageConfigFile, readyTimeout, resources, sha, tag, tracingConfig, tracingConfigFile, version, volumeMounts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PrometheusSpecThanos {\n");
    sb.append("    additionalArgs: ").append(toIndentedString(additionalArgs)).append("\n");
    sb.append("    baseImage: ").append(toIndentedString(baseImage)).append("\n");
    sb.append("    blockSize: ").append(toIndentedString(blockSize)).append("\n");
    sb.append("    getConfigInterval: ").append(toIndentedString(getConfigInterval)).append("\n");
    sb.append("    getConfigTimeout: ").append(toIndentedString(getConfigTimeout)).append("\n");
    sb.append("    grpcListenLocal: ").append(toIndentedString(grpcListenLocal)).append("\n");
    sb.append("    grpcServerTlsConfig: ").append(toIndentedString(grpcServerTlsConfig)).append("\n");
    sb.append("    httpListenLocal: ").append(toIndentedString(httpListenLocal)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    listenLocal: ").append(toIndentedString(listenLocal)).append("\n");
    sb.append("    logFormat: ").append(toIndentedString(logFormat)).append("\n");
    sb.append("    logLevel: ").append(toIndentedString(logLevel)).append("\n");
    sb.append("    minTime: ").append(toIndentedString(minTime)).append("\n");
    sb.append("    objectStorageConfig: ").append(toIndentedString(objectStorageConfig)).append("\n");
    sb.append("    objectStorageConfigFile: ").append(toIndentedString(objectStorageConfigFile)).append("\n");
    sb.append("    readyTimeout: ").append(toIndentedString(readyTimeout)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    sha: ").append(toIndentedString(sha)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    tracingConfig: ").append(toIndentedString(tracingConfig)).append("\n");
    sb.append("    tracingConfigFile: ").append(toIndentedString(tracingConfigFile)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    volumeMounts: ").append(toIndentedString(volumeMounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalArgs");
    openapiFields.add("baseImage");
    openapiFields.add("blockSize");
    openapiFields.add("getConfigInterval");
    openapiFields.add("getConfigTimeout");
    openapiFields.add("grpcListenLocal");
    openapiFields.add("grpcServerTlsConfig");
    openapiFields.add("httpListenLocal");
    openapiFields.add("image");
    openapiFields.add("listenLocal");
    openapiFields.add("logFormat");
    openapiFields.add("logLevel");
    openapiFields.add("minTime");
    openapiFields.add("objectStorageConfig");
    openapiFields.add("objectStorageConfigFile");
    openapiFields.add("readyTimeout");
    openapiFields.add("resources");
    openapiFields.add("sha");
    openapiFields.add("tag");
    openapiFields.add("tracingConfig");
    openapiFields.add("tracingConfigFile");
    openapiFields.add("version");
    openapiFields.add("volumeMounts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1PrometheusSpecThanos
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1PrometheusSpecThanos.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1PrometheusSpecThanos is not found in the empty JSON string", V1PrometheusSpecThanos.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1PrometheusSpecThanos.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1PrometheusSpecThanos` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("additionalArgs") != null && !jsonObj.get("additionalArgs").isJsonNull()) {
        JsonArray jsonArrayadditionalArgs = jsonObj.getAsJsonArray("additionalArgs");
        if (jsonArrayadditionalArgs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalArgs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalArgs` to be an array in the JSON string but got `%s`", jsonObj.get("additionalArgs").toString()));
          }

          // validate the optional field `additionalArgs` (array)
          for (int i = 0; i < jsonArrayadditionalArgs.size(); i++) {
            V1PrometheusSpecAdditionalArgsInner.validateJsonObject(jsonArrayadditionalArgs.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("baseImage") != null && !jsonObj.get("baseImage").isJsonNull()) && !jsonObj.get("baseImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseImage").toString()));
      }
      if ((jsonObj.get("blockSize") != null && !jsonObj.get("blockSize").isJsonNull()) && !jsonObj.get("blockSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockSize").toString()));
      }
      if ((jsonObj.get("getConfigInterval") != null && !jsonObj.get("getConfigInterval").isJsonNull()) && !jsonObj.get("getConfigInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `getConfigInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("getConfigInterval").toString()));
      }
      if ((jsonObj.get("getConfigTimeout") != null && !jsonObj.get("getConfigTimeout").isJsonNull()) && !jsonObj.get("getConfigTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `getConfigTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("getConfigTimeout").toString()));
      }
      // validate the optional field `grpcServerTlsConfig`
      if (jsonObj.get("grpcServerTlsConfig") != null && !jsonObj.get("grpcServerTlsConfig").isJsonNull()) {
        V1PrometheusSpecThanosGrpcServerTlsConfig.validateJsonObject(jsonObj.getAsJsonObject("grpcServerTlsConfig"));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("logFormat") != null && !jsonObj.get("logFormat").isJsonNull()) && !jsonObj.get("logFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logFormat").toString()));
      }
      if ((jsonObj.get("logLevel") != null && !jsonObj.get("logLevel").isJsonNull()) && !jsonObj.get("logLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logLevel").toString()));
      }
      if ((jsonObj.get("minTime") != null && !jsonObj.get("minTime").isJsonNull()) && !jsonObj.get("minTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minTime").toString()));
      }
      // validate the optional field `objectStorageConfig`
      if (jsonObj.get("objectStorageConfig") != null && !jsonObj.get("objectStorageConfig").isJsonNull()) {
        V1PrometheusSpecThanosObjectStorageConfig.validateJsonObject(jsonObj.getAsJsonObject("objectStorageConfig"));
      }
      if ((jsonObj.get("objectStorageConfigFile") != null && !jsonObj.get("objectStorageConfigFile").isJsonNull()) && !jsonObj.get("objectStorageConfigFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectStorageConfigFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectStorageConfigFile").toString()));
      }
      if ((jsonObj.get("readyTimeout") != null && !jsonObj.get("readyTimeout").isJsonNull()) && !jsonObj.get("readyTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readyTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readyTimeout").toString()));
      }
      // validate the optional field `resources`
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        V1PrometheusSpecThanosResources.validateJsonObject(jsonObj.getAsJsonObject("resources"));
      }
      if ((jsonObj.get("sha") != null && !jsonObj.get("sha").isJsonNull()) && !jsonObj.get("sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sha").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      // validate the optional field `tracingConfig`
      if (jsonObj.get("tracingConfig") != null && !jsonObj.get("tracingConfig").isJsonNull()) {
        V1PrometheusSpecThanosTracingConfig.validateJsonObject(jsonObj.getAsJsonObject("tracingConfig"));
      }
      if ((jsonObj.get("tracingConfigFile") != null && !jsonObj.get("tracingConfigFile").isJsonNull()) && !jsonObj.get("tracingConfigFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracingConfigFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracingConfigFile").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (jsonObj.get("volumeMounts") != null && !jsonObj.get("volumeMounts").isJsonNull()) {
        JsonArray jsonArrayvolumeMounts = jsonObj.getAsJsonArray("volumeMounts");
        if (jsonArrayvolumeMounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumeMounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumeMounts` to be an array in the JSON string but got `%s`", jsonObj.get("volumeMounts").toString()));
          }

          // validate the optional field `volumeMounts` (array)
          for (int i = 0; i < jsonArrayvolumeMounts.size(); i++) {
            V1AlertmanagerSpecContainersInnerVolumeMountsInner.validateJsonObject(jsonArrayvolumeMounts.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1PrometheusSpecThanos.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1PrometheusSpecThanos' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1PrometheusSpecThanos> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1PrometheusSpecThanos.class));

       return (TypeAdapter<T>) new TypeAdapter<V1PrometheusSpecThanos>() {
           @Override
           public void write(JsonWriter out, V1PrometheusSpecThanos value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1PrometheusSpecThanos read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1PrometheusSpecThanos given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1PrometheusSpecThanos
  * @throws IOException if the JSON string is invalid with respect to V1PrometheusSpecThanos
  */
  public static V1PrometheusSpecThanos fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1PrometheusSpecThanos.class);
  }

 /**
  * Convert an instance of V1PrometheusSpecThanos to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

