/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.coreos.monitoring.models.V1AlertmanagerStatusConditionsInner;
import com.coreos.monitoring.models.V1PrometheusStatusShardStatusesInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Most recent observed status of the Prometheus cluster. Read-only. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1PrometheusStatus {
  public static final String SERIALIZED_NAME_AVAILABLE_REPLICAS = "availableReplicas";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_REPLICAS)
  private Integer availableReplicas;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<V1AlertmanagerStatusConditionsInner> conditions;

  public static final String SERIALIZED_NAME_PAUSED = "paused";
  @SerializedName(SERIALIZED_NAME_PAUSED)
  private Boolean paused;

  public static final String SERIALIZED_NAME_REPLICAS = "replicas";
  @SerializedName(SERIALIZED_NAME_REPLICAS)
  private Integer replicas;

  public static final String SERIALIZED_NAME_SHARD_STATUSES = "shardStatuses";
  @SerializedName(SERIALIZED_NAME_SHARD_STATUSES)
  private List<V1PrometheusStatusShardStatusesInner> shardStatuses;

  public static final String SERIALIZED_NAME_UNAVAILABLE_REPLICAS = "unavailableReplicas";
  @SerializedName(SERIALIZED_NAME_UNAVAILABLE_REPLICAS)
  private Integer unavailableReplicas;

  public static final String SERIALIZED_NAME_UPDATED_REPLICAS = "updatedReplicas";
  @SerializedName(SERIALIZED_NAME_UPDATED_REPLICAS)
  private Integer updatedReplicas;

  public V1PrometheusStatus() {
  }

  public V1PrometheusStatus availableReplicas(Integer availableReplicas) {
    
    this.availableReplicas = availableReplicas;
    return this;
  }

   /**
   * Total number of available pods (ready for at least minReadySeconds) targeted by this Prometheus deployment.
   * @return availableReplicas
  **/
  @jakarta.annotation.Nonnull
  public Integer getAvailableReplicas() {
    return availableReplicas;
  }


  public void setAvailableReplicas(Integer availableReplicas) {
    this.availableReplicas = availableReplicas;
  }


  public V1PrometheusStatus conditions(List<V1AlertmanagerStatusConditionsInner> conditions) {
    
    this.conditions = conditions;
    return this;
  }

  public V1PrometheusStatus addConditionsItem(V1AlertmanagerStatusConditionsInner conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * The current state of the Prometheus deployment.
   * @return conditions
  **/
  @jakarta.annotation.Nullable
  public List<V1AlertmanagerStatusConditionsInner> getConditions() {
    return conditions;
  }


  public void setConditions(List<V1AlertmanagerStatusConditionsInner> conditions) {
    this.conditions = conditions;
  }


  public V1PrometheusStatus paused(Boolean paused) {
    
    this.paused = paused;
    return this;
  }

   /**
   * Represents whether any actions on the underlying managed objects are being performed. Only delete actions will be performed.
   * @return paused
  **/
  @jakarta.annotation.Nonnull
  public Boolean getPaused() {
    return paused;
  }


  public void setPaused(Boolean paused) {
    this.paused = paused;
  }


  public V1PrometheusStatus replicas(Integer replicas) {
    
    this.replicas = replicas;
    return this;
  }

   /**
   * Total number of non-terminated pods targeted by this Prometheus deployment (their labels match the selector).
   * @return replicas
  **/
  @jakarta.annotation.Nonnull
  public Integer getReplicas() {
    return replicas;
  }


  public void setReplicas(Integer replicas) {
    this.replicas = replicas;
  }


  public V1PrometheusStatus shardStatuses(List<V1PrometheusStatusShardStatusesInner> shardStatuses) {
    
    this.shardStatuses = shardStatuses;
    return this;
  }

  public V1PrometheusStatus addShardStatusesItem(V1PrometheusStatusShardStatusesInner shardStatusesItem) {
    if (this.shardStatuses == null) {
      this.shardStatuses = new ArrayList<>();
    }
    this.shardStatuses.add(shardStatusesItem);
    return this;
  }

   /**
   * The list has one entry per shard. Each entry provides a summary of the shard status.
   * @return shardStatuses
  **/
  @jakarta.annotation.Nullable
  public List<V1PrometheusStatusShardStatusesInner> getShardStatuses() {
    return shardStatuses;
  }


  public void setShardStatuses(List<V1PrometheusStatusShardStatusesInner> shardStatuses) {
    this.shardStatuses = shardStatuses;
  }


  public V1PrometheusStatus unavailableReplicas(Integer unavailableReplicas) {
    
    this.unavailableReplicas = unavailableReplicas;
    return this;
  }

   /**
   * Total number of unavailable pods targeted by this Prometheus deployment.
   * @return unavailableReplicas
  **/
  @jakarta.annotation.Nonnull
  public Integer getUnavailableReplicas() {
    return unavailableReplicas;
  }


  public void setUnavailableReplicas(Integer unavailableReplicas) {
    this.unavailableReplicas = unavailableReplicas;
  }


  public V1PrometheusStatus updatedReplicas(Integer updatedReplicas) {
    
    this.updatedReplicas = updatedReplicas;
    return this;
  }

   /**
   * Total number of non-terminated pods targeted by this Prometheus deployment that have the desired version spec.
   * @return updatedReplicas
  **/
  @jakarta.annotation.Nonnull
  public Integer getUpdatedReplicas() {
    return updatedReplicas;
  }


  public void setUpdatedReplicas(Integer updatedReplicas) {
    this.updatedReplicas = updatedReplicas;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PrometheusStatus v1PrometheusStatus = (V1PrometheusStatus) o;
    return Objects.equals(this.availableReplicas, v1PrometheusStatus.availableReplicas) &&
        Objects.equals(this.conditions, v1PrometheusStatus.conditions) &&
        Objects.equals(this.paused, v1PrometheusStatus.paused) &&
        Objects.equals(this.replicas, v1PrometheusStatus.replicas) &&
        Objects.equals(this.shardStatuses, v1PrometheusStatus.shardStatuses) &&
        Objects.equals(this.unavailableReplicas, v1PrometheusStatus.unavailableReplicas) &&
        Objects.equals(this.updatedReplicas, v1PrometheusStatus.updatedReplicas);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableReplicas, conditions, paused, replicas, shardStatuses, unavailableReplicas, updatedReplicas);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PrometheusStatus {\n");
    sb.append("    availableReplicas: ").append(toIndentedString(availableReplicas)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    paused: ").append(toIndentedString(paused)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("    shardStatuses: ").append(toIndentedString(shardStatuses)).append("\n");
    sb.append("    unavailableReplicas: ").append(toIndentedString(unavailableReplicas)).append("\n");
    sb.append("    updatedReplicas: ").append(toIndentedString(updatedReplicas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableReplicas");
    openapiFields.add("conditions");
    openapiFields.add("paused");
    openapiFields.add("replicas");
    openapiFields.add("shardStatuses");
    openapiFields.add("unavailableReplicas");
    openapiFields.add("updatedReplicas");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("availableReplicas");
    openapiRequiredFields.add("paused");
    openapiRequiredFields.add("replicas");
    openapiRequiredFields.add("unavailableReplicas");
    openapiRequiredFields.add("updatedReplicas");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1PrometheusStatus
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1PrometheusStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1PrometheusStatus is not found in the empty JSON string", V1PrometheusStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1PrometheusStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1PrometheusStatus` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1PrometheusStatus.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            V1AlertmanagerStatusConditionsInner.validateJsonObject(jsonArrayconditions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("shardStatuses") != null && !jsonObj.get("shardStatuses").isJsonNull()) {
        JsonArray jsonArrayshardStatuses = jsonObj.getAsJsonArray("shardStatuses");
        if (jsonArrayshardStatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shardStatuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shardStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("shardStatuses").toString()));
          }

          // validate the optional field `shardStatuses` (array)
          for (int i = 0; i < jsonArrayshardStatuses.size(); i++) {
            V1PrometheusStatusShardStatusesInner.validateJsonObject(jsonArrayshardStatuses.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1PrometheusStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1PrometheusStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1PrometheusStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1PrometheusStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<V1PrometheusStatus>() {
           @Override
           public void write(JsonWriter out, V1PrometheusStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1PrometheusStatus read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1PrometheusStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1PrometheusStatus
  * @throws IOException if the JSON string is invalid with respect to V1PrometheusStatus
  */
  public static V1PrometheusStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1PrometheusStatus.class);
  }

 /**
  * Convert an instance of V1PrometheusStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

