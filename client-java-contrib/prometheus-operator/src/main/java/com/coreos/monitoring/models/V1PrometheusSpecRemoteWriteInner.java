/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.coreos.monitoring.models.V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner;
import com.coreos.monitoring.models.V1PodMonitorSpecPodMetricsEndpointsInnerOauth2;
import com.coreos.monitoring.models.V1PrometheusSpecRemoteReadInnerBasicAuth;
import com.coreos.monitoring.models.V1PrometheusSpecRemoteWriteInnerAuthorization;
import com.coreos.monitoring.models.V1PrometheusSpecRemoteWriteInnerMetadataConfig;
import com.coreos.monitoring.models.V1PrometheusSpecRemoteWriteInnerQueueConfig;
import com.coreos.monitoring.models.V1PrometheusSpecRemoteWriteInnerSigv4;
import com.coreos.monitoring.models.V1PrometheusSpecRemoteWriteInnerTlsConfig;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * RemoteWriteSpec defines the configuration to write samples from Prometheus to a remote endpoint.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1PrometheusSpecRemoteWriteInner {
  public static final String SERIALIZED_NAME_AUTHORIZATION = "authorization";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION)
  private V1PrometheusSpecRemoteWriteInnerAuthorization authorization;

  public static final String SERIALIZED_NAME_BASIC_AUTH = "basicAuth";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH)
  private V1PrometheusSpecRemoteReadInnerBasicAuth basicAuth;

  public static final String SERIALIZED_NAME_BEARER_TOKEN = "bearerToken";
  @SerializedName(SERIALIZED_NAME_BEARER_TOKEN)
  private String bearerToken;

  public static final String SERIALIZED_NAME_BEARER_TOKEN_FILE = "bearerTokenFile";
  @SerializedName(SERIALIZED_NAME_BEARER_TOKEN_FILE)
  private String bearerTokenFile;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Map<String, String> headers = new HashMap<>();

  public static final String SERIALIZED_NAME_METADATA_CONFIG = "metadataConfig";
  @SerializedName(SERIALIZED_NAME_METADATA_CONFIG)
  private V1PrometheusSpecRemoteWriteInnerMetadataConfig metadataConfig;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OAUTH2 = "oauth2";
  @SerializedName(SERIALIZED_NAME_OAUTH2)
  private V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 oauth2;

  public static final String SERIALIZED_NAME_PROXY_URL = "proxyUrl";
  @SerializedName(SERIALIZED_NAME_PROXY_URL)
  private String proxyUrl;

  public static final String SERIALIZED_NAME_QUEUE_CONFIG = "queueConfig";
  @SerializedName(SERIALIZED_NAME_QUEUE_CONFIG)
  private V1PrometheusSpecRemoteWriteInnerQueueConfig queueConfig;

  public static final String SERIALIZED_NAME_REMOTE_TIMEOUT = "remoteTimeout";
  @SerializedName(SERIALIZED_NAME_REMOTE_TIMEOUT)
  private String remoteTimeout;

  public static final String SERIALIZED_NAME_SEND_EXEMPLARS = "sendExemplars";
  @SerializedName(SERIALIZED_NAME_SEND_EXEMPLARS)
  private Boolean sendExemplars;

  public static final String SERIALIZED_NAME_SIGV4 = "sigv4";
  @SerializedName(SERIALIZED_NAME_SIGV4)
  private V1PrometheusSpecRemoteWriteInnerSigv4 sigv4;

  public static final String SERIALIZED_NAME_TLS_CONFIG = "tlsConfig";
  @SerializedName(SERIALIZED_NAME_TLS_CONFIG)
  private V1PrometheusSpecRemoteWriteInnerTlsConfig tlsConfig;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WRITE_RELABEL_CONFIGS = "writeRelabelConfigs";
  @SerializedName(SERIALIZED_NAME_WRITE_RELABEL_CONFIGS)
  private List<V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner> writeRelabelConfigs;

  public V1PrometheusSpecRemoteWriteInner() {
  }

  public V1PrometheusSpecRemoteWriteInner authorization(V1PrometheusSpecRemoteWriteInnerAuthorization authorization) {
    
    this.authorization = authorization;
    return this;
  }

   /**
   * Get authorization
   * @return authorization
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecRemoteWriteInnerAuthorization getAuthorization() {
    return authorization;
  }


  public void setAuthorization(V1PrometheusSpecRemoteWriteInnerAuthorization authorization) {
    this.authorization = authorization;
  }


  public V1PrometheusSpecRemoteWriteInner basicAuth(V1PrometheusSpecRemoteReadInnerBasicAuth basicAuth) {
    
    this.basicAuth = basicAuth;
    return this;
  }

   /**
   * Get basicAuth
   * @return basicAuth
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecRemoteReadInnerBasicAuth getBasicAuth() {
    return basicAuth;
  }


  public void setBasicAuth(V1PrometheusSpecRemoteReadInnerBasicAuth basicAuth) {
    this.basicAuth = basicAuth;
  }


  public V1PrometheusSpecRemoteWriteInner bearerToken(String bearerToken) {
    
    this.bearerToken = bearerToken;
    return this;
  }

   /**
   * Bearer token for remote write.
   * @return bearerToken
  **/
  @jakarta.annotation.Nullable
  public String getBearerToken() {
    return bearerToken;
  }


  public void setBearerToken(String bearerToken) {
    this.bearerToken = bearerToken;
  }


  public V1PrometheusSpecRemoteWriteInner bearerTokenFile(String bearerTokenFile) {
    
    this.bearerTokenFile = bearerTokenFile;
    return this;
  }

   /**
   * File to read bearer token for remote write.
   * @return bearerTokenFile
  **/
  @jakarta.annotation.Nullable
  public String getBearerTokenFile() {
    return bearerTokenFile;
  }


  public void setBearerTokenFile(String bearerTokenFile) {
    this.bearerTokenFile = bearerTokenFile;
  }


  public V1PrometheusSpecRemoteWriteInner headers(Map<String, String> headers) {
    
    this.headers = headers;
    return this;
  }

  public V1PrometheusSpecRemoteWriteInner putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

   /**
   * Custom HTTP headers to be sent along with each remote write request. Be aware that headers that are set by Prometheus itself can&#39;t be overwritten. Only valid in Prometheus versions 2.25.0 and newer.
   * @return headers
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getHeaders() {
    return headers;
  }


  public void setHeaders(Map<String, String> headers) {
    this.headers = headers;
  }


  public V1PrometheusSpecRemoteWriteInner metadataConfig(V1PrometheusSpecRemoteWriteInnerMetadataConfig metadataConfig) {
    
    this.metadataConfig = metadataConfig;
    return this;
  }

   /**
   * Get metadataConfig
   * @return metadataConfig
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecRemoteWriteInnerMetadataConfig getMetadataConfig() {
    return metadataConfig;
  }


  public void setMetadataConfig(V1PrometheusSpecRemoteWriteInnerMetadataConfig metadataConfig) {
    this.metadataConfig = metadataConfig;
  }


  public V1PrometheusSpecRemoteWriteInner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the remote write queue, it must be unique if specified. The name is used in metrics and logging in order to differentiate queues. Only valid in Prometheus versions 2.15.0 and newer.
   * @return name
  **/
  @jakarta.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V1PrometheusSpecRemoteWriteInner oauth2(V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 oauth2) {
    
    this.oauth2 = oauth2;
    return this;
  }

   /**
   * Get oauth2
   * @return oauth2
  **/
  @jakarta.annotation.Nullable
  public V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 getOauth2() {
    return oauth2;
  }


  public void setOauth2(V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 oauth2) {
    this.oauth2 = oauth2;
  }


  public V1PrometheusSpecRemoteWriteInner proxyUrl(String proxyUrl) {
    
    this.proxyUrl = proxyUrl;
    return this;
  }

   /**
   * Optional ProxyURL.
   * @return proxyUrl
  **/
  @jakarta.annotation.Nullable
  public String getProxyUrl() {
    return proxyUrl;
  }


  public void setProxyUrl(String proxyUrl) {
    this.proxyUrl = proxyUrl;
  }


  public V1PrometheusSpecRemoteWriteInner queueConfig(V1PrometheusSpecRemoteWriteInnerQueueConfig queueConfig) {
    
    this.queueConfig = queueConfig;
    return this;
  }

   /**
   * Get queueConfig
   * @return queueConfig
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecRemoteWriteInnerQueueConfig getQueueConfig() {
    return queueConfig;
  }


  public void setQueueConfig(V1PrometheusSpecRemoteWriteInnerQueueConfig queueConfig) {
    this.queueConfig = queueConfig;
  }


  public V1PrometheusSpecRemoteWriteInner remoteTimeout(String remoteTimeout) {
    
    this.remoteTimeout = remoteTimeout;
    return this;
  }

   /**
   * Timeout for requests to the remote write endpoint.
   * @return remoteTimeout
  **/
  @jakarta.annotation.Nullable
  public String getRemoteTimeout() {
    return remoteTimeout;
  }


  public void setRemoteTimeout(String remoteTimeout) {
    this.remoteTimeout = remoteTimeout;
  }


  public V1PrometheusSpecRemoteWriteInner sendExemplars(Boolean sendExemplars) {
    
    this.sendExemplars = sendExemplars;
    return this;
  }

   /**
   * Enables sending of exemplars over remote write. Note that exemplar-storage itself must be enabled using the enableFeature option for exemplars to be scraped in the first place.  Only valid in Prometheus versions 2.27.0 and newer.
   * @return sendExemplars
  **/
  @jakarta.annotation.Nullable
  public Boolean getSendExemplars() {
    return sendExemplars;
  }


  public void setSendExemplars(Boolean sendExemplars) {
    this.sendExemplars = sendExemplars;
  }


  public V1PrometheusSpecRemoteWriteInner sigv4(V1PrometheusSpecRemoteWriteInnerSigv4 sigv4) {
    
    this.sigv4 = sigv4;
    return this;
  }

   /**
   * Get sigv4
   * @return sigv4
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecRemoteWriteInnerSigv4 getSigv4() {
    return sigv4;
  }


  public void setSigv4(V1PrometheusSpecRemoteWriteInnerSigv4 sigv4) {
    this.sigv4 = sigv4;
  }


  public V1PrometheusSpecRemoteWriteInner tlsConfig(V1PrometheusSpecRemoteWriteInnerTlsConfig tlsConfig) {
    
    this.tlsConfig = tlsConfig;
    return this;
  }

   /**
   * Get tlsConfig
   * @return tlsConfig
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecRemoteWriteInnerTlsConfig getTlsConfig() {
    return tlsConfig;
  }


  public void setTlsConfig(V1PrometheusSpecRemoteWriteInnerTlsConfig tlsConfig) {
    this.tlsConfig = tlsConfig;
  }


  public V1PrometheusSpecRemoteWriteInner url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * The URL of the endpoint to send samples to.
   * @return url
  **/
  @jakarta.annotation.Nonnull
  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public V1PrometheusSpecRemoteWriteInner writeRelabelConfigs(List<V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner> writeRelabelConfigs) {
    
    this.writeRelabelConfigs = writeRelabelConfigs;
    return this;
  }

  public V1PrometheusSpecRemoteWriteInner addWriteRelabelConfigsItem(V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner writeRelabelConfigsItem) {
    if (this.writeRelabelConfigs == null) {
      this.writeRelabelConfigs = new ArrayList<>();
    }
    this.writeRelabelConfigs.add(writeRelabelConfigsItem);
    return this;
  }

   /**
   * The list of remote write relabel configurations.
   * @return writeRelabelConfigs
  **/
  @jakarta.annotation.Nullable
  public List<V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner> getWriteRelabelConfigs() {
    return writeRelabelConfigs;
  }


  public void setWriteRelabelConfigs(List<V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner> writeRelabelConfigs) {
    this.writeRelabelConfigs = writeRelabelConfigs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PrometheusSpecRemoteWriteInner v1PrometheusSpecRemoteWriteInner = (V1PrometheusSpecRemoteWriteInner) o;
    return Objects.equals(this.authorization, v1PrometheusSpecRemoteWriteInner.authorization) &&
        Objects.equals(this.basicAuth, v1PrometheusSpecRemoteWriteInner.basicAuth) &&
        Objects.equals(this.bearerToken, v1PrometheusSpecRemoteWriteInner.bearerToken) &&
        Objects.equals(this.bearerTokenFile, v1PrometheusSpecRemoteWriteInner.bearerTokenFile) &&
        Objects.equals(this.headers, v1PrometheusSpecRemoteWriteInner.headers) &&
        Objects.equals(this.metadataConfig, v1PrometheusSpecRemoteWriteInner.metadataConfig) &&
        Objects.equals(this.name, v1PrometheusSpecRemoteWriteInner.name) &&
        Objects.equals(this.oauth2, v1PrometheusSpecRemoteWriteInner.oauth2) &&
        Objects.equals(this.proxyUrl, v1PrometheusSpecRemoteWriteInner.proxyUrl) &&
        Objects.equals(this.queueConfig, v1PrometheusSpecRemoteWriteInner.queueConfig) &&
        Objects.equals(this.remoteTimeout, v1PrometheusSpecRemoteWriteInner.remoteTimeout) &&
        Objects.equals(this.sendExemplars, v1PrometheusSpecRemoteWriteInner.sendExemplars) &&
        Objects.equals(this.sigv4, v1PrometheusSpecRemoteWriteInner.sigv4) &&
        Objects.equals(this.tlsConfig, v1PrometheusSpecRemoteWriteInner.tlsConfig) &&
        Objects.equals(this.url, v1PrometheusSpecRemoteWriteInner.url) &&
        Objects.equals(this.writeRelabelConfigs, v1PrometheusSpecRemoteWriteInner.writeRelabelConfigs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorization, basicAuth, bearerToken, bearerTokenFile, headers, metadataConfig, name, oauth2, proxyUrl, queueConfig, remoteTimeout, sendExemplars, sigv4, tlsConfig, url, writeRelabelConfigs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PrometheusSpecRemoteWriteInner {\n");
    sb.append("    authorization: ").append(toIndentedString(authorization)).append("\n");
    sb.append("    basicAuth: ").append(toIndentedString(basicAuth)).append("\n");
    sb.append("    bearerToken: ").append(toIndentedString(bearerToken)).append("\n");
    sb.append("    bearerTokenFile: ").append(toIndentedString(bearerTokenFile)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    metadataConfig: ").append(toIndentedString(metadataConfig)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oauth2: ").append(toIndentedString(oauth2)).append("\n");
    sb.append("    proxyUrl: ").append(toIndentedString(proxyUrl)).append("\n");
    sb.append("    queueConfig: ").append(toIndentedString(queueConfig)).append("\n");
    sb.append("    remoteTimeout: ").append(toIndentedString(remoteTimeout)).append("\n");
    sb.append("    sendExemplars: ").append(toIndentedString(sendExemplars)).append("\n");
    sb.append("    sigv4: ").append(toIndentedString(sigv4)).append("\n");
    sb.append("    tlsConfig: ").append(toIndentedString(tlsConfig)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    writeRelabelConfigs: ").append(toIndentedString(writeRelabelConfigs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorization");
    openapiFields.add("basicAuth");
    openapiFields.add("bearerToken");
    openapiFields.add("bearerTokenFile");
    openapiFields.add("headers");
    openapiFields.add("metadataConfig");
    openapiFields.add("name");
    openapiFields.add("oauth2");
    openapiFields.add("proxyUrl");
    openapiFields.add("queueConfig");
    openapiFields.add("remoteTimeout");
    openapiFields.add("sendExemplars");
    openapiFields.add("sigv4");
    openapiFields.add("tlsConfig");
    openapiFields.add("url");
    openapiFields.add("writeRelabelConfigs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1PrometheusSpecRemoteWriteInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1PrometheusSpecRemoteWriteInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1PrometheusSpecRemoteWriteInner is not found in the empty JSON string", V1PrometheusSpecRemoteWriteInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1PrometheusSpecRemoteWriteInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1PrometheusSpecRemoteWriteInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1PrometheusSpecRemoteWriteInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `authorization`
      if (jsonObj.get("authorization") != null && !jsonObj.get("authorization").isJsonNull()) {
        V1PrometheusSpecRemoteWriteInnerAuthorization.validateJsonObject(jsonObj.getAsJsonObject("authorization"));
      }
      // validate the optional field `basicAuth`
      if (jsonObj.get("basicAuth") != null && !jsonObj.get("basicAuth").isJsonNull()) {
        V1PrometheusSpecRemoteReadInnerBasicAuth.validateJsonObject(jsonObj.getAsJsonObject("basicAuth"));
      }
      if ((jsonObj.get("bearerToken") != null && !jsonObj.get("bearerToken").isJsonNull()) && !jsonObj.get("bearerToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bearerToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bearerToken").toString()));
      }
      if ((jsonObj.get("bearerTokenFile") != null && !jsonObj.get("bearerTokenFile").isJsonNull()) && !jsonObj.get("bearerTokenFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bearerTokenFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bearerTokenFile").toString()));
      }
      // validate the optional field `metadataConfig`
      if (jsonObj.get("metadataConfig") != null && !jsonObj.get("metadataConfig").isJsonNull()) {
        V1PrometheusSpecRemoteWriteInnerMetadataConfig.validateJsonObject(jsonObj.getAsJsonObject("metadataConfig"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `oauth2`
      if (jsonObj.get("oauth2") != null && !jsonObj.get("oauth2").isJsonNull()) {
        V1PodMonitorSpecPodMetricsEndpointsInnerOauth2.validateJsonObject(jsonObj.getAsJsonObject("oauth2"));
      }
      if ((jsonObj.get("proxyUrl") != null && !jsonObj.get("proxyUrl").isJsonNull()) && !jsonObj.get("proxyUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxyUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxyUrl").toString()));
      }
      // validate the optional field `queueConfig`
      if (jsonObj.get("queueConfig") != null && !jsonObj.get("queueConfig").isJsonNull()) {
        V1PrometheusSpecRemoteWriteInnerQueueConfig.validateJsonObject(jsonObj.getAsJsonObject("queueConfig"));
      }
      if ((jsonObj.get("remoteTimeout") != null && !jsonObj.get("remoteTimeout").isJsonNull()) && !jsonObj.get("remoteTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteTimeout").toString()));
      }
      // validate the optional field `sigv4`
      if (jsonObj.get("sigv4") != null && !jsonObj.get("sigv4").isJsonNull()) {
        V1PrometheusSpecRemoteWriteInnerSigv4.validateJsonObject(jsonObj.getAsJsonObject("sigv4"));
      }
      // validate the optional field `tlsConfig`
      if (jsonObj.get("tlsConfig") != null && !jsonObj.get("tlsConfig").isJsonNull()) {
        V1PrometheusSpecRemoteWriteInnerTlsConfig.validateJsonObject(jsonObj.getAsJsonObject("tlsConfig"));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (jsonObj.get("writeRelabelConfigs") != null && !jsonObj.get("writeRelabelConfigs").isJsonNull()) {
        JsonArray jsonArraywriteRelabelConfigs = jsonObj.getAsJsonArray("writeRelabelConfigs");
        if (jsonArraywriteRelabelConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("writeRelabelConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `writeRelabelConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("writeRelabelConfigs").toString()));
          }

          // validate the optional field `writeRelabelConfigs` (array)
          for (int i = 0; i < jsonArraywriteRelabelConfigs.size(); i++) {
            V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner.validateJsonObject(jsonArraywriteRelabelConfigs.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1PrometheusSpecRemoteWriteInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1PrometheusSpecRemoteWriteInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1PrometheusSpecRemoteWriteInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1PrometheusSpecRemoteWriteInner.class));

       return (TypeAdapter<T>) new TypeAdapter<V1PrometheusSpecRemoteWriteInner>() {
           @Override
           public void write(JsonWriter out, V1PrometheusSpecRemoteWriteInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1PrometheusSpecRemoteWriteInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1PrometheusSpecRemoteWriteInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1PrometheusSpecRemoteWriteInner
  * @throws IOException if the JSON string is invalid with respect to V1PrometheusSpecRemoteWriteInner
  */
  public static V1PrometheusSpecRemoteWriteInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1PrometheusSpecRemoteWriteInner.class);
  }

 /**
  * Convert an instance of V1PrometheusSpecRemoteWriteInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

