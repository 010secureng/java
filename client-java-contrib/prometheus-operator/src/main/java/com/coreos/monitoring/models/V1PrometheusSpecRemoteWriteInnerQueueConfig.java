/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * QueueConfig allows tuning of the remote write queue parameters.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1PrometheusSpecRemoteWriteInnerQueueConfig {
  public static final String SERIALIZED_NAME_BATCH_SEND_DEADLINE = "batchSendDeadline";
  @SerializedName(SERIALIZED_NAME_BATCH_SEND_DEADLINE)
  private String batchSendDeadline;

  public static final String SERIALIZED_NAME_CAPACITY = "capacity";
  @SerializedName(SERIALIZED_NAME_CAPACITY)
  private Integer capacity;

  public static final String SERIALIZED_NAME_MAX_BACKOFF = "maxBackoff";
  @SerializedName(SERIALIZED_NAME_MAX_BACKOFF)
  private String maxBackoff;

  public static final String SERIALIZED_NAME_MAX_RETRIES = "maxRetries";
  @SerializedName(SERIALIZED_NAME_MAX_RETRIES)
  private Integer maxRetries;

  public static final String SERIALIZED_NAME_MAX_SAMPLES_PER_SEND = "maxSamplesPerSend";
  @SerializedName(SERIALIZED_NAME_MAX_SAMPLES_PER_SEND)
  private Integer maxSamplesPerSend;

  public static final String SERIALIZED_NAME_MAX_SHARDS = "maxShards";
  @SerializedName(SERIALIZED_NAME_MAX_SHARDS)
  private Integer maxShards;

  public static final String SERIALIZED_NAME_MIN_BACKOFF = "minBackoff";
  @SerializedName(SERIALIZED_NAME_MIN_BACKOFF)
  private String minBackoff;

  public static final String SERIALIZED_NAME_MIN_SHARDS = "minShards";
  @SerializedName(SERIALIZED_NAME_MIN_SHARDS)
  private Integer minShards;

  public static final String SERIALIZED_NAME_RETRY_ON_RATE_LIMIT = "retryOnRateLimit";
  @SerializedName(SERIALIZED_NAME_RETRY_ON_RATE_LIMIT)
  private Boolean retryOnRateLimit;

  public V1PrometheusSpecRemoteWriteInnerQueueConfig() {
  }

  public V1PrometheusSpecRemoteWriteInnerQueueConfig batchSendDeadline(String batchSendDeadline) {
    
    this.batchSendDeadline = batchSendDeadline;
    return this;
  }

   /**
   * BatchSendDeadline is the maximum time a sample will wait in buffer.
   * @return batchSendDeadline
  **/
  @jakarta.annotation.Nullable
  public String getBatchSendDeadline() {
    return batchSendDeadline;
  }


  public void setBatchSendDeadline(String batchSendDeadline) {
    this.batchSendDeadline = batchSendDeadline;
  }


  public V1PrometheusSpecRemoteWriteInnerQueueConfig capacity(Integer capacity) {
    
    this.capacity = capacity;
    return this;
  }

   /**
   * Capacity is the number of samples to buffer per shard before we start dropping them.
   * @return capacity
  **/
  @jakarta.annotation.Nullable
  public Integer getCapacity() {
    return capacity;
  }


  public void setCapacity(Integer capacity) {
    this.capacity = capacity;
  }


  public V1PrometheusSpecRemoteWriteInnerQueueConfig maxBackoff(String maxBackoff) {
    
    this.maxBackoff = maxBackoff;
    return this;
  }

   /**
   * MaxBackoff is the maximum retry delay.
   * @return maxBackoff
  **/
  @jakarta.annotation.Nullable
  public String getMaxBackoff() {
    return maxBackoff;
  }


  public void setMaxBackoff(String maxBackoff) {
    this.maxBackoff = maxBackoff;
  }


  public V1PrometheusSpecRemoteWriteInnerQueueConfig maxRetries(Integer maxRetries) {
    
    this.maxRetries = maxRetries;
    return this;
  }

   /**
   * MaxRetries is the maximum number of times to retry a batch on recoverable errors.
   * @return maxRetries
  **/
  @jakarta.annotation.Nullable
  public Integer getMaxRetries() {
    return maxRetries;
  }


  public void setMaxRetries(Integer maxRetries) {
    this.maxRetries = maxRetries;
  }


  public V1PrometheusSpecRemoteWriteInnerQueueConfig maxSamplesPerSend(Integer maxSamplesPerSend) {
    
    this.maxSamplesPerSend = maxSamplesPerSend;
    return this;
  }

   /**
   * MaxSamplesPerSend is the maximum number of samples per send.
   * @return maxSamplesPerSend
  **/
  @jakarta.annotation.Nullable
  public Integer getMaxSamplesPerSend() {
    return maxSamplesPerSend;
  }


  public void setMaxSamplesPerSend(Integer maxSamplesPerSend) {
    this.maxSamplesPerSend = maxSamplesPerSend;
  }


  public V1PrometheusSpecRemoteWriteInnerQueueConfig maxShards(Integer maxShards) {
    
    this.maxShards = maxShards;
    return this;
  }

   /**
   * MaxShards is the maximum number of shards, i.e. amount of concurrency.
   * @return maxShards
  **/
  @jakarta.annotation.Nullable
  public Integer getMaxShards() {
    return maxShards;
  }


  public void setMaxShards(Integer maxShards) {
    this.maxShards = maxShards;
  }


  public V1PrometheusSpecRemoteWriteInnerQueueConfig minBackoff(String minBackoff) {
    
    this.minBackoff = minBackoff;
    return this;
  }

   /**
   * MinBackoff is the initial retry delay. Gets doubled for every retry.
   * @return minBackoff
  **/
  @jakarta.annotation.Nullable
  public String getMinBackoff() {
    return minBackoff;
  }


  public void setMinBackoff(String minBackoff) {
    this.minBackoff = minBackoff;
  }


  public V1PrometheusSpecRemoteWriteInnerQueueConfig minShards(Integer minShards) {
    
    this.minShards = minShards;
    return this;
  }

   /**
   * MinShards is the minimum number of shards, i.e. amount of concurrency.
   * @return minShards
  **/
  @jakarta.annotation.Nullable
  public Integer getMinShards() {
    return minShards;
  }


  public void setMinShards(Integer minShards) {
    this.minShards = minShards;
  }


  public V1PrometheusSpecRemoteWriteInnerQueueConfig retryOnRateLimit(Boolean retryOnRateLimit) {
    
    this.retryOnRateLimit = retryOnRateLimit;
    return this;
  }

   /**
   * Retry upon receiving a 429 status code from the remote-write storage. This is experimental feature and might change in the future.
   * @return retryOnRateLimit
  **/
  @jakarta.annotation.Nullable
  public Boolean getRetryOnRateLimit() {
    return retryOnRateLimit;
  }


  public void setRetryOnRateLimit(Boolean retryOnRateLimit) {
    this.retryOnRateLimit = retryOnRateLimit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PrometheusSpecRemoteWriteInnerQueueConfig v1PrometheusSpecRemoteWriteInnerQueueConfig = (V1PrometheusSpecRemoteWriteInnerQueueConfig) o;
    return Objects.equals(this.batchSendDeadline, v1PrometheusSpecRemoteWriteInnerQueueConfig.batchSendDeadline) &&
        Objects.equals(this.capacity, v1PrometheusSpecRemoteWriteInnerQueueConfig.capacity) &&
        Objects.equals(this.maxBackoff, v1PrometheusSpecRemoteWriteInnerQueueConfig.maxBackoff) &&
        Objects.equals(this.maxRetries, v1PrometheusSpecRemoteWriteInnerQueueConfig.maxRetries) &&
        Objects.equals(this.maxSamplesPerSend, v1PrometheusSpecRemoteWriteInnerQueueConfig.maxSamplesPerSend) &&
        Objects.equals(this.maxShards, v1PrometheusSpecRemoteWriteInnerQueueConfig.maxShards) &&
        Objects.equals(this.minBackoff, v1PrometheusSpecRemoteWriteInnerQueueConfig.minBackoff) &&
        Objects.equals(this.minShards, v1PrometheusSpecRemoteWriteInnerQueueConfig.minShards) &&
        Objects.equals(this.retryOnRateLimit, v1PrometheusSpecRemoteWriteInnerQueueConfig.retryOnRateLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchSendDeadline, capacity, maxBackoff, maxRetries, maxSamplesPerSend, maxShards, minBackoff, minShards, retryOnRateLimit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PrometheusSpecRemoteWriteInnerQueueConfig {\n");
    sb.append("    batchSendDeadline: ").append(toIndentedString(batchSendDeadline)).append("\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    maxBackoff: ").append(toIndentedString(maxBackoff)).append("\n");
    sb.append("    maxRetries: ").append(toIndentedString(maxRetries)).append("\n");
    sb.append("    maxSamplesPerSend: ").append(toIndentedString(maxSamplesPerSend)).append("\n");
    sb.append("    maxShards: ").append(toIndentedString(maxShards)).append("\n");
    sb.append("    minBackoff: ").append(toIndentedString(minBackoff)).append("\n");
    sb.append("    minShards: ").append(toIndentedString(minShards)).append("\n");
    sb.append("    retryOnRateLimit: ").append(toIndentedString(retryOnRateLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("batchSendDeadline");
    openapiFields.add("capacity");
    openapiFields.add("maxBackoff");
    openapiFields.add("maxRetries");
    openapiFields.add("maxSamplesPerSend");
    openapiFields.add("maxShards");
    openapiFields.add("minBackoff");
    openapiFields.add("minShards");
    openapiFields.add("retryOnRateLimit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1PrometheusSpecRemoteWriteInnerQueueConfig
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1PrometheusSpecRemoteWriteInnerQueueConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1PrometheusSpecRemoteWriteInnerQueueConfig is not found in the empty JSON string", V1PrometheusSpecRemoteWriteInnerQueueConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1PrometheusSpecRemoteWriteInnerQueueConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1PrometheusSpecRemoteWriteInnerQueueConfig` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("batchSendDeadline") != null && !jsonObj.get("batchSendDeadline").isJsonNull()) && !jsonObj.get("batchSendDeadline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchSendDeadline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchSendDeadline").toString()));
      }
      if ((jsonObj.get("maxBackoff") != null && !jsonObj.get("maxBackoff").isJsonNull()) && !jsonObj.get("maxBackoff").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxBackoff` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxBackoff").toString()));
      }
      if ((jsonObj.get("minBackoff") != null && !jsonObj.get("minBackoff").isJsonNull()) && !jsonObj.get("minBackoff").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minBackoff` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minBackoff").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1PrometheusSpecRemoteWriteInnerQueueConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1PrometheusSpecRemoteWriteInnerQueueConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1PrometheusSpecRemoteWriteInnerQueueConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1PrometheusSpecRemoteWriteInnerQueueConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<V1PrometheusSpecRemoteWriteInnerQueueConfig>() {
           @Override
           public void write(JsonWriter out, V1PrometheusSpecRemoteWriteInnerQueueConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1PrometheusSpecRemoteWriteInnerQueueConfig read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1PrometheusSpecRemoteWriteInnerQueueConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1PrometheusSpecRemoteWriteInnerQueueConfig
  * @throws IOException if the JSON string is invalid with respect to V1PrometheusSpecRemoteWriteInnerQueueConfig
  */
  public static V1PrometheusSpecRemoteWriteInnerQueueConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1PrometheusSpecRemoteWriteInnerQueueConfig.class);
  }

 /**
  * Convert an instance of V1PrometheusSpecRemoteWriteInnerQueueConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

