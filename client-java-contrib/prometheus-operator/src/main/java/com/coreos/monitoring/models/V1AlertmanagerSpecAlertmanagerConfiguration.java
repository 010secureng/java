/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.coreos.monitoring.models.V1AlertmanagerSpecAlertmanagerConfigurationGlobal;
import com.coreos.monitoring.models.V1AlertmanagerSpecAlertmanagerConfigurationTemplatesInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * EXPERIMENTAL: alertmanagerConfiguration specifies the configuration of Alertmanager. If defined, it takes precedence over the &#x60;configSecret&#x60; field. This field may change in future releases.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1AlertmanagerSpecAlertmanagerConfiguration {
  public static final String SERIALIZED_NAME_GLOBAL = "global";
  @SerializedName(SERIALIZED_NAME_GLOBAL)
  private V1AlertmanagerSpecAlertmanagerConfigurationGlobal global;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TEMPLATES = "templates";
  @SerializedName(SERIALIZED_NAME_TEMPLATES)
  private List<V1AlertmanagerSpecAlertmanagerConfigurationTemplatesInner> templates;

  public V1AlertmanagerSpecAlertmanagerConfiguration() {
  }

  public V1AlertmanagerSpecAlertmanagerConfiguration global(V1AlertmanagerSpecAlertmanagerConfigurationGlobal global) {
    
    this.global = global;
    return this;
  }

   /**
   * Get global
   * @return global
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecAlertmanagerConfigurationGlobal getGlobal() {
    return global;
  }


  public void setGlobal(V1AlertmanagerSpecAlertmanagerConfigurationGlobal global) {
    this.global = global;
  }


  public V1AlertmanagerSpecAlertmanagerConfiguration name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the AlertmanagerConfig resource which is used to generate the Alertmanager configuration. It must be defined in the same namespace as the Alertmanager object. The operator will not enforce a &#x60;namespace&#x60; label for routes and inhibition rules.
   * @return name
  **/
  @jakarta.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V1AlertmanagerSpecAlertmanagerConfiguration templates(List<V1AlertmanagerSpecAlertmanagerConfigurationTemplatesInner> templates) {
    
    this.templates = templates;
    return this;
  }

  public V1AlertmanagerSpecAlertmanagerConfiguration addTemplatesItem(V1AlertmanagerSpecAlertmanagerConfigurationTemplatesInner templatesItem) {
    if (this.templates == null) {
      this.templates = new ArrayList<>();
    }
    this.templates.add(templatesItem);
    return this;
  }

   /**
   * Custom notification templates.
   * @return templates
  **/
  @jakarta.annotation.Nullable
  public List<V1AlertmanagerSpecAlertmanagerConfigurationTemplatesInner> getTemplates() {
    return templates;
  }


  public void setTemplates(List<V1AlertmanagerSpecAlertmanagerConfigurationTemplatesInner> templates) {
    this.templates = templates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1AlertmanagerSpecAlertmanagerConfiguration v1AlertmanagerSpecAlertmanagerConfiguration = (V1AlertmanagerSpecAlertmanagerConfiguration) o;
    return Objects.equals(this.global, v1AlertmanagerSpecAlertmanagerConfiguration.global) &&
        Objects.equals(this.name, v1AlertmanagerSpecAlertmanagerConfiguration.name) &&
        Objects.equals(this.templates, v1AlertmanagerSpecAlertmanagerConfiguration.templates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(global, name, templates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1AlertmanagerSpecAlertmanagerConfiguration {\n");
    sb.append("    global: ").append(toIndentedString(global)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    templates: ").append(toIndentedString(templates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("global");
    openapiFields.add("name");
    openapiFields.add("templates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1AlertmanagerSpecAlertmanagerConfiguration
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1AlertmanagerSpecAlertmanagerConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1AlertmanagerSpecAlertmanagerConfiguration is not found in the empty JSON string", V1AlertmanagerSpecAlertmanagerConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1AlertmanagerSpecAlertmanagerConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1AlertmanagerSpecAlertmanagerConfiguration` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `global`
      if (jsonObj.get("global") != null && !jsonObj.get("global").isJsonNull()) {
        V1AlertmanagerSpecAlertmanagerConfigurationGlobal.validateJsonObject(jsonObj.getAsJsonObject("global"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("templates") != null && !jsonObj.get("templates").isJsonNull()) {
        JsonArray jsonArraytemplates = jsonObj.getAsJsonArray("templates");
        if (jsonArraytemplates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("templates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `templates` to be an array in the JSON string but got `%s`", jsonObj.get("templates").toString()));
          }

          // validate the optional field `templates` (array)
          for (int i = 0; i < jsonArraytemplates.size(); i++) {
            V1AlertmanagerSpecAlertmanagerConfigurationTemplatesInner.validateJsonObject(jsonArraytemplates.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1AlertmanagerSpecAlertmanagerConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1AlertmanagerSpecAlertmanagerConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1AlertmanagerSpecAlertmanagerConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1AlertmanagerSpecAlertmanagerConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<V1AlertmanagerSpecAlertmanagerConfiguration>() {
           @Override
           public void write(JsonWriter out, V1AlertmanagerSpecAlertmanagerConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1AlertmanagerSpecAlertmanagerConfiguration read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1AlertmanagerSpecAlertmanagerConfiguration given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1AlertmanagerSpecAlertmanagerConfiguration
  * @throws IOException if the JSON string is invalid with respect to V1AlertmanagerSpecAlertmanagerConfiguration
  */
  public static V1AlertmanagerSpecAlertmanagerConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1AlertmanagerSpecAlertmanagerConfiguration.class);
  }

 /**
  * Convert an instance of V1AlertmanagerSpecAlertmanagerConfiguration to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

