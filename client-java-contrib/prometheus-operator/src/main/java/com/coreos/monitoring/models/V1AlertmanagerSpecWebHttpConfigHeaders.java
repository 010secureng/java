/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * List of headers that can be added to HTTP responses.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1AlertmanagerSpecWebHttpConfigHeaders {
  public static final String SERIALIZED_NAME_CONTENT_SECURITY_POLICY = "contentSecurityPolicy";
  @SerializedName(SERIALIZED_NAME_CONTENT_SECURITY_POLICY)
  private String contentSecurityPolicy;

  public static final String SERIALIZED_NAME_STRICT_TRANSPORT_SECURITY = "strictTransportSecurity";
  @SerializedName(SERIALIZED_NAME_STRICT_TRANSPORT_SECURITY)
  private String strictTransportSecurity;

  /**
   * Set the X-Content-Type-Options header to HTTP responses. Unset if blank. Accepted value is nosniff. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
   */
  @JsonAdapter(XContentTypeOptionsEnum.Adapter.class)
  public enum XContentTypeOptionsEnum {
    EMPTY(""),
    
    NOSNIFF("NoSniff");

    private String value;

    XContentTypeOptionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static XContentTypeOptionsEnum fromValue(String value) {
      for (XContentTypeOptionsEnum b : XContentTypeOptionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<XContentTypeOptionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final XContentTypeOptionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public XContentTypeOptionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return XContentTypeOptionsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_X_CONTENT_TYPE_OPTIONS = "xContentTypeOptions";
  @SerializedName(SERIALIZED_NAME_X_CONTENT_TYPE_OPTIONS)
  private XContentTypeOptionsEnum xContentTypeOptions;

  /**
   * Set the X-Frame-Options header to HTTP responses. Unset if blank. Accepted values are deny and sameorigin. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
   */
  @JsonAdapter(XFrameOptionsEnum.Adapter.class)
  public enum XFrameOptionsEnum {
    EMPTY(""),
    
    DENY("Deny"),
    
    SAMEORIGIN("SameOrigin");

    private String value;

    XFrameOptionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static XFrameOptionsEnum fromValue(String value) {
      for (XFrameOptionsEnum b : XFrameOptionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<XFrameOptionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final XFrameOptionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public XFrameOptionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return XFrameOptionsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_X_FRAME_OPTIONS = "xFrameOptions";
  @SerializedName(SERIALIZED_NAME_X_FRAME_OPTIONS)
  private XFrameOptionsEnum xFrameOptions;

  public static final String SERIALIZED_NAME_X_X_S_S_PROTECTION = "xXSSProtection";
  @SerializedName(SERIALIZED_NAME_X_X_S_S_PROTECTION)
  private String xXSSProtection;

  public V1AlertmanagerSpecWebHttpConfigHeaders() {
  }

  public V1AlertmanagerSpecWebHttpConfigHeaders contentSecurityPolicy(String contentSecurityPolicy) {
    
    this.contentSecurityPolicy = contentSecurityPolicy;
    return this;
  }

   /**
   * Set the Content-Security-Policy header to HTTP responses. Unset if blank.
   * @return contentSecurityPolicy
  **/
  @jakarta.annotation.Nullable
  public String getContentSecurityPolicy() {
    return contentSecurityPolicy;
  }


  public void setContentSecurityPolicy(String contentSecurityPolicy) {
    this.contentSecurityPolicy = contentSecurityPolicy;
  }


  public V1AlertmanagerSpecWebHttpConfigHeaders strictTransportSecurity(String strictTransportSecurity) {
    
    this.strictTransportSecurity = strictTransportSecurity;
    return this;
  }

   /**
   * Set the Strict-Transport-Security header to HTTP responses. Unset if blank. Please make sure that you use this with care as this header might force browsers to load Prometheus and the other applications hosted on the same domain and subdomains over HTTPS. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
   * @return strictTransportSecurity
  **/
  @jakarta.annotation.Nullable
  public String getStrictTransportSecurity() {
    return strictTransportSecurity;
  }


  public void setStrictTransportSecurity(String strictTransportSecurity) {
    this.strictTransportSecurity = strictTransportSecurity;
  }


  public V1AlertmanagerSpecWebHttpConfigHeaders xContentTypeOptions(XContentTypeOptionsEnum xContentTypeOptions) {
    
    this.xContentTypeOptions = xContentTypeOptions;
    return this;
  }

   /**
   * Set the X-Content-Type-Options header to HTTP responses. Unset if blank. Accepted value is nosniff. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
   * @return xContentTypeOptions
  **/
  @jakarta.annotation.Nullable
  public XContentTypeOptionsEnum getxContentTypeOptions() {
    return xContentTypeOptions;
  }


  public void setxContentTypeOptions(XContentTypeOptionsEnum xContentTypeOptions) {
    this.xContentTypeOptions = xContentTypeOptions;
  }


  public V1AlertmanagerSpecWebHttpConfigHeaders xFrameOptions(XFrameOptionsEnum xFrameOptions) {
    
    this.xFrameOptions = xFrameOptions;
    return this;
  }

   /**
   * Set the X-Frame-Options header to HTTP responses. Unset if blank. Accepted values are deny and sameorigin. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
   * @return xFrameOptions
  **/
  @jakarta.annotation.Nullable
  public XFrameOptionsEnum getxFrameOptions() {
    return xFrameOptions;
  }


  public void setxFrameOptions(XFrameOptionsEnum xFrameOptions) {
    this.xFrameOptions = xFrameOptions;
  }


  public V1AlertmanagerSpecWebHttpConfigHeaders xXSSProtection(String xXSSProtection) {
    
    this.xXSSProtection = xXSSProtection;
    return this;
  }

   /**
   * Set the X-XSS-Protection header to all responses. Unset if blank. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
   * @return xXSSProtection
  **/
  @jakarta.annotation.Nullable
  public String getxXSSProtection() {
    return xXSSProtection;
  }


  public void setxXSSProtection(String xXSSProtection) {
    this.xXSSProtection = xXSSProtection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1AlertmanagerSpecWebHttpConfigHeaders v1AlertmanagerSpecWebHttpConfigHeaders = (V1AlertmanagerSpecWebHttpConfigHeaders) o;
    return Objects.equals(this.contentSecurityPolicy, v1AlertmanagerSpecWebHttpConfigHeaders.contentSecurityPolicy) &&
        Objects.equals(this.strictTransportSecurity, v1AlertmanagerSpecWebHttpConfigHeaders.strictTransportSecurity) &&
        Objects.equals(this.xContentTypeOptions, v1AlertmanagerSpecWebHttpConfigHeaders.xContentTypeOptions) &&
        Objects.equals(this.xFrameOptions, v1AlertmanagerSpecWebHttpConfigHeaders.xFrameOptions) &&
        Objects.equals(this.xXSSProtection, v1AlertmanagerSpecWebHttpConfigHeaders.xXSSProtection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentSecurityPolicy, strictTransportSecurity, xContentTypeOptions, xFrameOptions, xXSSProtection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1AlertmanagerSpecWebHttpConfigHeaders {\n");
    sb.append("    contentSecurityPolicy: ").append(toIndentedString(contentSecurityPolicy)).append("\n");
    sb.append("    strictTransportSecurity: ").append(toIndentedString(strictTransportSecurity)).append("\n");
    sb.append("    xContentTypeOptions: ").append(toIndentedString(xContentTypeOptions)).append("\n");
    sb.append("    xFrameOptions: ").append(toIndentedString(xFrameOptions)).append("\n");
    sb.append("    xXSSProtection: ").append(toIndentedString(xXSSProtection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentSecurityPolicy");
    openapiFields.add("strictTransportSecurity");
    openapiFields.add("xContentTypeOptions");
    openapiFields.add("xFrameOptions");
    openapiFields.add("xXSSProtection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1AlertmanagerSpecWebHttpConfigHeaders
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1AlertmanagerSpecWebHttpConfigHeaders.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1AlertmanagerSpecWebHttpConfigHeaders is not found in the empty JSON string", V1AlertmanagerSpecWebHttpConfigHeaders.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1AlertmanagerSpecWebHttpConfigHeaders.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1AlertmanagerSpecWebHttpConfigHeaders` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("contentSecurityPolicy") != null && !jsonObj.get("contentSecurityPolicy").isJsonNull()) && !jsonObj.get("contentSecurityPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentSecurityPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentSecurityPolicy").toString()));
      }
      if ((jsonObj.get("strictTransportSecurity") != null && !jsonObj.get("strictTransportSecurity").isJsonNull()) && !jsonObj.get("strictTransportSecurity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strictTransportSecurity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strictTransportSecurity").toString()));
      }
      if ((jsonObj.get("xContentTypeOptions") != null && !jsonObj.get("xContentTypeOptions").isJsonNull()) && !jsonObj.get("xContentTypeOptions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xContentTypeOptions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xContentTypeOptions").toString()));
      }
      if ((jsonObj.get("xFrameOptions") != null && !jsonObj.get("xFrameOptions").isJsonNull()) && !jsonObj.get("xFrameOptions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xFrameOptions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xFrameOptions").toString()));
      }
      if ((jsonObj.get("xXSSProtection") != null && !jsonObj.get("xXSSProtection").isJsonNull()) && !jsonObj.get("xXSSProtection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xXSSProtection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xXSSProtection").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1AlertmanagerSpecWebHttpConfigHeaders.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1AlertmanagerSpecWebHttpConfigHeaders' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1AlertmanagerSpecWebHttpConfigHeaders> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1AlertmanagerSpecWebHttpConfigHeaders.class));

       return (TypeAdapter<T>) new TypeAdapter<V1AlertmanagerSpecWebHttpConfigHeaders>() {
           @Override
           public void write(JsonWriter out, V1AlertmanagerSpecWebHttpConfigHeaders value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1AlertmanagerSpecWebHttpConfigHeaders read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1AlertmanagerSpecWebHttpConfigHeaders given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1AlertmanagerSpecWebHttpConfigHeaders
  * @throws IOException if the JSON string is invalid with respect to V1AlertmanagerSpecWebHttpConfigHeaders
  */
  public static V1AlertmanagerSpecWebHttpConfigHeaders fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1AlertmanagerSpecWebHttpConfigHeaders.class);
  }

 /**
  * Convert an instance of V1AlertmanagerSpecWebHttpConfigHeaders to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

