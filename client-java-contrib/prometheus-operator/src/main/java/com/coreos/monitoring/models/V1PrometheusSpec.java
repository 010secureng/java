/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.coreos.monitoring.models.V1AlertmanagerSpecAffinity;
import com.coreos.monitoring.models.V1AlertmanagerSpecContainersInner;
import com.coreos.monitoring.models.V1AlertmanagerSpecContainersInnerVolumeMountsInner;
import com.coreos.monitoring.models.V1AlertmanagerSpecHostAliasesInner;
import com.coreos.monitoring.models.V1AlertmanagerSpecImagePullSecretsInner;
import com.coreos.monitoring.models.V1AlertmanagerSpecResources;
import com.coreos.monitoring.models.V1AlertmanagerSpecSecurityContext;
import com.coreos.monitoring.models.V1AlertmanagerSpecTolerationsInner;
import com.coreos.monitoring.models.V1AlertmanagerSpecTopologySpreadConstraintsInner;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInner;
import com.coreos.monitoring.models.V1PrometheusSpecAdditionalAlertManagerConfigs;
import com.coreos.monitoring.models.V1PrometheusSpecAdditionalAlertRelabelConfigs;
import com.coreos.monitoring.models.V1PrometheusSpecAdditionalArgsInner;
import com.coreos.monitoring.models.V1PrometheusSpecAdditionalScrapeConfigs;
import com.coreos.monitoring.models.V1PrometheusSpecAlerting;
import com.coreos.monitoring.models.V1PrometheusSpecApiserverConfig;
import com.coreos.monitoring.models.V1PrometheusSpecArbitraryFSAccessThroughSMs;
import com.coreos.monitoring.models.V1PrometheusSpecExcludedFromEnforcementInner;
import com.coreos.monitoring.models.V1PrometheusSpecExemplars;
import com.coreos.monitoring.models.V1PrometheusSpecPodMetadata;
import com.coreos.monitoring.models.V1PrometheusSpecPodMonitorNamespaceSelector;
import com.coreos.monitoring.models.V1PrometheusSpecPodMonitorSelector;
import com.coreos.monitoring.models.V1PrometheusSpecProbeNamespaceSelector;
import com.coreos.monitoring.models.V1PrometheusSpecProbeSelector;
import com.coreos.monitoring.models.V1PrometheusSpecPrometheusRulesExcludedFromEnforceInner;
import com.coreos.monitoring.models.V1PrometheusSpecQuery;
import com.coreos.monitoring.models.V1PrometheusSpecRemoteReadInner;
import com.coreos.monitoring.models.V1PrometheusSpecRemoteWriteInner;
import com.coreos.monitoring.models.V1PrometheusSpecRuleNamespaceSelector;
import com.coreos.monitoring.models.V1PrometheusSpecRuleSelector;
import com.coreos.monitoring.models.V1PrometheusSpecRules;
import com.coreos.monitoring.models.V1PrometheusSpecScrapeConfigNamespaceSelector;
import com.coreos.monitoring.models.V1PrometheusSpecScrapeConfigSelector;
import com.coreos.monitoring.models.V1PrometheusSpecServiceMonitorNamespaceSelector;
import com.coreos.monitoring.models.V1PrometheusSpecServiceMonitorSelector;
import com.coreos.monitoring.models.V1PrometheusSpecStorage;
import com.coreos.monitoring.models.V1PrometheusSpecThanos;
import com.coreos.monitoring.models.V1PrometheusSpecTsdb;
import com.coreos.monitoring.models.V1PrometheusSpecWeb;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Specification of the desired behavior of the Prometheus cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1PrometheusSpec {
  public static final String SERIALIZED_NAME_ADDITIONAL_ALERT_MANAGER_CONFIGS = "additionalAlertManagerConfigs";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_ALERT_MANAGER_CONFIGS)
  private V1PrometheusSpecAdditionalAlertManagerConfigs additionalAlertManagerConfigs;

  public static final String SERIALIZED_NAME_ADDITIONAL_ALERT_RELABEL_CONFIGS = "additionalAlertRelabelConfigs";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_ALERT_RELABEL_CONFIGS)
  private V1PrometheusSpecAdditionalAlertRelabelConfigs additionalAlertRelabelConfigs;

  public static final String SERIALIZED_NAME_ADDITIONAL_ARGS = "additionalArgs";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_ARGS)
  private List<V1PrometheusSpecAdditionalArgsInner> additionalArgs;

  public static final String SERIALIZED_NAME_ADDITIONAL_SCRAPE_CONFIGS = "additionalScrapeConfigs";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_SCRAPE_CONFIGS)
  private V1PrometheusSpecAdditionalScrapeConfigs additionalScrapeConfigs;

  public static final String SERIALIZED_NAME_AFFINITY = "affinity";
  @SerializedName(SERIALIZED_NAME_AFFINITY)
  private V1AlertmanagerSpecAffinity affinity;

  public static final String SERIALIZED_NAME_ALERTING = "alerting";
  @SerializedName(SERIALIZED_NAME_ALERTING)
  private V1PrometheusSpecAlerting alerting;

  public static final String SERIALIZED_NAME_ALLOW_OVERLAPPING_BLOCKS = "allowOverlappingBlocks";
  @SerializedName(SERIALIZED_NAME_ALLOW_OVERLAPPING_BLOCKS)
  private Boolean allowOverlappingBlocks;

  public static final String SERIALIZED_NAME_APISERVER_CONFIG = "apiserverConfig";
  @SerializedName(SERIALIZED_NAME_APISERVER_CONFIG)
  private V1PrometheusSpecApiserverConfig apiserverConfig;

  public static final String SERIALIZED_NAME_ARBITRARY_F_S_ACCESS_THROUGH_S_MS = "arbitraryFSAccessThroughSMs";
  @SerializedName(SERIALIZED_NAME_ARBITRARY_F_S_ACCESS_THROUGH_S_MS)
  private V1PrometheusSpecArbitraryFSAccessThroughSMs arbitraryFSAccessThroughSMs;

  public static final String SERIALIZED_NAME_BASE_IMAGE = "baseImage";
  @SerializedName(SERIALIZED_NAME_BASE_IMAGE)
  private String baseImage;

  public static final String SERIALIZED_NAME_CONFIG_MAPS = "configMaps";
  @SerializedName(SERIALIZED_NAME_CONFIG_MAPS)
  private List<String> configMaps;

  public static final String SERIALIZED_NAME_CONTAINERS = "containers";
  @SerializedName(SERIALIZED_NAME_CONTAINERS)
  private List<V1AlertmanagerSpecContainersInner> containers;

  public static final String SERIALIZED_NAME_DISABLE_COMPACTION = "disableCompaction";
  @SerializedName(SERIALIZED_NAME_DISABLE_COMPACTION)
  private Boolean disableCompaction;

  public static final String SERIALIZED_NAME_ENABLE_ADMIN_A_P_I = "enableAdminAPI";
  @SerializedName(SERIALIZED_NAME_ENABLE_ADMIN_A_P_I)
  private Boolean enableAdminAPI;

  public static final String SERIALIZED_NAME_ENABLE_FEATURES = "enableFeatures";
  @SerializedName(SERIALIZED_NAME_ENABLE_FEATURES)
  private List<String> enableFeatures;

  public static final String SERIALIZED_NAME_ENABLE_REMOTE_WRITE_RECEIVER = "enableRemoteWriteReceiver";
  @SerializedName(SERIALIZED_NAME_ENABLE_REMOTE_WRITE_RECEIVER)
  private Boolean enableRemoteWriteReceiver;

  public static final String SERIALIZED_NAME_ENFORCED_BODY_SIZE_LIMIT = "enforcedBodySizeLimit";
  @SerializedName(SERIALIZED_NAME_ENFORCED_BODY_SIZE_LIMIT)
  private String enforcedBodySizeLimit;

  public static final String SERIALIZED_NAME_ENFORCED_LABEL_LIMIT = "enforcedLabelLimit";
  @SerializedName(SERIALIZED_NAME_ENFORCED_LABEL_LIMIT)
  private Long enforcedLabelLimit;

  public static final String SERIALIZED_NAME_ENFORCED_LABEL_NAME_LENGTH_LIMIT = "enforcedLabelNameLengthLimit";
  @SerializedName(SERIALIZED_NAME_ENFORCED_LABEL_NAME_LENGTH_LIMIT)
  private Long enforcedLabelNameLengthLimit;

  public static final String SERIALIZED_NAME_ENFORCED_LABEL_VALUE_LENGTH_LIMIT = "enforcedLabelValueLengthLimit";
  @SerializedName(SERIALIZED_NAME_ENFORCED_LABEL_VALUE_LENGTH_LIMIT)
  private Long enforcedLabelValueLengthLimit;

  public static final String SERIALIZED_NAME_ENFORCED_NAMESPACE_LABEL = "enforcedNamespaceLabel";
  @SerializedName(SERIALIZED_NAME_ENFORCED_NAMESPACE_LABEL)
  private String enforcedNamespaceLabel;

  public static final String SERIALIZED_NAME_ENFORCED_SAMPLE_LIMIT = "enforcedSampleLimit";
  @SerializedName(SERIALIZED_NAME_ENFORCED_SAMPLE_LIMIT)
  private Long enforcedSampleLimit;

  public static final String SERIALIZED_NAME_ENFORCED_TARGET_LIMIT = "enforcedTargetLimit";
  @SerializedName(SERIALIZED_NAME_ENFORCED_TARGET_LIMIT)
  private Long enforcedTargetLimit;

  public static final String SERIALIZED_NAME_EVALUATION_INTERVAL = "evaluationInterval";
  @SerializedName(SERIALIZED_NAME_EVALUATION_INTERVAL)
  private String evaluationInterval;

  public static final String SERIALIZED_NAME_EXCLUDED_FROM_ENFORCEMENT = "excludedFromEnforcement";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_FROM_ENFORCEMENT)
  private List<V1PrometheusSpecExcludedFromEnforcementInner> excludedFromEnforcement;

  public static final String SERIALIZED_NAME_EXEMPLARS = "exemplars";
  @SerializedName(SERIALIZED_NAME_EXEMPLARS)
  private V1PrometheusSpecExemplars exemplars;

  public static final String SERIALIZED_NAME_EXTERNAL_LABELS = "externalLabels";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_LABELS)
  private Map<String, String> externalLabels = new HashMap<>();

  public static final String SERIALIZED_NAME_EXTERNAL_URL = "externalUrl";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_URL)
  private String externalUrl;

  public static final String SERIALIZED_NAME_HOST_ALIASES = "hostAliases";
  @SerializedName(SERIALIZED_NAME_HOST_ALIASES)
  private List<V1AlertmanagerSpecHostAliasesInner> hostAliases;

  public static final String SERIALIZED_NAME_HOST_NETWORK = "hostNetwork";
  @SerializedName(SERIALIZED_NAME_HOST_NETWORK)
  private Boolean hostNetwork;

  public static final String SERIALIZED_NAME_IGNORE_NAMESPACE_SELECTORS = "ignoreNamespaceSelectors";
  @SerializedName(SERIALIZED_NAME_IGNORE_NAMESPACE_SELECTORS)
  private Boolean ignoreNamespaceSelectors;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  /**
   * Image pull policy for the &#39;prometheus&#39;, &#39;init-config-reloader&#39; and &#39;config-reloader&#39; containers. See https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy for more details.
   */
  @JsonAdapter(ImagePullPolicyEnum.Adapter.class)
  public enum ImagePullPolicyEnum {
    EMPTY(""),
    
    ALWAYS("Always"),
    
    NEVER("Never"),
    
    IFNOTPRESENT("IfNotPresent");

    private String value;

    ImagePullPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImagePullPolicyEnum fromValue(String value) {
      for (ImagePullPolicyEnum b : ImagePullPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImagePullPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImagePullPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImagePullPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImagePullPolicyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IMAGE_PULL_POLICY = "imagePullPolicy";
  @SerializedName(SERIALIZED_NAME_IMAGE_PULL_POLICY)
  private ImagePullPolicyEnum imagePullPolicy;

  public static final String SERIALIZED_NAME_IMAGE_PULL_SECRETS = "imagePullSecrets";
  @SerializedName(SERIALIZED_NAME_IMAGE_PULL_SECRETS)
  private List<V1AlertmanagerSpecImagePullSecretsInner> imagePullSecrets;

  public static final String SERIALIZED_NAME_INIT_CONTAINERS = "initContainers";
  @SerializedName(SERIALIZED_NAME_INIT_CONTAINERS)
  private List<V1AlertmanagerSpecContainersInner> initContainers;

  public static final String SERIALIZED_NAME_LISTEN_LOCAL = "listenLocal";
  @SerializedName(SERIALIZED_NAME_LISTEN_LOCAL)
  private Boolean listenLocal;

  /**
   * Log format for Prometheus to be configured with.
   */
  @JsonAdapter(LogFormatEnum.Adapter.class)
  public enum LogFormatEnum {
    EMPTY(""),
    
    LOGFMT("logfmt"),
    
    JSON("json");

    private String value;

    LogFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogFormatEnum fromValue(String value) {
      for (LogFormatEnum b : LogFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogFormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LOG_FORMAT = "logFormat";
  @SerializedName(SERIALIZED_NAME_LOG_FORMAT)
  private LogFormatEnum logFormat;

  /**
   * Log level for Prometheus to be configured with.
   */
  @JsonAdapter(LogLevelEnum.Adapter.class)
  public enum LogLevelEnum {
    EMPTY(""),
    
    DEBUG("debug"),
    
    INFO("info"),
    
    WARN("warn"),
    
    ERROR("error");

    private String value;

    LogLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogLevelEnum fromValue(String value) {
      for (LogLevelEnum b : LogLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LOG_LEVEL = "logLevel";
  @SerializedName(SERIALIZED_NAME_LOG_LEVEL)
  private LogLevelEnum logLevel;

  public static final String SERIALIZED_NAME_MIN_READY_SECONDS = "minReadySeconds";
  @SerializedName(SERIALIZED_NAME_MIN_READY_SECONDS)
  private Integer minReadySeconds;

  public static final String SERIALIZED_NAME_NODE_SELECTOR = "nodeSelector";
  @SerializedName(SERIALIZED_NAME_NODE_SELECTOR)
  private Map<String, String> nodeSelector = new HashMap<>();

  public static final String SERIALIZED_NAME_OVERRIDE_HONOR_LABELS = "overrideHonorLabels";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_HONOR_LABELS)
  private Boolean overrideHonorLabels;

  public static final String SERIALIZED_NAME_OVERRIDE_HONOR_TIMESTAMPS = "overrideHonorTimestamps";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_HONOR_TIMESTAMPS)
  private Boolean overrideHonorTimestamps;

  public static final String SERIALIZED_NAME_PAUSED = "paused";
  @SerializedName(SERIALIZED_NAME_PAUSED)
  private Boolean paused;

  public static final String SERIALIZED_NAME_POD_METADATA = "podMetadata";
  @SerializedName(SERIALIZED_NAME_POD_METADATA)
  private V1PrometheusSpecPodMetadata podMetadata;

  public static final String SERIALIZED_NAME_POD_MONITOR_NAMESPACE_SELECTOR = "podMonitorNamespaceSelector";
  @SerializedName(SERIALIZED_NAME_POD_MONITOR_NAMESPACE_SELECTOR)
  private V1PrometheusSpecPodMonitorNamespaceSelector podMonitorNamespaceSelector;

  public static final String SERIALIZED_NAME_POD_MONITOR_SELECTOR = "podMonitorSelector";
  @SerializedName(SERIALIZED_NAME_POD_MONITOR_SELECTOR)
  private V1PrometheusSpecPodMonitorSelector podMonitorSelector;

  public static final String SERIALIZED_NAME_POD_TARGET_LABELS = "podTargetLabels";
  @SerializedName(SERIALIZED_NAME_POD_TARGET_LABELS)
  private List<String> podTargetLabels;

  public static final String SERIALIZED_NAME_PORT_NAME = "portName";
  @SerializedName(SERIALIZED_NAME_PORT_NAME)
  private String portName;

  public static final String SERIALIZED_NAME_PRIORITY_CLASS_NAME = "priorityClassName";
  @SerializedName(SERIALIZED_NAME_PRIORITY_CLASS_NAME)
  private String priorityClassName;

  public static final String SERIALIZED_NAME_PROBE_NAMESPACE_SELECTOR = "probeNamespaceSelector";
  @SerializedName(SERIALIZED_NAME_PROBE_NAMESPACE_SELECTOR)
  private V1PrometheusSpecProbeNamespaceSelector probeNamespaceSelector;

  public static final String SERIALIZED_NAME_PROBE_SELECTOR = "probeSelector";
  @SerializedName(SERIALIZED_NAME_PROBE_SELECTOR)
  private V1PrometheusSpecProbeSelector probeSelector;

  public static final String SERIALIZED_NAME_PROMETHEUS_EXTERNAL_LABEL_NAME = "prometheusExternalLabelName";
  @SerializedName(SERIALIZED_NAME_PROMETHEUS_EXTERNAL_LABEL_NAME)
  private String prometheusExternalLabelName;

  public static final String SERIALIZED_NAME_PROMETHEUS_RULES_EXCLUDED_FROM_ENFORCE = "prometheusRulesExcludedFromEnforce";
  @SerializedName(SERIALIZED_NAME_PROMETHEUS_RULES_EXCLUDED_FROM_ENFORCE)
  private List<V1PrometheusSpecPrometheusRulesExcludedFromEnforceInner> prometheusRulesExcludedFromEnforce;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private V1PrometheusSpecQuery query;

  public static final String SERIALIZED_NAME_QUERY_LOG_FILE = "queryLogFile";
  @SerializedName(SERIALIZED_NAME_QUERY_LOG_FILE)
  private String queryLogFile;

  public static final String SERIALIZED_NAME_REMOTE_READ = "remoteRead";
  @SerializedName(SERIALIZED_NAME_REMOTE_READ)
  private List<V1PrometheusSpecRemoteReadInner> remoteRead;

  public static final String SERIALIZED_NAME_REMOTE_WRITE = "remoteWrite";
  @SerializedName(SERIALIZED_NAME_REMOTE_WRITE)
  private List<V1PrometheusSpecRemoteWriteInner> remoteWrite;

  public static final String SERIALIZED_NAME_REPLICA_EXTERNAL_LABEL_NAME = "replicaExternalLabelName";
  @SerializedName(SERIALIZED_NAME_REPLICA_EXTERNAL_LABEL_NAME)
  private String replicaExternalLabelName;

  public static final String SERIALIZED_NAME_REPLICAS = "replicas";
  @SerializedName(SERIALIZED_NAME_REPLICAS)
  private Integer replicas;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private V1AlertmanagerSpecResources resources;

  public static final String SERIALIZED_NAME_RETENTION = "retention";
  @SerializedName(SERIALIZED_NAME_RETENTION)
  private String retention;

  public static final String SERIALIZED_NAME_RETENTION_SIZE = "retentionSize";
  @SerializedName(SERIALIZED_NAME_RETENTION_SIZE)
  private String retentionSize;

  public static final String SERIALIZED_NAME_ROUTE_PREFIX = "routePrefix";
  @SerializedName(SERIALIZED_NAME_ROUTE_PREFIX)
  private String routePrefix;

  public static final String SERIALIZED_NAME_RULE_NAMESPACE_SELECTOR = "ruleNamespaceSelector";
  @SerializedName(SERIALIZED_NAME_RULE_NAMESPACE_SELECTOR)
  private V1PrometheusSpecRuleNamespaceSelector ruleNamespaceSelector;

  public static final String SERIALIZED_NAME_RULE_SELECTOR = "ruleSelector";
  @SerializedName(SERIALIZED_NAME_RULE_SELECTOR)
  private V1PrometheusSpecRuleSelector ruleSelector;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private V1PrometheusSpecRules rules;

  public static final String SERIALIZED_NAME_SCRAPE_CONFIG_NAMESPACE_SELECTOR = "scrapeConfigNamespaceSelector";
  @SerializedName(SERIALIZED_NAME_SCRAPE_CONFIG_NAMESPACE_SELECTOR)
  private V1PrometheusSpecScrapeConfigNamespaceSelector scrapeConfigNamespaceSelector;

  public static final String SERIALIZED_NAME_SCRAPE_CONFIG_SELECTOR = "scrapeConfigSelector";
  @SerializedName(SERIALIZED_NAME_SCRAPE_CONFIG_SELECTOR)
  private V1PrometheusSpecScrapeConfigSelector scrapeConfigSelector;

  public static final String SERIALIZED_NAME_SCRAPE_INTERVAL = "scrapeInterval";
  @SerializedName(SERIALIZED_NAME_SCRAPE_INTERVAL)
  private String scrapeInterval;

  public static final String SERIALIZED_NAME_SCRAPE_TIMEOUT = "scrapeTimeout";
  @SerializedName(SERIALIZED_NAME_SCRAPE_TIMEOUT)
  private String scrapeTimeout;

  public static final String SERIALIZED_NAME_SECRETS = "secrets";
  @SerializedName(SERIALIZED_NAME_SECRETS)
  private List<String> secrets;

  public static final String SERIALIZED_NAME_SECURITY_CONTEXT = "securityContext";
  @SerializedName(SERIALIZED_NAME_SECURITY_CONTEXT)
  private V1AlertmanagerSpecSecurityContext securityContext;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_NAME = "serviceAccountName";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_NAME)
  private String serviceAccountName;

  public static final String SERIALIZED_NAME_SERVICE_MONITOR_NAMESPACE_SELECTOR = "serviceMonitorNamespaceSelector";
  @SerializedName(SERIALIZED_NAME_SERVICE_MONITOR_NAMESPACE_SELECTOR)
  private V1PrometheusSpecServiceMonitorNamespaceSelector serviceMonitorNamespaceSelector;

  public static final String SERIALIZED_NAME_SERVICE_MONITOR_SELECTOR = "serviceMonitorSelector";
  @SerializedName(SERIALIZED_NAME_SERVICE_MONITOR_SELECTOR)
  private V1PrometheusSpecServiceMonitorSelector serviceMonitorSelector;

  public static final String SERIALIZED_NAME_SHA = "sha";
  @SerializedName(SERIALIZED_NAME_SHA)
  private String sha;

  public static final String SERIALIZED_NAME_SHARDS = "shards";
  @SerializedName(SERIALIZED_NAME_SHARDS)
  private Integer shards;

  public static final String SERIALIZED_NAME_STORAGE = "storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  private V1PrometheusSpecStorage storage;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_THANOS = "thanos";
  @SerializedName(SERIALIZED_NAME_THANOS)
  private V1PrometheusSpecThanos thanos;

  public static final String SERIALIZED_NAME_TOLERATIONS = "tolerations";
  @SerializedName(SERIALIZED_NAME_TOLERATIONS)
  private List<V1AlertmanagerSpecTolerationsInner> tolerations;

  public static final String SERIALIZED_NAME_TOPOLOGY_SPREAD_CONSTRAINTS = "topologySpreadConstraints";
  @SerializedName(SERIALIZED_NAME_TOPOLOGY_SPREAD_CONSTRAINTS)
  private List<V1AlertmanagerSpecTopologySpreadConstraintsInner> topologySpreadConstraints;

  public static final String SERIALIZED_NAME_TSDB = "tsdb";
  @SerializedName(SERIALIZED_NAME_TSDB)
  private V1PrometheusSpecTsdb tsdb;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_VOLUME_MOUNTS = "volumeMounts";
  @SerializedName(SERIALIZED_NAME_VOLUME_MOUNTS)
  private List<V1AlertmanagerSpecContainersInnerVolumeMountsInner> volumeMounts;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<V1AlertmanagerSpecVolumesInner> volumes;

  public static final String SERIALIZED_NAME_WAL_COMPRESSION = "walCompression";
  @SerializedName(SERIALIZED_NAME_WAL_COMPRESSION)
  private Boolean walCompression;

  public static final String SERIALIZED_NAME_WEB = "web";
  @SerializedName(SERIALIZED_NAME_WEB)
  private V1PrometheusSpecWeb web;

  public V1PrometheusSpec() {
  }

  public V1PrometheusSpec additionalAlertManagerConfigs(V1PrometheusSpecAdditionalAlertManagerConfigs additionalAlertManagerConfigs) {
    
    this.additionalAlertManagerConfigs = additionalAlertManagerConfigs;
    return this;
  }

   /**
   * Get additionalAlertManagerConfigs
   * @return additionalAlertManagerConfigs
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecAdditionalAlertManagerConfigs getAdditionalAlertManagerConfigs() {
    return additionalAlertManagerConfigs;
  }


  public void setAdditionalAlertManagerConfigs(V1PrometheusSpecAdditionalAlertManagerConfigs additionalAlertManagerConfigs) {
    this.additionalAlertManagerConfigs = additionalAlertManagerConfigs;
  }


  public V1PrometheusSpec additionalAlertRelabelConfigs(V1PrometheusSpecAdditionalAlertRelabelConfigs additionalAlertRelabelConfigs) {
    
    this.additionalAlertRelabelConfigs = additionalAlertRelabelConfigs;
    return this;
  }

   /**
   * Get additionalAlertRelabelConfigs
   * @return additionalAlertRelabelConfigs
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecAdditionalAlertRelabelConfigs getAdditionalAlertRelabelConfigs() {
    return additionalAlertRelabelConfigs;
  }


  public void setAdditionalAlertRelabelConfigs(V1PrometheusSpecAdditionalAlertRelabelConfigs additionalAlertRelabelConfigs) {
    this.additionalAlertRelabelConfigs = additionalAlertRelabelConfigs;
  }


  public V1PrometheusSpec additionalArgs(List<V1PrometheusSpecAdditionalArgsInner> additionalArgs) {
    
    this.additionalArgs = additionalArgs;
    return this;
  }

  public V1PrometheusSpec addAdditionalArgsItem(V1PrometheusSpecAdditionalArgsInner additionalArgsItem) {
    if (this.additionalArgs == null) {
      this.additionalArgs = new ArrayList<>();
    }
    this.additionalArgs.add(additionalArgsItem);
    return this;
  }

   /**
   * AdditionalArgs allows setting additional arguments for the Prometheus container. It is intended for e.g. activating hidden flags which are not supported by the dedicated configuration options yet. The arguments are passed as-is to the Prometheus container which may cause issues if they are invalid or not supported by the given Prometheus version. In case of an argument conflict (e.g. an argument which is already set by the operator itself) or when providing an invalid argument the reconciliation will fail and an error will be logged.
   * @return additionalArgs
  **/
  @jakarta.annotation.Nullable
  public List<V1PrometheusSpecAdditionalArgsInner> getAdditionalArgs() {
    return additionalArgs;
  }


  public void setAdditionalArgs(List<V1PrometheusSpecAdditionalArgsInner> additionalArgs) {
    this.additionalArgs = additionalArgs;
  }


  public V1PrometheusSpec additionalScrapeConfigs(V1PrometheusSpecAdditionalScrapeConfigs additionalScrapeConfigs) {
    
    this.additionalScrapeConfigs = additionalScrapeConfigs;
    return this;
  }

   /**
   * Get additionalScrapeConfigs
   * @return additionalScrapeConfigs
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecAdditionalScrapeConfigs getAdditionalScrapeConfigs() {
    return additionalScrapeConfigs;
  }


  public void setAdditionalScrapeConfigs(V1PrometheusSpecAdditionalScrapeConfigs additionalScrapeConfigs) {
    this.additionalScrapeConfigs = additionalScrapeConfigs;
  }


  public V1PrometheusSpec affinity(V1AlertmanagerSpecAffinity affinity) {
    
    this.affinity = affinity;
    return this;
  }

   /**
   * Get affinity
   * @return affinity
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecAffinity getAffinity() {
    return affinity;
  }


  public void setAffinity(V1AlertmanagerSpecAffinity affinity) {
    this.affinity = affinity;
  }


  public V1PrometheusSpec alerting(V1PrometheusSpecAlerting alerting) {
    
    this.alerting = alerting;
    return this;
  }

   /**
   * Get alerting
   * @return alerting
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecAlerting getAlerting() {
    return alerting;
  }


  public void setAlerting(V1PrometheusSpecAlerting alerting) {
    this.alerting = alerting;
  }


  public V1PrometheusSpec allowOverlappingBlocks(Boolean allowOverlappingBlocks) {
    
    this.allowOverlappingBlocks = allowOverlappingBlocks;
    return this;
  }

   /**
   * AllowOverlappingBlocks enables vertical compaction and vertical query merge in Prometheus. This is still experimental in Prometheus so it may change in any upcoming release.
   * @return allowOverlappingBlocks
  **/
  @jakarta.annotation.Nullable
  public Boolean getAllowOverlappingBlocks() {
    return allowOverlappingBlocks;
  }


  public void setAllowOverlappingBlocks(Boolean allowOverlappingBlocks) {
    this.allowOverlappingBlocks = allowOverlappingBlocks;
  }


  public V1PrometheusSpec apiserverConfig(V1PrometheusSpecApiserverConfig apiserverConfig) {
    
    this.apiserverConfig = apiserverConfig;
    return this;
  }

   /**
   * Get apiserverConfig
   * @return apiserverConfig
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecApiserverConfig getApiserverConfig() {
    return apiserverConfig;
  }


  public void setApiserverConfig(V1PrometheusSpecApiserverConfig apiserverConfig) {
    this.apiserverConfig = apiserverConfig;
  }


  public V1PrometheusSpec arbitraryFSAccessThroughSMs(V1PrometheusSpecArbitraryFSAccessThroughSMs arbitraryFSAccessThroughSMs) {
    
    this.arbitraryFSAccessThroughSMs = arbitraryFSAccessThroughSMs;
    return this;
  }

   /**
   * Get arbitraryFSAccessThroughSMs
   * @return arbitraryFSAccessThroughSMs
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecArbitraryFSAccessThroughSMs getArbitraryFSAccessThroughSMs() {
    return arbitraryFSAccessThroughSMs;
  }


  public void setArbitraryFSAccessThroughSMs(V1PrometheusSpecArbitraryFSAccessThroughSMs arbitraryFSAccessThroughSMs) {
    this.arbitraryFSAccessThroughSMs = arbitraryFSAccessThroughSMs;
  }


  public V1PrometheusSpec baseImage(String baseImage) {
    
    this.baseImage = baseImage;
    return this;
  }

   /**
   * Base image to use for a Prometheus deployment. Deprecated: use &#39;image&#39; instead
   * @return baseImage
  **/
  @jakarta.annotation.Nullable
  public String getBaseImage() {
    return baseImage;
  }


  public void setBaseImage(String baseImage) {
    this.baseImage = baseImage;
  }


  public V1PrometheusSpec configMaps(List<String> configMaps) {
    
    this.configMaps = configMaps;
    return this;
  }

  public V1PrometheusSpec addConfigMapsItem(String configMapsItem) {
    if (this.configMaps == null) {
      this.configMaps = new ArrayList<>();
    }
    this.configMaps.add(configMapsItem);
    return this;
  }

   /**
   * ConfigMaps is a list of ConfigMaps in the same namespace as the Prometheus object, which shall be mounted into the Prometheus Pods. Each ConfigMap is added to the StatefulSet definition as a volume named &#x60;configmap-&lt;configmap-name&gt;&#x60;. The ConfigMaps are mounted into /etc/prometheus/configmaps/&lt;configmap-name&gt; in the &#39;prometheus&#39; container.
   * @return configMaps
  **/
  @jakarta.annotation.Nullable
  public List<String> getConfigMaps() {
    return configMaps;
  }


  public void setConfigMaps(List<String> configMaps) {
    this.configMaps = configMaps;
  }


  public V1PrometheusSpec containers(List<V1AlertmanagerSpecContainersInner> containers) {
    
    this.containers = containers;
    return this;
  }

  public V1PrometheusSpec addContainersItem(V1AlertmanagerSpecContainersInner containersItem) {
    if (this.containers == null) {
      this.containers = new ArrayList<>();
    }
    this.containers.add(containersItem);
    return this;
  }

   /**
   * Containers allows injecting additional containers or modifying operator generated containers. This can be used to allow adding an authentication proxy to a Prometheus pod or to change the behavior of an operator generated container. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: &#x60;prometheus&#x60;, &#x60;config-reloader&#x60;, and &#x60;thanos-sidecar&#x60;. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
   * @return containers
  **/
  @jakarta.annotation.Nullable
  public List<V1AlertmanagerSpecContainersInner> getContainers() {
    return containers;
  }


  public void setContainers(List<V1AlertmanagerSpecContainersInner> containers) {
    this.containers = containers;
  }


  public V1PrometheusSpec disableCompaction(Boolean disableCompaction) {
    
    this.disableCompaction = disableCompaction;
    return this;
  }

   /**
   * Disable prometheus compaction.
   * @return disableCompaction
  **/
  @jakarta.annotation.Nullable
  public Boolean getDisableCompaction() {
    return disableCompaction;
  }


  public void setDisableCompaction(Boolean disableCompaction) {
    this.disableCompaction = disableCompaction;
  }


  public V1PrometheusSpec enableAdminAPI(Boolean enableAdminAPI) {
    
    this.enableAdminAPI = enableAdminAPI;
    return this;
  }

   /**
   * Enable access to prometheus web admin API. Defaults to the value of &#x60;false&#x60;. WARNING: Enabling the admin APIs enables mutating endpoints, to delete data, shutdown Prometheus, and more. Enabling this should be done with care and the user is advised to add additional authentication authorization via a proxy to ensure only clients authorized to perform these actions can do so. For more information see https://prometheus.io/docs/prometheus/latest/querying/api/#tsdb-admin-apis
   * @return enableAdminAPI
  **/
  @jakarta.annotation.Nullable
  public Boolean getEnableAdminAPI() {
    return enableAdminAPI;
  }


  public void setEnableAdminAPI(Boolean enableAdminAPI) {
    this.enableAdminAPI = enableAdminAPI;
  }


  public V1PrometheusSpec enableFeatures(List<String> enableFeatures) {
    
    this.enableFeatures = enableFeatures;
    return this;
  }

  public V1PrometheusSpec addEnableFeaturesItem(String enableFeaturesItem) {
    if (this.enableFeatures == null) {
      this.enableFeatures = new ArrayList<>();
    }
    this.enableFeatures.add(enableFeaturesItem);
    return this;
  }

   /**
   * Enable access to Prometheus disabled features. By default, no features are enabled. Enabling disabled features is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice. For more information see https://prometheus.io/docs/prometheus/latest/disabled_features/
   * @return enableFeatures
  **/
  @jakarta.annotation.Nullable
  public List<String> getEnableFeatures() {
    return enableFeatures;
  }


  public void setEnableFeatures(List<String> enableFeatures) {
    this.enableFeatures = enableFeatures;
  }


  public V1PrometheusSpec enableRemoteWriteReceiver(Boolean enableRemoteWriteReceiver) {
    
    this.enableRemoteWriteReceiver = enableRemoteWriteReceiver;
    return this;
  }

   /**
   * Enable Prometheus to be used as a receiver for the Prometheus remote write protocol. Defaults to the value of &#x60;false&#x60;. WARNING: This is not considered an efficient way of ingesting samples. Use it with caution for specific low-volume use cases. It is not suitable for replacing the ingestion via scraping and turning Prometheus into a push-based metrics collection system. For more information see https://prometheus.io/docs/prometheus/latest/querying/api/#remote-write-receiver Only valid in Prometheus versions 2.33.0 and newer.
   * @return enableRemoteWriteReceiver
  **/
  @jakarta.annotation.Nullable
  public Boolean getEnableRemoteWriteReceiver() {
    return enableRemoteWriteReceiver;
  }


  public void setEnableRemoteWriteReceiver(Boolean enableRemoteWriteReceiver) {
    this.enableRemoteWriteReceiver = enableRemoteWriteReceiver;
  }


  public V1PrometheusSpec enforcedBodySizeLimit(String enforcedBodySizeLimit) {
    
    this.enforcedBodySizeLimit = enforcedBodySizeLimit;
    return this;
  }

   /**
   * EnforcedBodySizeLimit defines the maximum size of uncompressed response body that will be accepted by Prometheus. Targets responding with a body larger than this many bytes will cause the scrape to fail. Example: 100MB. If defined, the limit will apply to all service/pod monitors and probes. This is an experimental feature, this behaviour could change or be removed in the future. Only valid in Prometheus versions 2.28.0 and newer.
   * @return enforcedBodySizeLimit
  **/
  @jakarta.annotation.Nullable
  public String getEnforcedBodySizeLimit() {
    return enforcedBodySizeLimit;
  }


  public void setEnforcedBodySizeLimit(String enforcedBodySizeLimit) {
    this.enforcedBodySizeLimit = enforcedBodySizeLimit;
  }


  public V1PrometheusSpec enforcedLabelLimit(Long enforcedLabelLimit) {
    
    this.enforcedLabelLimit = enforcedLabelLimit;
    return this;
  }

   /**
   * Per-scrape limit on number of labels that will be accepted for a sample. If more than this number of labels are present post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Only valid in Prometheus versions 2.27.0 and newer.
   * @return enforcedLabelLimit
  **/
  @jakarta.annotation.Nullable
  public Long getEnforcedLabelLimit() {
    return enforcedLabelLimit;
  }


  public void setEnforcedLabelLimit(Long enforcedLabelLimit) {
    this.enforcedLabelLimit = enforcedLabelLimit;
  }


  public V1PrometheusSpec enforcedLabelNameLengthLimit(Long enforcedLabelNameLengthLimit) {
    
    this.enforcedLabelNameLengthLimit = enforcedLabelNameLengthLimit;
    return this;
  }

   /**
   * Per-scrape limit on length of labels name that will be accepted for a sample. If a label name is longer than this number post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Only valid in Prometheus versions 2.27.0 and newer.
   * @return enforcedLabelNameLengthLimit
  **/
  @jakarta.annotation.Nullable
  public Long getEnforcedLabelNameLengthLimit() {
    return enforcedLabelNameLengthLimit;
  }


  public void setEnforcedLabelNameLengthLimit(Long enforcedLabelNameLengthLimit) {
    this.enforcedLabelNameLengthLimit = enforcedLabelNameLengthLimit;
  }


  public V1PrometheusSpec enforcedLabelValueLengthLimit(Long enforcedLabelValueLengthLimit) {
    
    this.enforcedLabelValueLengthLimit = enforcedLabelValueLengthLimit;
    return this;
  }

   /**
   * Per-scrape limit on length of labels value that will be accepted for a sample. If a label value is longer than this number post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Only valid in Prometheus versions 2.27.0 and newer.
   * @return enforcedLabelValueLengthLimit
  **/
  @jakarta.annotation.Nullable
  public Long getEnforcedLabelValueLengthLimit() {
    return enforcedLabelValueLengthLimit;
  }


  public void setEnforcedLabelValueLengthLimit(Long enforcedLabelValueLengthLimit) {
    this.enforcedLabelValueLengthLimit = enforcedLabelValueLengthLimit;
  }


  public V1PrometheusSpec enforcedNamespaceLabel(String enforcedNamespaceLabel) {
    
    this.enforcedNamespaceLabel = enforcedNamespaceLabel;
    return this;
  }

   /**
   * EnforcedNamespaceLabel If set, a label will be added to   1. all user-metrics (created by &#x60;ServiceMonitor&#x60;, &#x60;PodMonitor&#x60; and &#x60;Probe&#x60; objects) and 2. in all &#x60;PrometheusRule&#x60; objects (except the ones excluded in &#x60;prometheusRulesExcludedFromEnforce&#x60;) to * alerting &amp; recording rules and * the metrics used in their expressions (&#x60;expr&#x60;).   Label name is this field&#39;s value. Label value is the namespace of the created object (mentioned above).
   * @return enforcedNamespaceLabel
  **/
  @jakarta.annotation.Nullable
  public String getEnforcedNamespaceLabel() {
    return enforcedNamespaceLabel;
  }


  public void setEnforcedNamespaceLabel(String enforcedNamespaceLabel) {
    this.enforcedNamespaceLabel = enforcedNamespaceLabel;
  }


  public V1PrometheusSpec enforcedSampleLimit(Long enforcedSampleLimit) {
    
    this.enforcedSampleLimit = enforcedSampleLimit;
    return this;
  }

   /**
   * EnforcedSampleLimit defines global limit on number of scraped samples that will be accepted. This overrides any SampleLimit set per ServiceMonitor or/and PodMonitor. It is meant to be used by admins to enforce the SampleLimit to keep overall number of samples/series under the desired limit. Note that if SampleLimit is lower that value will be taken instead.
   * @return enforcedSampleLimit
  **/
  @jakarta.annotation.Nullable
  public Long getEnforcedSampleLimit() {
    return enforcedSampleLimit;
  }


  public void setEnforcedSampleLimit(Long enforcedSampleLimit) {
    this.enforcedSampleLimit = enforcedSampleLimit;
  }


  public V1PrometheusSpec enforcedTargetLimit(Long enforcedTargetLimit) {
    
    this.enforcedTargetLimit = enforcedTargetLimit;
    return this;
  }

   /**
   * EnforcedTargetLimit defines a global limit on the number of scraped targets.  This overrides any TargetLimit set per ServiceMonitor or/and PodMonitor.  It is meant to be used by admins to enforce the TargetLimit to keep the overall number of targets under the desired limit. Note that if TargetLimit is lower, that value will be taken instead, except if either value is zero, in which case the non-zero value will be used.  If both values are zero, no limit is enforced.
   * @return enforcedTargetLimit
  **/
  @jakarta.annotation.Nullable
  public Long getEnforcedTargetLimit() {
    return enforcedTargetLimit;
  }


  public void setEnforcedTargetLimit(Long enforcedTargetLimit) {
    this.enforcedTargetLimit = enforcedTargetLimit;
  }


  public V1PrometheusSpec evaluationInterval(String evaluationInterval) {
    
    this.evaluationInterval = evaluationInterval;
    return this;
  }

   /**
   * Interval between consecutive evaluations. Default: &#x60;30s&#x60;
   * @return evaluationInterval
  **/
  @jakarta.annotation.Nullable
  public String getEvaluationInterval() {
    return evaluationInterval;
  }


  public void setEvaluationInterval(String evaluationInterval) {
    this.evaluationInterval = evaluationInterval;
  }


  public V1PrometheusSpec excludedFromEnforcement(List<V1PrometheusSpecExcludedFromEnforcementInner> excludedFromEnforcement) {
    
    this.excludedFromEnforcement = excludedFromEnforcement;
    return this;
  }

  public V1PrometheusSpec addExcludedFromEnforcementItem(V1PrometheusSpecExcludedFromEnforcementInner excludedFromEnforcementItem) {
    if (this.excludedFromEnforcement == null) {
      this.excludedFromEnforcement = new ArrayList<>();
    }
    this.excludedFromEnforcement.add(excludedFromEnforcementItem);
    return this;
  }

   /**
   * List of references to PodMonitor, ServiceMonitor, Probe and PrometheusRule objects to be excluded from enforcing a namespace label of origin. Applies only if enforcedNamespaceLabel set to true.
   * @return excludedFromEnforcement
  **/
  @jakarta.annotation.Nullable
  public List<V1PrometheusSpecExcludedFromEnforcementInner> getExcludedFromEnforcement() {
    return excludedFromEnforcement;
  }


  public void setExcludedFromEnforcement(List<V1PrometheusSpecExcludedFromEnforcementInner> excludedFromEnforcement) {
    this.excludedFromEnforcement = excludedFromEnforcement;
  }


  public V1PrometheusSpec exemplars(V1PrometheusSpecExemplars exemplars) {
    
    this.exemplars = exemplars;
    return this;
  }

   /**
   * Get exemplars
   * @return exemplars
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecExemplars getExemplars() {
    return exemplars;
  }


  public void setExemplars(V1PrometheusSpecExemplars exemplars) {
    this.exemplars = exemplars;
  }


  public V1PrometheusSpec externalLabels(Map<String, String> externalLabels) {
    
    this.externalLabels = externalLabels;
    return this;
  }

  public V1PrometheusSpec putExternalLabelsItem(String key, String externalLabelsItem) {
    if (this.externalLabels == null) {
      this.externalLabels = new HashMap<>();
    }
    this.externalLabels.put(key, externalLabelsItem);
    return this;
  }

   /**
   * The labels to add to any time series or alerts when communicating with external systems (federation, remote storage, Alertmanager).
   * @return externalLabels
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getExternalLabels() {
    return externalLabels;
  }


  public void setExternalLabels(Map<String, String> externalLabels) {
    this.externalLabels = externalLabels;
  }


  public V1PrometheusSpec externalUrl(String externalUrl) {
    
    this.externalUrl = externalUrl;
    return this;
  }

   /**
   * The external URL the Prometheus instances will be available under. This is necessary to generate correct URLs. This is necessary if Prometheus is not served from root of a DNS name.
   * @return externalUrl
  **/
  @jakarta.annotation.Nullable
  public String getExternalUrl() {
    return externalUrl;
  }


  public void setExternalUrl(String externalUrl) {
    this.externalUrl = externalUrl;
  }


  public V1PrometheusSpec hostAliases(List<V1AlertmanagerSpecHostAliasesInner> hostAliases) {
    
    this.hostAliases = hostAliases;
    return this;
  }

  public V1PrometheusSpec addHostAliasesItem(V1AlertmanagerSpecHostAliasesInner hostAliasesItem) {
    if (this.hostAliases == null) {
      this.hostAliases = new ArrayList<>();
    }
    this.hostAliases.add(hostAliasesItem);
    return this;
  }

   /**
   * Pods&#39; hostAliases configuration
   * @return hostAliases
  **/
  @jakarta.annotation.Nullable
  public List<V1AlertmanagerSpecHostAliasesInner> getHostAliases() {
    return hostAliases;
  }


  public void setHostAliases(List<V1AlertmanagerSpecHostAliasesInner> hostAliases) {
    this.hostAliases = hostAliases;
  }


  public V1PrometheusSpec hostNetwork(Boolean hostNetwork) {
    
    this.hostNetwork = hostNetwork;
    return this;
  }

   /**
   * Use the host&#39;s network namespace if true. Make sure to understand the security implications if you want to enable it. When hostNetwork is enabled, this will set dnsPolicy to ClusterFirstWithHostNet automatically.
   * @return hostNetwork
  **/
  @jakarta.annotation.Nullable
  public Boolean getHostNetwork() {
    return hostNetwork;
  }


  public void setHostNetwork(Boolean hostNetwork) {
    this.hostNetwork = hostNetwork;
  }


  public V1PrometheusSpec ignoreNamespaceSelectors(Boolean ignoreNamespaceSelectors) {
    
    this.ignoreNamespaceSelectors = ignoreNamespaceSelectors;
    return this;
  }

   /**
   * IgnoreNamespaceSelectors if set to true will ignore NamespaceSelector settings from all PodMonitor, ServiceMonitor and Probe objects. They will only discover endpoints within the namespace of the PodMonitor, ServiceMonitor and Probe objects. Defaults to false.
   * @return ignoreNamespaceSelectors
  **/
  @jakarta.annotation.Nullable
  public Boolean getIgnoreNamespaceSelectors() {
    return ignoreNamespaceSelectors;
  }


  public void setIgnoreNamespaceSelectors(Boolean ignoreNamespaceSelectors) {
    this.ignoreNamespaceSelectors = ignoreNamespaceSelectors;
  }


  public V1PrometheusSpec image(String image) {
    
    this.image = image;
    return this;
  }

   /**
   * Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Prometheus is being configured.
   * @return image
  **/
  @jakarta.annotation.Nullable
  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    this.image = image;
  }


  public V1PrometheusSpec imagePullPolicy(ImagePullPolicyEnum imagePullPolicy) {
    
    this.imagePullPolicy = imagePullPolicy;
    return this;
  }

   /**
   * Image pull policy for the &#39;prometheus&#39;, &#39;init-config-reloader&#39; and &#39;config-reloader&#39; containers. See https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy for more details.
   * @return imagePullPolicy
  **/
  @jakarta.annotation.Nullable
  public ImagePullPolicyEnum getImagePullPolicy() {
    return imagePullPolicy;
  }


  public void setImagePullPolicy(ImagePullPolicyEnum imagePullPolicy) {
    this.imagePullPolicy = imagePullPolicy;
  }


  public V1PrometheusSpec imagePullSecrets(List<V1AlertmanagerSpecImagePullSecretsInner> imagePullSecrets) {
    
    this.imagePullSecrets = imagePullSecrets;
    return this;
  }

  public V1PrometheusSpec addImagePullSecretsItem(V1AlertmanagerSpecImagePullSecretsInner imagePullSecretsItem) {
    if (this.imagePullSecrets == null) {
      this.imagePullSecrets = new ArrayList<>();
    }
    this.imagePullSecrets.add(imagePullSecretsItem);
    return this;
  }

   /**
   * An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
   * @return imagePullSecrets
  **/
  @jakarta.annotation.Nullable
  public List<V1AlertmanagerSpecImagePullSecretsInner> getImagePullSecrets() {
    return imagePullSecrets;
  }


  public void setImagePullSecrets(List<V1AlertmanagerSpecImagePullSecretsInner> imagePullSecrets) {
    this.imagePullSecrets = imagePullSecrets;
  }


  public V1PrometheusSpec initContainers(List<V1AlertmanagerSpecContainersInner> initContainers) {
    
    this.initContainers = initContainers;
    return this;
  }

  public V1PrometheusSpec addInitContainersItem(V1AlertmanagerSpecContainersInner initContainersItem) {
    if (this.initContainers == null) {
      this.initContainers = new ArrayList<>();
    }
    this.initContainers.add(initContainersItem);
    return this;
  }

   /**
   * InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Prometheus configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ InitContainers described here modify an operator generated init containers if they share the same name and modifications are done via a strategic merge patch. The current init container name is: &#x60;init-config-reloader&#x60;. Overriding init containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
   * @return initContainers
  **/
  @jakarta.annotation.Nullable
  public List<V1AlertmanagerSpecContainersInner> getInitContainers() {
    return initContainers;
  }


  public void setInitContainers(List<V1AlertmanagerSpecContainersInner> initContainers) {
    this.initContainers = initContainers;
  }


  public V1PrometheusSpec listenLocal(Boolean listenLocal) {
    
    this.listenLocal = listenLocal;
    return this;
  }

   /**
   * ListenLocal makes the Prometheus server listen on loopback, so that it does not bind against the Pod IP.
   * @return listenLocal
  **/
  @jakarta.annotation.Nullable
  public Boolean getListenLocal() {
    return listenLocal;
  }


  public void setListenLocal(Boolean listenLocal) {
    this.listenLocal = listenLocal;
  }


  public V1PrometheusSpec logFormat(LogFormatEnum logFormat) {
    
    this.logFormat = logFormat;
    return this;
  }

   /**
   * Log format for Prometheus to be configured with.
   * @return logFormat
  **/
  @jakarta.annotation.Nullable
  public LogFormatEnum getLogFormat() {
    return logFormat;
  }


  public void setLogFormat(LogFormatEnum logFormat) {
    this.logFormat = logFormat;
  }


  public V1PrometheusSpec logLevel(LogLevelEnum logLevel) {
    
    this.logLevel = logLevel;
    return this;
  }

   /**
   * Log level for Prometheus to be configured with.
   * @return logLevel
  **/
  @jakarta.annotation.Nullable
  public LogLevelEnum getLogLevel() {
    return logLevel;
  }


  public void setLogLevel(LogLevelEnum logLevel) {
    this.logLevel = logLevel;
  }


  public V1PrometheusSpec minReadySeconds(Integer minReadySeconds) {
    
    this.minReadySeconds = minReadySeconds;
    return this;
  }

   /**
   * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) This is an alpha field from kubernetes 1.22 until 1.24 which requires enabling the StatefulSetMinReadySeconds feature gate.
   * @return minReadySeconds
  **/
  @jakarta.annotation.Nullable
  public Integer getMinReadySeconds() {
    return minReadySeconds;
  }


  public void setMinReadySeconds(Integer minReadySeconds) {
    this.minReadySeconds = minReadySeconds;
  }


  public V1PrometheusSpec nodeSelector(Map<String, String> nodeSelector) {
    
    this.nodeSelector = nodeSelector;
    return this;
  }

  public V1PrometheusSpec putNodeSelectorItem(String key, String nodeSelectorItem) {
    if (this.nodeSelector == null) {
      this.nodeSelector = new HashMap<>();
    }
    this.nodeSelector.put(key, nodeSelectorItem);
    return this;
  }

   /**
   * Define which Nodes the Pods are scheduled on.
   * @return nodeSelector
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getNodeSelector() {
    return nodeSelector;
  }


  public void setNodeSelector(Map<String, String> nodeSelector) {
    this.nodeSelector = nodeSelector;
  }


  public V1PrometheusSpec overrideHonorLabels(Boolean overrideHonorLabels) {
    
    this.overrideHonorLabels = overrideHonorLabels;
    return this;
  }

   /**
   * When true, Prometheus resolves label conflicts by renaming the labels in the scraped data to \&quot;exported_&lt;label value&gt;\&quot; for all targets created from service and pod monitors. Otherwise the HonorLabels field of the service or pod monitor applies.
   * @return overrideHonorLabels
  **/
  @jakarta.annotation.Nullable
  public Boolean getOverrideHonorLabels() {
    return overrideHonorLabels;
  }


  public void setOverrideHonorLabels(Boolean overrideHonorLabels) {
    this.overrideHonorLabels = overrideHonorLabels;
  }


  public V1PrometheusSpec overrideHonorTimestamps(Boolean overrideHonorTimestamps) {
    
    this.overrideHonorTimestamps = overrideHonorTimestamps;
    return this;
  }

   /**
   * When true, Prometheus ignores the timestamps for all the targets created from service and pod monitors. Otherwise the HonorTimestamps field of the service or pod monitor applies.
   * @return overrideHonorTimestamps
  **/
  @jakarta.annotation.Nullable
  public Boolean getOverrideHonorTimestamps() {
    return overrideHonorTimestamps;
  }


  public void setOverrideHonorTimestamps(Boolean overrideHonorTimestamps) {
    this.overrideHonorTimestamps = overrideHonorTimestamps;
  }


  public V1PrometheusSpec paused(Boolean paused) {
    
    this.paused = paused;
    return this;
  }

   /**
   * When a Prometheus deployment is paused, no actions except for deletion will be performed on the underlying objects.
   * @return paused
  **/
  @jakarta.annotation.Nullable
  public Boolean getPaused() {
    return paused;
  }


  public void setPaused(Boolean paused) {
    this.paused = paused;
  }


  public V1PrometheusSpec podMetadata(V1PrometheusSpecPodMetadata podMetadata) {
    
    this.podMetadata = podMetadata;
    return this;
  }

   /**
   * Get podMetadata
   * @return podMetadata
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecPodMetadata getPodMetadata() {
    return podMetadata;
  }


  public void setPodMetadata(V1PrometheusSpecPodMetadata podMetadata) {
    this.podMetadata = podMetadata;
  }


  public V1PrometheusSpec podMonitorNamespaceSelector(V1PrometheusSpecPodMonitorNamespaceSelector podMonitorNamespaceSelector) {
    
    this.podMonitorNamespaceSelector = podMonitorNamespaceSelector;
    return this;
  }

   /**
   * Get podMonitorNamespaceSelector
   * @return podMonitorNamespaceSelector
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecPodMonitorNamespaceSelector getPodMonitorNamespaceSelector() {
    return podMonitorNamespaceSelector;
  }


  public void setPodMonitorNamespaceSelector(V1PrometheusSpecPodMonitorNamespaceSelector podMonitorNamespaceSelector) {
    this.podMonitorNamespaceSelector = podMonitorNamespaceSelector;
  }


  public V1PrometheusSpec podMonitorSelector(V1PrometheusSpecPodMonitorSelector podMonitorSelector) {
    
    this.podMonitorSelector = podMonitorSelector;
    return this;
  }

   /**
   * Get podMonitorSelector
   * @return podMonitorSelector
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecPodMonitorSelector getPodMonitorSelector() {
    return podMonitorSelector;
  }


  public void setPodMonitorSelector(V1PrometheusSpecPodMonitorSelector podMonitorSelector) {
    this.podMonitorSelector = podMonitorSelector;
  }


  public V1PrometheusSpec podTargetLabels(List<String> podTargetLabels) {
    
    this.podTargetLabels = podTargetLabels;
    return this;
  }

  public V1PrometheusSpec addPodTargetLabelsItem(String podTargetLabelsItem) {
    if (this.podTargetLabels == null) {
      this.podTargetLabels = new ArrayList<>();
    }
    this.podTargetLabels.add(podTargetLabelsItem);
    return this;
  }

   /**
   * PodTargetLabels are added to all Pod/ServiceMonitors&#39; podTargetLabels
   * @return podTargetLabels
  **/
  @jakarta.annotation.Nullable
  public List<String> getPodTargetLabels() {
    return podTargetLabels;
  }


  public void setPodTargetLabels(List<String> podTargetLabels) {
    this.podTargetLabels = podTargetLabels;
  }


  public V1PrometheusSpec portName(String portName) {
    
    this.portName = portName;
    return this;
  }

   /**
   * Port name used for the pods and governing service. Defaults to &#x60;web&#x60;.
   * @return portName
  **/
  @jakarta.annotation.Nullable
  public String getPortName() {
    return portName;
  }


  public void setPortName(String portName) {
    this.portName = portName;
  }


  public V1PrometheusSpec priorityClassName(String priorityClassName) {
    
    this.priorityClassName = priorityClassName;
    return this;
  }

   /**
   * Priority class assigned to the Pods
   * @return priorityClassName
  **/
  @jakarta.annotation.Nullable
  public String getPriorityClassName() {
    return priorityClassName;
  }


  public void setPriorityClassName(String priorityClassName) {
    this.priorityClassName = priorityClassName;
  }


  public V1PrometheusSpec probeNamespaceSelector(V1PrometheusSpecProbeNamespaceSelector probeNamespaceSelector) {
    
    this.probeNamespaceSelector = probeNamespaceSelector;
    return this;
  }

   /**
   * Get probeNamespaceSelector
   * @return probeNamespaceSelector
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecProbeNamespaceSelector getProbeNamespaceSelector() {
    return probeNamespaceSelector;
  }


  public void setProbeNamespaceSelector(V1PrometheusSpecProbeNamespaceSelector probeNamespaceSelector) {
    this.probeNamespaceSelector = probeNamespaceSelector;
  }


  public V1PrometheusSpec probeSelector(V1PrometheusSpecProbeSelector probeSelector) {
    
    this.probeSelector = probeSelector;
    return this;
  }

   /**
   * Get probeSelector
   * @return probeSelector
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecProbeSelector getProbeSelector() {
    return probeSelector;
  }


  public void setProbeSelector(V1PrometheusSpecProbeSelector probeSelector) {
    this.probeSelector = probeSelector;
  }


  public V1PrometheusSpec prometheusExternalLabelName(String prometheusExternalLabelName) {
    
    this.prometheusExternalLabelName = prometheusExternalLabelName;
    return this;
  }

   /**
   * Name of Prometheus external label used to denote Prometheus instance name. Defaults to the value of &#x60;prometheus&#x60;. External label will _not_ be added when value is set to empty string (&#x60;\&quot;\&quot;&#x60;).
   * @return prometheusExternalLabelName
  **/
  @jakarta.annotation.Nullable
  public String getPrometheusExternalLabelName() {
    return prometheusExternalLabelName;
  }


  public void setPrometheusExternalLabelName(String prometheusExternalLabelName) {
    this.prometheusExternalLabelName = prometheusExternalLabelName;
  }


  public V1PrometheusSpec prometheusRulesExcludedFromEnforce(List<V1PrometheusSpecPrometheusRulesExcludedFromEnforceInner> prometheusRulesExcludedFromEnforce) {
    
    this.prometheusRulesExcludedFromEnforce = prometheusRulesExcludedFromEnforce;
    return this;
  }

  public V1PrometheusSpec addPrometheusRulesExcludedFromEnforceItem(V1PrometheusSpecPrometheusRulesExcludedFromEnforceInner prometheusRulesExcludedFromEnforceItem) {
    if (this.prometheusRulesExcludedFromEnforce == null) {
      this.prometheusRulesExcludedFromEnforce = new ArrayList<>();
    }
    this.prometheusRulesExcludedFromEnforce.add(prometheusRulesExcludedFromEnforceItem);
    return this;
  }

   /**
   * PrometheusRulesExcludedFromEnforce - list of prometheus rules to be excluded from enforcing of adding namespace labels. Works only if enforcedNamespaceLabel set to true. Make sure both ruleNamespace and ruleName are set for each pair. Deprecated: use excludedFromEnforcement instead.
   * @return prometheusRulesExcludedFromEnforce
  **/
  @jakarta.annotation.Nullable
  public List<V1PrometheusSpecPrometheusRulesExcludedFromEnforceInner> getPrometheusRulesExcludedFromEnforce() {
    return prometheusRulesExcludedFromEnforce;
  }


  public void setPrometheusRulesExcludedFromEnforce(List<V1PrometheusSpecPrometheusRulesExcludedFromEnforceInner> prometheusRulesExcludedFromEnforce) {
    this.prometheusRulesExcludedFromEnforce = prometheusRulesExcludedFromEnforce;
  }


  public V1PrometheusSpec query(V1PrometheusSpecQuery query) {
    
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecQuery getQuery() {
    return query;
  }


  public void setQuery(V1PrometheusSpecQuery query) {
    this.query = query;
  }


  public V1PrometheusSpec queryLogFile(String queryLogFile) {
    
    this.queryLogFile = queryLogFile;
    return this;
  }

   /**
   * QueryLogFile specifies the file to which PromQL queries are logged. If the filename has an empty path, e.g. &#39;query.log&#39;, prometheus-operator will mount the file into an emptyDir volume at &#x60;/var/log/prometheus&#x60;. If a full path is provided, e.g. /var/log/prometheus/query.log, you must mount a volume in the specified directory and it must be writable. This is because the prometheus container runs with a read-only root filesystem for security reasons. Alternatively, the location can be set to a stdout location such as &#x60;/dev/stdout&#x60; to log query information to the default Prometheus log stream. This is only available in versions of Prometheus &gt;&#x3D; 2.16.0. For more details, see the Prometheus docs (https://prometheus.io/docs/guides/query-log/)
   * @return queryLogFile
  **/
  @jakarta.annotation.Nullable
  public String getQueryLogFile() {
    return queryLogFile;
  }


  public void setQueryLogFile(String queryLogFile) {
    this.queryLogFile = queryLogFile;
  }


  public V1PrometheusSpec remoteRead(List<V1PrometheusSpecRemoteReadInner> remoteRead) {
    
    this.remoteRead = remoteRead;
    return this;
  }

  public V1PrometheusSpec addRemoteReadItem(V1PrometheusSpecRemoteReadInner remoteReadItem) {
    if (this.remoteRead == null) {
      this.remoteRead = new ArrayList<>();
    }
    this.remoteRead.add(remoteReadItem);
    return this;
  }

   /**
   * remoteRead is the list of remote read configurations.
   * @return remoteRead
  **/
  @jakarta.annotation.Nullable
  public List<V1PrometheusSpecRemoteReadInner> getRemoteRead() {
    return remoteRead;
  }


  public void setRemoteRead(List<V1PrometheusSpecRemoteReadInner> remoteRead) {
    this.remoteRead = remoteRead;
  }


  public V1PrometheusSpec remoteWrite(List<V1PrometheusSpecRemoteWriteInner> remoteWrite) {
    
    this.remoteWrite = remoteWrite;
    return this;
  }

  public V1PrometheusSpec addRemoteWriteItem(V1PrometheusSpecRemoteWriteInner remoteWriteItem) {
    if (this.remoteWrite == null) {
      this.remoteWrite = new ArrayList<>();
    }
    this.remoteWrite.add(remoteWriteItem);
    return this;
  }

   /**
   * remoteWrite is the list of remote write configurations.
   * @return remoteWrite
  **/
  @jakarta.annotation.Nullable
  public List<V1PrometheusSpecRemoteWriteInner> getRemoteWrite() {
    return remoteWrite;
  }


  public void setRemoteWrite(List<V1PrometheusSpecRemoteWriteInner> remoteWrite) {
    this.remoteWrite = remoteWrite;
  }


  public V1PrometheusSpec replicaExternalLabelName(String replicaExternalLabelName) {
    
    this.replicaExternalLabelName = replicaExternalLabelName;
    return this;
  }

   /**
   * Name of Prometheus external label used to denote replica name. Defaults to the value of &#x60;prometheus_replica&#x60;. External label will _not_ be added when value is set to empty string (&#x60;\&quot;\&quot;&#x60;).
   * @return replicaExternalLabelName
  **/
  @jakarta.annotation.Nullable
  public String getReplicaExternalLabelName() {
    return replicaExternalLabelName;
  }


  public void setReplicaExternalLabelName(String replicaExternalLabelName) {
    this.replicaExternalLabelName = replicaExternalLabelName;
  }


  public V1PrometheusSpec replicas(Integer replicas) {
    
    this.replicas = replicas;
    return this;
  }

   /**
   * Number of replicas of each shard to deploy for a Prometheus deployment. Number of replicas multiplied by shards is the total number of Pods created.
   * @return replicas
  **/
  @jakarta.annotation.Nullable
  public Integer getReplicas() {
    return replicas;
  }


  public void setReplicas(Integer replicas) {
    this.replicas = replicas;
  }


  public V1PrometheusSpec resources(V1AlertmanagerSpecResources resources) {
    
    this.resources = resources;
    return this;
  }

   /**
   * Get resources
   * @return resources
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecResources getResources() {
    return resources;
  }


  public void setResources(V1AlertmanagerSpecResources resources) {
    this.resources = resources;
  }


  public V1PrometheusSpec retention(String retention) {
    
    this.retention = retention;
    return this;
  }

   /**
   * Time duration Prometheus shall retain data for. Default is &#39;24h&#39; if retentionSize is not set, and must match the regular expression &#x60;[0-9]+(ms|s|m|h|d|w|y)&#x60; (milliseconds seconds minutes hours days weeks years).
   * @return retention
  **/
  @jakarta.annotation.Nullable
  public String getRetention() {
    return retention;
  }


  public void setRetention(String retention) {
    this.retention = retention;
  }


  public V1PrometheusSpec retentionSize(String retentionSize) {
    
    this.retentionSize = retentionSize;
    return this;
  }

   /**
   * Maximum amount of disk space used by blocks.
   * @return retentionSize
  **/
  @jakarta.annotation.Nullable
  public String getRetentionSize() {
    return retentionSize;
  }


  public void setRetentionSize(String retentionSize) {
    this.retentionSize = retentionSize;
  }


  public V1PrometheusSpec routePrefix(String routePrefix) {
    
    this.routePrefix = routePrefix;
    return this;
  }

   /**
   * The route prefix Prometheus registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with &#x60;kubectl proxy&#x60;.
   * @return routePrefix
  **/
  @jakarta.annotation.Nullable
  public String getRoutePrefix() {
    return routePrefix;
  }


  public void setRoutePrefix(String routePrefix) {
    this.routePrefix = routePrefix;
  }


  public V1PrometheusSpec ruleNamespaceSelector(V1PrometheusSpecRuleNamespaceSelector ruleNamespaceSelector) {
    
    this.ruleNamespaceSelector = ruleNamespaceSelector;
    return this;
  }

   /**
   * Get ruleNamespaceSelector
   * @return ruleNamespaceSelector
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecRuleNamespaceSelector getRuleNamespaceSelector() {
    return ruleNamespaceSelector;
  }


  public void setRuleNamespaceSelector(V1PrometheusSpecRuleNamespaceSelector ruleNamespaceSelector) {
    this.ruleNamespaceSelector = ruleNamespaceSelector;
  }


  public V1PrometheusSpec ruleSelector(V1PrometheusSpecRuleSelector ruleSelector) {
    
    this.ruleSelector = ruleSelector;
    return this;
  }

   /**
   * Get ruleSelector
   * @return ruleSelector
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecRuleSelector getRuleSelector() {
    return ruleSelector;
  }


  public void setRuleSelector(V1PrometheusSpecRuleSelector ruleSelector) {
    this.ruleSelector = ruleSelector;
  }


  public V1PrometheusSpec rules(V1PrometheusSpecRules rules) {
    
    this.rules = rules;
    return this;
  }

   /**
   * Get rules
   * @return rules
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecRules getRules() {
    return rules;
  }


  public void setRules(V1PrometheusSpecRules rules) {
    this.rules = rules;
  }


  public V1PrometheusSpec scrapeConfigNamespaceSelector(V1PrometheusSpecScrapeConfigNamespaceSelector scrapeConfigNamespaceSelector) {
    
    this.scrapeConfigNamespaceSelector = scrapeConfigNamespaceSelector;
    return this;
  }

   /**
   * Get scrapeConfigNamespaceSelector
   * @return scrapeConfigNamespaceSelector
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecScrapeConfigNamespaceSelector getScrapeConfigNamespaceSelector() {
    return scrapeConfigNamespaceSelector;
  }


  public void setScrapeConfigNamespaceSelector(V1PrometheusSpecScrapeConfigNamespaceSelector scrapeConfigNamespaceSelector) {
    this.scrapeConfigNamespaceSelector = scrapeConfigNamespaceSelector;
  }


  public V1PrometheusSpec scrapeConfigSelector(V1PrometheusSpecScrapeConfigSelector scrapeConfigSelector) {
    
    this.scrapeConfigSelector = scrapeConfigSelector;
    return this;
  }

   /**
   * Get scrapeConfigSelector
   * @return scrapeConfigSelector
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecScrapeConfigSelector getScrapeConfigSelector() {
    return scrapeConfigSelector;
  }


  public void setScrapeConfigSelector(V1PrometheusSpecScrapeConfigSelector scrapeConfigSelector) {
    this.scrapeConfigSelector = scrapeConfigSelector;
  }


  public V1PrometheusSpec scrapeInterval(String scrapeInterval) {
    
    this.scrapeInterval = scrapeInterval;
    return this;
  }

   /**
   * Interval between consecutive scrapes. Default: &#x60;30s&#x60;
   * @return scrapeInterval
  **/
  @jakarta.annotation.Nullable
  public String getScrapeInterval() {
    return scrapeInterval;
  }


  public void setScrapeInterval(String scrapeInterval) {
    this.scrapeInterval = scrapeInterval;
  }


  public V1PrometheusSpec scrapeTimeout(String scrapeTimeout) {
    
    this.scrapeTimeout = scrapeTimeout;
    return this;
  }

   /**
   * Number of seconds to wait for target to respond before erroring.
   * @return scrapeTimeout
  **/
  @jakarta.annotation.Nullable
  public String getScrapeTimeout() {
    return scrapeTimeout;
  }


  public void setScrapeTimeout(String scrapeTimeout) {
    this.scrapeTimeout = scrapeTimeout;
  }


  public V1PrometheusSpec secrets(List<String> secrets) {
    
    this.secrets = secrets;
    return this;
  }

  public V1PrometheusSpec addSecretsItem(String secretsItem) {
    if (this.secrets == null) {
      this.secrets = new ArrayList<>();
    }
    this.secrets.add(secretsItem);
    return this;
  }

   /**
   * Secrets is a list of Secrets in the same namespace as the Prometheus object, which shall be mounted into the Prometheus Pods. Each Secret is added to the StatefulSet definition as a volume named &#x60;secret-&lt;secret-name&gt;&#x60;. The Secrets are mounted into /etc/prometheus/secrets/&lt;secret-name&gt; in the &#39;prometheus&#39; container.
   * @return secrets
  **/
  @jakarta.annotation.Nullable
  public List<String> getSecrets() {
    return secrets;
  }


  public void setSecrets(List<String> secrets) {
    this.secrets = secrets;
  }


  public V1PrometheusSpec securityContext(V1AlertmanagerSpecSecurityContext securityContext) {
    
    this.securityContext = securityContext;
    return this;
  }

   /**
   * Get securityContext
   * @return securityContext
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecSecurityContext getSecurityContext() {
    return securityContext;
  }


  public void setSecurityContext(V1AlertmanagerSpecSecurityContext securityContext) {
    this.securityContext = securityContext;
  }


  public V1PrometheusSpec serviceAccountName(String serviceAccountName) {
    
    this.serviceAccountName = serviceAccountName;
    return this;
  }

   /**
   * ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.
   * @return serviceAccountName
  **/
  @jakarta.annotation.Nullable
  public String getServiceAccountName() {
    return serviceAccountName;
  }


  public void setServiceAccountName(String serviceAccountName) {
    this.serviceAccountName = serviceAccountName;
  }


  public V1PrometheusSpec serviceMonitorNamespaceSelector(V1PrometheusSpecServiceMonitorNamespaceSelector serviceMonitorNamespaceSelector) {
    
    this.serviceMonitorNamespaceSelector = serviceMonitorNamespaceSelector;
    return this;
  }

   /**
   * Get serviceMonitorNamespaceSelector
   * @return serviceMonitorNamespaceSelector
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecServiceMonitorNamespaceSelector getServiceMonitorNamespaceSelector() {
    return serviceMonitorNamespaceSelector;
  }


  public void setServiceMonitorNamespaceSelector(V1PrometheusSpecServiceMonitorNamespaceSelector serviceMonitorNamespaceSelector) {
    this.serviceMonitorNamespaceSelector = serviceMonitorNamespaceSelector;
  }


  public V1PrometheusSpec serviceMonitorSelector(V1PrometheusSpecServiceMonitorSelector serviceMonitorSelector) {
    
    this.serviceMonitorSelector = serviceMonitorSelector;
    return this;
  }

   /**
   * Get serviceMonitorSelector
   * @return serviceMonitorSelector
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecServiceMonitorSelector getServiceMonitorSelector() {
    return serviceMonitorSelector;
  }


  public void setServiceMonitorSelector(V1PrometheusSpecServiceMonitorSelector serviceMonitorSelector) {
    this.serviceMonitorSelector = serviceMonitorSelector;
  }


  public V1PrometheusSpec sha(String sha) {
    
    this.sha = sha;
    return this;
  }

   /**
   * SHA of Prometheus container image to be deployed. Defaults to the value of &#x60;version&#x60;. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use &#39;image&#39; instead.  The image digest can be specified as part of the image URL.
   * @return sha
  **/
  @jakarta.annotation.Nullable
  public String getSha() {
    return sha;
  }


  public void setSha(String sha) {
    this.sha = sha;
  }


  public V1PrometheusSpec shards(Integer shards) {
    
    this.shards = shards;
    return this;
  }

   /**
   * EXPERIMENTAL: Number of shards to distribute targets onto. Number of replicas multiplied by shards is the total number of Pods created. Note that scaling down shards will not reshard data onto remaining instances, it must be manually moved. Increasing shards will not reshard data either but it will continue to be available from the same instances. To query globally use Thanos sidecar and Thanos querier or remote write data to a central location. Sharding is done on the content of the &#x60;__address__&#x60; target meta-label.
   * @return shards
  **/
  @jakarta.annotation.Nullable
  public Integer getShards() {
    return shards;
  }


  public void setShards(Integer shards) {
    this.shards = shards;
  }


  public V1PrometheusSpec storage(V1PrometheusSpecStorage storage) {
    
    this.storage = storage;
    return this;
  }

   /**
   * Get storage
   * @return storage
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecStorage getStorage() {
    return storage;
  }


  public void setStorage(V1PrometheusSpecStorage storage) {
    this.storage = storage;
  }


  public V1PrometheusSpec tag(String tag) {
    
    this.tag = tag;
    return this;
  }

   /**
   * Tag of Prometheus container image to be deployed. Defaults to the value of &#x60;version&#x60;. Version is ignored if Tag is set. Deprecated: use &#39;image&#39; instead.  The image tag can be specified as part of the image URL.
   * @return tag
  **/
  @jakarta.annotation.Nullable
  public String getTag() {
    return tag;
  }


  public void setTag(String tag) {
    this.tag = tag;
  }


  public V1PrometheusSpec thanos(V1PrometheusSpecThanos thanos) {
    
    this.thanos = thanos;
    return this;
  }

   /**
   * Get thanos
   * @return thanos
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecThanos getThanos() {
    return thanos;
  }


  public void setThanos(V1PrometheusSpecThanos thanos) {
    this.thanos = thanos;
  }


  public V1PrometheusSpec tolerations(List<V1AlertmanagerSpecTolerationsInner> tolerations) {
    
    this.tolerations = tolerations;
    return this;
  }

  public V1PrometheusSpec addTolerationsItem(V1AlertmanagerSpecTolerationsInner tolerationsItem) {
    if (this.tolerations == null) {
      this.tolerations = new ArrayList<>();
    }
    this.tolerations.add(tolerationsItem);
    return this;
  }

   /**
   * If specified, the pod&#39;s tolerations.
   * @return tolerations
  **/
  @jakarta.annotation.Nullable
  public List<V1AlertmanagerSpecTolerationsInner> getTolerations() {
    return tolerations;
  }


  public void setTolerations(List<V1AlertmanagerSpecTolerationsInner> tolerations) {
    this.tolerations = tolerations;
  }


  public V1PrometheusSpec topologySpreadConstraints(List<V1AlertmanagerSpecTopologySpreadConstraintsInner> topologySpreadConstraints) {
    
    this.topologySpreadConstraints = topologySpreadConstraints;
    return this;
  }

  public V1PrometheusSpec addTopologySpreadConstraintsItem(V1AlertmanagerSpecTopologySpreadConstraintsInner topologySpreadConstraintsItem) {
    if (this.topologySpreadConstraints == null) {
      this.topologySpreadConstraints = new ArrayList<>();
    }
    this.topologySpreadConstraints.add(topologySpreadConstraintsItem);
    return this;
  }

   /**
   * If specified, the pod&#39;s topology spread constraints.
   * @return topologySpreadConstraints
  **/
  @jakarta.annotation.Nullable
  public List<V1AlertmanagerSpecTopologySpreadConstraintsInner> getTopologySpreadConstraints() {
    return topologySpreadConstraints;
  }


  public void setTopologySpreadConstraints(List<V1AlertmanagerSpecTopologySpreadConstraintsInner> topologySpreadConstraints) {
    this.topologySpreadConstraints = topologySpreadConstraints;
  }


  public V1PrometheusSpec tsdb(V1PrometheusSpecTsdb tsdb) {
    
    this.tsdb = tsdb;
    return this;
  }

   /**
   * Get tsdb
   * @return tsdb
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecTsdb getTsdb() {
    return tsdb;
  }


  public void setTsdb(V1PrometheusSpecTsdb tsdb) {
    this.tsdb = tsdb;
  }


  public V1PrometheusSpec version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Version of Prometheus to be deployed.
   * @return version
  **/
  @jakarta.annotation.Nullable
  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public V1PrometheusSpec volumeMounts(List<V1AlertmanagerSpecContainersInnerVolumeMountsInner> volumeMounts) {
    
    this.volumeMounts = volumeMounts;
    return this;
  }

  public V1PrometheusSpec addVolumeMountsItem(V1AlertmanagerSpecContainersInnerVolumeMountsInner volumeMountsItem) {
    if (this.volumeMounts == null) {
      this.volumeMounts = new ArrayList<>();
    }
    this.volumeMounts.add(volumeMountsItem);
    return this;
  }

   /**
   * VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the prometheus container, that are generated as a result of StorageSpec objects.
   * @return volumeMounts
  **/
  @jakarta.annotation.Nullable
  public List<V1AlertmanagerSpecContainersInnerVolumeMountsInner> getVolumeMounts() {
    return volumeMounts;
  }


  public void setVolumeMounts(List<V1AlertmanagerSpecContainersInnerVolumeMountsInner> volumeMounts) {
    this.volumeMounts = volumeMounts;
  }


  public V1PrometheusSpec volumes(List<V1AlertmanagerSpecVolumesInner> volumes) {
    
    this.volumes = volumes;
    return this;
  }

  public V1PrometheusSpec addVolumesItem(V1AlertmanagerSpecVolumesInner volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

   /**
   * Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.
   * @return volumes
  **/
  @jakarta.annotation.Nullable
  public List<V1AlertmanagerSpecVolumesInner> getVolumes() {
    return volumes;
  }


  public void setVolumes(List<V1AlertmanagerSpecVolumesInner> volumes) {
    this.volumes = volumes;
  }


  public V1PrometheusSpec walCompression(Boolean walCompression) {
    
    this.walCompression = walCompression;
    return this;
  }

   /**
   * Enable compression of the write-ahead log using Snappy. This flag is only available in versions of Prometheus &gt;&#x3D; 2.11.0.
   * @return walCompression
  **/
  @jakarta.annotation.Nullable
  public Boolean getWalCompression() {
    return walCompression;
  }


  public void setWalCompression(Boolean walCompression) {
    this.walCompression = walCompression;
  }


  public V1PrometheusSpec web(V1PrometheusSpecWeb web) {
    
    this.web = web;
    return this;
  }

   /**
   * Get web
   * @return web
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecWeb getWeb() {
    return web;
  }


  public void setWeb(V1PrometheusSpecWeb web) {
    this.web = web;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PrometheusSpec v1PrometheusSpec = (V1PrometheusSpec) o;
    return Objects.equals(this.additionalAlertManagerConfigs, v1PrometheusSpec.additionalAlertManagerConfigs) &&
        Objects.equals(this.additionalAlertRelabelConfigs, v1PrometheusSpec.additionalAlertRelabelConfigs) &&
        Objects.equals(this.additionalArgs, v1PrometheusSpec.additionalArgs) &&
        Objects.equals(this.additionalScrapeConfigs, v1PrometheusSpec.additionalScrapeConfigs) &&
        Objects.equals(this.affinity, v1PrometheusSpec.affinity) &&
        Objects.equals(this.alerting, v1PrometheusSpec.alerting) &&
        Objects.equals(this.allowOverlappingBlocks, v1PrometheusSpec.allowOverlappingBlocks) &&
        Objects.equals(this.apiserverConfig, v1PrometheusSpec.apiserverConfig) &&
        Objects.equals(this.arbitraryFSAccessThroughSMs, v1PrometheusSpec.arbitraryFSAccessThroughSMs) &&
        Objects.equals(this.baseImage, v1PrometheusSpec.baseImage) &&
        Objects.equals(this.configMaps, v1PrometheusSpec.configMaps) &&
        Objects.equals(this.containers, v1PrometheusSpec.containers) &&
        Objects.equals(this.disableCompaction, v1PrometheusSpec.disableCompaction) &&
        Objects.equals(this.enableAdminAPI, v1PrometheusSpec.enableAdminAPI) &&
        Objects.equals(this.enableFeatures, v1PrometheusSpec.enableFeatures) &&
        Objects.equals(this.enableRemoteWriteReceiver, v1PrometheusSpec.enableRemoteWriteReceiver) &&
        Objects.equals(this.enforcedBodySizeLimit, v1PrometheusSpec.enforcedBodySizeLimit) &&
        Objects.equals(this.enforcedLabelLimit, v1PrometheusSpec.enforcedLabelLimit) &&
        Objects.equals(this.enforcedLabelNameLengthLimit, v1PrometheusSpec.enforcedLabelNameLengthLimit) &&
        Objects.equals(this.enforcedLabelValueLengthLimit, v1PrometheusSpec.enforcedLabelValueLengthLimit) &&
        Objects.equals(this.enforcedNamespaceLabel, v1PrometheusSpec.enforcedNamespaceLabel) &&
        Objects.equals(this.enforcedSampleLimit, v1PrometheusSpec.enforcedSampleLimit) &&
        Objects.equals(this.enforcedTargetLimit, v1PrometheusSpec.enforcedTargetLimit) &&
        Objects.equals(this.evaluationInterval, v1PrometheusSpec.evaluationInterval) &&
        Objects.equals(this.excludedFromEnforcement, v1PrometheusSpec.excludedFromEnforcement) &&
        Objects.equals(this.exemplars, v1PrometheusSpec.exemplars) &&
        Objects.equals(this.externalLabels, v1PrometheusSpec.externalLabels) &&
        Objects.equals(this.externalUrl, v1PrometheusSpec.externalUrl) &&
        Objects.equals(this.hostAliases, v1PrometheusSpec.hostAliases) &&
        Objects.equals(this.hostNetwork, v1PrometheusSpec.hostNetwork) &&
        Objects.equals(this.ignoreNamespaceSelectors, v1PrometheusSpec.ignoreNamespaceSelectors) &&
        Objects.equals(this.image, v1PrometheusSpec.image) &&
        Objects.equals(this.imagePullPolicy, v1PrometheusSpec.imagePullPolicy) &&
        Objects.equals(this.imagePullSecrets, v1PrometheusSpec.imagePullSecrets) &&
        Objects.equals(this.initContainers, v1PrometheusSpec.initContainers) &&
        Objects.equals(this.listenLocal, v1PrometheusSpec.listenLocal) &&
        Objects.equals(this.logFormat, v1PrometheusSpec.logFormat) &&
        Objects.equals(this.logLevel, v1PrometheusSpec.logLevel) &&
        Objects.equals(this.minReadySeconds, v1PrometheusSpec.minReadySeconds) &&
        Objects.equals(this.nodeSelector, v1PrometheusSpec.nodeSelector) &&
        Objects.equals(this.overrideHonorLabels, v1PrometheusSpec.overrideHonorLabels) &&
        Objects.equals(this.overrideHonorTimestamps, v1PrometheusSpec.overrideHonorTimestamps) &&
        Objects.equals(this.paused, v1PrometheusSpec.paused) &&
        Objects.equals(this.podMetadata, v1PrometheusSpec.podMetadata) &&
        Objects.equals(this.podMonitorNamespaceSelector, v1PrometheusSpec.podMonitorNamespaceSelector) &&
        Objects.equals(this.podMonitorSelector, v1PrometheusSpec.podMonitorSelector) &&
        Objects.equals(this.podTargetLabels, v1PrometheusSpec.podTargetLabels) &&
        Objects.equals(this.portName, v1PrometheusSpec.portName) &&
        Objects.equals(this.priorityClassName, v1PrometheusSpec.priorityClassName) &&
        Objects.equals(this.probeNamespaceSelector, v1PrometheusSpec.probeNamespaceSelector) &&
        Objects.equals(this.probeSelector, v1PrometheusSpec.probeSelector) &&
        Objects.equals(this.prometheusExternalLabelName, v1PrometheusSpec.prometheusExternalLabelName) &&
        Objects.equals(this.prometheusRulesExcludedFromEnforce, v1PrometheusSpec.prometheusRulesExcludedFromEnforce) &&
        Objects.equals(this.query, v1PrometheusSpec.query) &&
        Objects.equals(this.queryLogFile, v1PrometheusSpec.queryLogFile) &&
        Objects.equals(this.remoteRead, v1PrometheusSpec.remoteRead) &&
        Objects.equals(this.remoteWrite, v1PrometheusSpec.remoteWrite) &&
        Objects.equals(this.replicaExternalLabelName, v1PrometheusSpec.replicaExternalLabelName) &&
        Objects.equals(this.replicas, v1PrometheusSpec.replicas) &&
        Objects.equals(this.resources, v1PrometheusSpec.resources) &&
        Objects.equals(this.retention, v1PrometheusSpec.retention) &&
        Objects.equals(this.retentionSize, v1PrometheusSpec.retentionSize) &&
        Objects.equals(this.routePrefix, v1PrometheusSpec.routePrefix) &&
        Objects.equals(this.ruleNamespaceSelector, v1PrometheusSpec.ruleNamespaceSelector) &&
        Objects.equals(this.ruleSelector, v1PrometheusSpec.ruleSelector) &&
        Objects.equals(this.rules, v1PrometheusSpec.rules) &&
        Objects.equals(this.scrapeConfigNamespaceSelector, v1PrometheusSpec.scrapeConfigNamespaceSelector) &&
        Objects.equals(this.scrapeConfigSelector, v1PrometheusSpec.scrapeConfigSelector) &&
        Objects.equals(this.scrapeInterval, v1PrometheusSpec.scrapeInterval) &&
        Objects.equals(this.scrapeTimeout, v1PrometheusSpec.scrapeTimeout) &&
        Objects.equals(this.secrets, v1PrometheusSpec.secrets) &&
        Objects.equals(this.securityContext, v1PrometheusSpec.securityContext) &&
        Objects.equals(this.serviceAccountName, v1PrometheusSpec.serviceAccountName) &&
        Objects.equals(this.serviceMonitorNamespaceSelector, v1PrometheusSpec.serviceMonitorNamespaceSelector) &&
        Objects.equals(this.serviceMonitorSelector, v1PrometheusSpec.serviceMonitorSelector) &&
        Objects.equals(this.sha, v1PrometheusSpec.sha) &&
        Objects.equals(this.shards, v1PrometheusSpec.shards) &&
        Objects.equals(this.storage, v1PrometheusSpec.storage) &&
        Objects.equals(this.tag, v1PrometheusSpec.tag) &&
        Objects.equals(this.thanos, v1PrometheusSpec.thanos) &&
        Objects.equals(this.tolerations, v1PrometheusSpec.tolerations) &&
        Objects.equals(this.topologySpreadConstraints, v1PrometheusSpec.topologySpreadConstraints) &&
        Objects.equals(this.tsdb, v1PrometheusSpec.tsdb) &&
        Objects.equals(this.version, v1PrometheusSpec.version) &&
        Objects.equals(this.volumeMounts, v1PrometheusSpec.volumeMounts) &&
        Objects.equals(this.volumes, v1PrometheusSpec.volumes) &&
        Objects.equals(this.walCompression, v1PrometheusSpec.walCompression) &&
        Objects.equals(this.web, v1PrometheusSpec.web);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalAlertManagerConfigs, additionalAlertRelabelConfigs, additionalArgs, additionalScrapeConfigs, affinity, alerting, allowOverlappingBlocks, apiserverConfig, arbitraryFSAccessThroughSMs, baseImage, configMaps, containers, disableCompaction, enableAdminAPI, enableFeatures, enableRemoteWriteReceiver, enforcedBodySizeLimit, enforcedLabelLimit, enforcedLabelNameLengthLimit, enforcedLabelValueLengthLimit, enforcedNamespaceLabel, enforcedSampleLimit, enforcedTargetLimit, evaluationInterval, excludedFromEnforcement, exemplars, externalLabels, externalUrl, hostAliases, hostNetwork, ignoreNamespaceSelectors, image, imagePullPolicy, imagePullSecrets, initContainers, listenLocal, logFormat, logLevel, minReadySeconds, nodeSelector, overrideHonorLabels, overrideHonorTimestamps, paused, podMetadata, podMonitorNamespaceSelector, podMonitorSelector, podTargetLabels, portName, priorityClassName, probeNamespaceSelector, probeSelector, prometheusExternalLabelName, prometheusRulesExcludedFromEnforce, query, queryLogFile, remoteRead, remoteWrite, replicaExternalLabelName, replicas, resources, retention, retentionSize, routePrefix, ruleNamespaceSelector, ruleSelector, rules, scrapeConfigNamespaceSelector, scrapeConfigSelector, scrapeInterval, scrapeTimeout, secrets, securityContext, serviceAccountName, serviceMonitorNamespaceSelector, serviceMonitorSelector, sha, shards, storage, tag, thanos, tolerations, topologySpreadConstraints, tsdb, version, volumeMounts, volumes, walCompression, web);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PrometheusSpec {\n");
    sb.append("    additionalAlertManagerConfigs: ").append(toIndentedString(additionalAlertManagerConfigs)).append("\n");
    sb.append("    additionalAlertRelabelConfigs: ").append(toIndentedString(additionalAlertRelabelConfigs)).append("\n");
    sb.append("    additionalArgs: ").append(toIndentedString(additionalArgs)).append("\n");
    sb.append("    additionalScrapeConfigs: ").append(toIndentedString(additionalScrapeConfigs)).append("\n");
    sb.append("    affinity: ").append(toIndentedString(affinity)).append("\n");
    sb.append("    alerting: ").append(toIndentedString(alerting)).append("\n");
    sb.append("    allowOverlappingBlocks: ").append(toIndentedString(allowOverlappingBlocks)).append("\n");
    sb.append("    apiserverConfig: ").append(toIndentedString(apiserverConfig)).append("\n");
    sb.append("    arbitraryFSAccessThroughSMs: ").append(toIndentedString(arbitraryFSAccessThroughSMs)).append("\n");
    sb.append("    baseImage: ").append(toIndentedString(baseImage)).append("\n");
    sb.append("    configMaps: ").append(toIndentedString(configMaps)).append("\n");
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    disableCompaction: ").append(toIndentedString(disableCompaction)).append("\n");
    sb.append("    enableAdminAPI: ").append(toIndentedString(enableAdminAPI)).append("\n");
    sb.append("    enableFeatures: ").append(toIndentedString(enableFeatures)).append("\n");
    sb.append("    enableRemoteWriteReceiver: ").append(toIndentedString(enableRemoteWriteReceiver)).append("\n");
    sb.append("    enforcedBodySizeLimit: ").append(toIndentedString(enforcedBodySizeLimit)).append("\n");
    sb.append("    enforcedLabelLimit: ").append(toIndentedString(enforcedLabelLimit)).append("\n");
    sb.append("    enforcedLabelNameLengthLimit: ").append(toIndentedString(enforcedLabelNameLengthLimit)).append("\n");
    sb.append("    enforcedLabelValueLengthLimit: ").append(toIndentedString(enforcedLabelValueLengthLimit)).append("\n");
    sb.append("    enforcedNamespaceLabel: ").append(toIndentedString(enforcedNamespaceLabel)).append("\n");
    sb.append("    enforcedSampleLimit: ").append(toIndentedString(enforcedSampleLimit)).append("\n");
    sb.append("    enforcedTargetLimit: ").append(toIndentedString(enforcedTargetLimit)).append("\n");
    sb.append("    evaluationInterval: ").append(toIndentedString(evaluationInterval)).append("\n");
    sb.append("    excludedFromEnforcement: ").append(toIndentedString(excludedFromEnforcement)).append("\n");
    sb.append("    exemplars: ").append(toIndentedString(exemplars)).append("\n");
    sb.append("    externalLabels: ").append(toIndentedString(externalLabels)).append("\n");
    sb.append("    externalUrl: ").append(toIndentedString(externalUrl)).append("\n");
    sb.append("    hostAliases: ").append(toIndentedString(hostAliases)).append("\n");
    sb.append("    hostNetwork: ").append(toIndentedString(hostNetwork)).append("\n");
    sb.append("    ignoreNamespaceSelectors: ").append(toIndentedString(ignoreNamespaceSelectors)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imagePullPolicy: ").append(toIndentedString(imagePullPolicy)).append("\n");
    sb.append("    imagePullSecrets: ").append(toIndentedString(imagePullSecrets)).append("\n");
    sb.append("    initContainers: ").append(toIndentedString(initContainers)).append("\n");
    sb.append("    listenLocal: ").append(toIndentedString(listenLocal)).append("\n");
    sb.append("    logFormat: ").append(toIndentedString(logFormat)).append("\n");
    sb.append("    logLevel: ").append(toIndentedString(logLevel)).append("\n");
    sb.append("    minReadySeconds: ").append(toIndentedString(minReadySeconds)).append("\n");
    sb.append("    nodeSelector: ").append(toIndentedString(nodeSelector)).append("\n");
    sb.append("    overrideHonorLabels: ").append(toIndentedString(overrideHonorLabels)).append("\n");
    sb.append("    overrideHonorTimestamps: ").append(toIndentedString(overrideHonorTimestamps)).append("\n");
    sb.append("    paused: ").append(toIndentedString(paused)).append("\n");
    sb.append("    podMetadata: ").append(toIndentedString(podMetadata)).append("\n");
    sb.append("    podMonitorNamespaceSelector: ").append(toIndentedString(podMonitorNamespaceSelector)).append("\n");
    sb.append("    podMonitorSelector: ").append(toIndentedString(podMonitorSelector)).append("\n");
    sb.append("    podTargetLabels: ").append(toIndentedString(podTargetLabels)).append("\n");
    sb.append("    portName: ").append(toIndentedString(portName)).append("\n");
    sb.append("    priorityClassName: ").append(toIndentedString(priorityClassName)).append("\n");
    sb.append("    probeNamespaceSelector: ").append(toIndentedString(probeNamespaceSelector)).append("\n");
    sb.append("    probeSelector: ").append(toIndentedString(probeSelector)).append("\n");
    sb.append("    prometheusExternalLabelName: ").append(toIndentedString(prometheusExternalLabelName)).append("\n");
    sb.append("    prometheusRulesExcludedFromEnforce: ").append(toIndentedString(prometheusRulesExcludedFromEnforce)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    queryLogFile: ").append(toIndentedString(queryLogFile)).append("\n");
    sb.append("    remoteRead: ").append(toIndentedString(remoteRead)).append("\n");
    sb.append("    remoteWrite: ").append(toIndentedString(remoteWrite)).append("\n");
    sb.append("    replicaExternalLabelName: ").append(toIndentedString(replicaExternalLabelName)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    retention: ").append(toIndentedString(retention)).append("\n");
    sb.append("    retentionSize: ").append(toIndentedString(retentionSize)).append("\n");
    sb.append("    routePrefix: ").append(toIndentedString(routePrefix)).append("\n");
    sb.append("    ruleNamespaceSelector: ").append(toIndentedString(ruleNamespaceSelector)).append("\n");
    sb.append("    ruleSelector: ").append(toIndentedString(ruleSelector)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    scrapeConfigNamespaceSelector: ").append(toIndentedString(scrapeConfigNamespaceSelector)).append("\n");
    sb.append("    scrapeConfigSelector: ").append(toIndentedString(scrapeConfigSelector)).append("\n");
    sb.append("    scrapeInterval: ").append(toIndentedString(scrapeInterval)).append("\n");
    sb.append("    scrapeTimeout: ").append(toIndentedString(scrapeTimeout)).append("\n");
    sb.append("    secrets: ").append(toIndentedString(secrets)).append("\n");
    sb.append("    securityContext: ").append(toIndentedString(securityContext)).append("\n");
    sb.append("    serviceAccountName: ").append(toIndentedString(serviceAccountName)).append("\n");
    sb.append("    serviceMonitorNamespaceSelector: ").append(toIndentedString(serviceMonitorNamespaceSelector)).append("\n");
    sb.append("    serviceMonitorSelector: ").append(toIndentedString(serviceMonitorSelector)).append("\n");
    sb.append("    sha: ").append(toIndentedString(sha)).append("\n");
    sb.append("    shards: ").append(toIndentedString(shards)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    thanos: ").append(toIndentedString(thanos)).append("\n");
    sb.append("    tolerations: ").append(toIndentedString(tolerations)).append("\n");
    sb.append("    topologySpreadConstraints: ").append(toIndentedString(topologySpreadConstraints)).append("\n");
    sb.append("    tsdb: ").append(toIndentedString(tsdb)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    volumeMounts: ").append(toIndentedString(volumeMounts)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("    walCompression: ").append(toIndentedString(walCompression)).append("\n");
    sb.append("    web: ").append(toIndentedString(web)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalAlertManagerConfigs");
    openapiFields.add("additionalAlertRelabelConfigs");
    openapiFields.add("additionalArgs");
    openapiFields.add("additionalScrapeConfigs");
    openapiFields.add("affinity");
    openapiFields.add("alerting");
    openapiFields.add("allowOverlappingBlocks");
    openapiFields.add("apiserverConfig");
    openapiFields.add("arbitraryFSAccessThroughSMs");
    openapiFields.add("baseImage");
    openapiFields.add("configMaps");
    openapiFields.add("containers");
    openapiFields.add("disableCompaction");
    openapiFields.add("enableAdminAPI");
    openapiFields.add("enableFeatures");
    openapiFields.add("enableRemoteWriteReceiver");
    openapiFields.add("enforcedBodySizeLimit");
    openapiFields.add("enforcedLabelLimit");
    openapiFields.add("enforcedLabelNameLengthLimit");
    openapiFields.add("enforcedLabelValueLengthLimit");
    openapiFields.add("enforcedNamespaceLabel");
    openapiFields.add("enforcedSampleLimit");
    openapiFields.add("enforcedTargetLimit");
    openapiFields.add("evaluationInterval");
    openapiFields.add("excludedFromEnforcement");
    openapiFields.add("exemplars");
    openapiFields.add("externalLabels");
    openapiFields.add("externalUrl");
    openapiFields.add("hostAliases");
    openapiFields.add("hostNetwork");
    openapiFields.add("ignoreNamespaceSelectors");
    openapiFields.add("image");
    openapiFields.add("imagePullPolicy");
    openapiFields.add("imagePullSecrets");
    openapiFields.add("initContainers");
    openapiFields.add("listenLocal");
    openapiFields.add("logFormat");
    openapiFields.add("logLevel");
    openapiFields.add("minReadySeconds");
    openapiFields.add("nodeSelector");
    openapiFields.add("overrideHonorLabels");
    openapiFields.add("overrideHonorTimestamps");
    openapiFields.add("paused");
    openapiFields.add("podMetadata");
    openapiFields.add("podMonitorNamespaceSelector");
    openapiFields.add("podMonitorSelector");
    openapiFields.add("podTargetLabels");
    openapiFields.add("portName");
    openapiFields.add("priorityClassName");
    openapiFields.add("probeNamespaceSelector");
    openapiFields.add("probeSelector");
    openapiFields.add("prometheusExternalLabelName");
    openapiFields.add("prometheusRulesExcludedFromEnforce");
    openapiFields.add("query");
    openapiFields.add("queryLogFile");
    openapiFields.add("remoteRead");
    openapiFields.add("remoteWrite");
    openapiFields.add("replicaExternalLabelName");
    openapiFields.add("replicas");
    openapiFields.add("resources");
    openapiFields.add("retention");
    openapiFields.add("retentionSize");
    openapiFields.add("routePrefix");
    openapiFields.add("ruleNamespaceSelector");
    openapiFields.add("ruleSelector");
    openapiFields.add("rules");
    openapiFields.add("scrapeConfigNamespaceSelector");
    openapiFields.add("scrapeConfigSelector");
    openapiFields.add("scrapeInterval");
    openapiFields.add("scrapeTimeout");
    openapiFields.add("secrets");
    openapiFields.add("securityContext");
    openapiFields.add("serviceAccountName");
    openapiFields.add("serviceMonitorNamespaceSelector");
    openapiFields.add("serviceMonitorSelector");
    openapiFields.add("sha");
    openapiFields.add("shards");
    openapiFields.add("storage");
    openapiFields.add("tag");
    openapiFields.add("thanos");
    openapiFields.add("tolerations");
    openapiFields.add("topologySpreadConstraints");
    openapiFields.add("tsdb");
    openapiFields.add("version");
    openapiFields.add("volumeMounts");
    openapiFields.add("volumes");
    openapiFields.add("walCompression");
    openapiFields.add("web");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1PrometheusSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1PrometheusSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1PrometheusSpec is not found in the empty JSON string", V1PrometheusSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1PrometheusSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1PrometheusSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `additionalAlertManagerConfigs`
      if (jsonObj.get("additionalAlertManagerConfigs") != null && !jsonObj.get("additionalAlertManagerConfigs").isJsonNull()) {
        V1PrometheusSpecAdditionalAlertManagerConfigs.validateJsonObject(jsonObj.getAsJsonObject("additionalAlertManagerConfigs"));
      }
      // validate the optional field `additionalAlertRelabelConfigs`
      if (jsonObj.get("additionalAlertRelabelConfigs") != null && !jsonObj.get("additionalAlertRelabelConfigs").isJsonNull()) {
        V1PrometheusSpecAdditionalAlertRelabelConfigs.validateJsonObject(jsonObj.getAsJsonObject("additionalAlertRelabelConfigs"));
      }
      if (jsonObj.get("additionalArgs") != null && !jsonObj.get("additionalArgs").isJsonNull()) {
        JsonArray jsonArrayadditionalArgs = jsonObj.getAsJsonArray("additionalArgs");
        if (jsonArrayadditionalArgs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalArgs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalArgs` to be an array in the JSON string but got `%s`", jsonObj.get("additionalArgs").toString()));
          }

          // validate the optional field `additionalArgs` (array)
          for (int i = 0; i < jsonArrayadditionalArgs.size(); i++) {
            V1PrometheusSpecAdditionalArgsInner.validateJsonObject(jsonArrayadditionalArgs.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `additionalScrapeConfigs`
      if (jsonObj.get("additionalScrapeConfigs") != null && !jsonObj.get("additionalScrapeConfigs").isJsonNull()) {
        V1PrometheusSpecAdditionalScrapeConfigs.validateJsonObject(jsonObj.getAsJsonObject("additionalScrapeConfigs"));
      }
      // validate the optional field `affinity`
      if (jsonObj.get("affinity") != null && !jsonObj.get("affinity").isJsonNull()) {
        V1AlertmanagerSpecAffinity.validateJsonObject(jsonObj.getAsJsonObject("affinity"));
      }
      // validate the optional field `alerting`
      if (jsonObj.get("alerting") != null && !jsonObj.get("alerting").isJsonNull()) {
        V1PrometheusSpecAlerting.validateJsonObject(jsonObj.getAsJsonObject("alerting"));
      }
      // validate the optional field `apiserverConfig`
      if (jsonObj.get("apiserverConfig") != null && !jsonObj.get("apiserverConfig").isJsonNull()) {
        V1PrometheusSpecApiserverConfig.validateJsonObject(jsonObj.getAsJsonObject("apiserverConfig"));
      }
      // validate the optional field `arbitraryFSAccessThroughSMs`
      if (jsonObj.get("arbitraryFSAccessThroughSMs") != null && !jsonObj.get("arbitraryFSAccessThroughSMs").isJsonNull()) {
        V1PrometheusSpecArbitraryFSAccessThroughSMs.validateJsonObject(jsonObj.getAsJsonObject("arbitraryFSAccessThroughSMs"));
      }
      if ((jsonObj.get("baseImage") != null && !jsonObj.get("baseImage").isJsonNull()) && !jsonObj.get("baseImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseImage").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("configMaps") != null && !jsonObj.get("configMaps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `configMaps` to be an array in the JSON string but got `%s`", jsonObj.get("configMaps").toString()));
      }
      if (jsonObj.get("containers") != null && !jsonObj.get("containers").isJsonNull()) {
        JsonArray jsonArraycontainers = jsonObj.getAsJsonArray("containers");
        if (jsonArraycontainers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("containers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `containers` to be an array in the JSON string but got `%s`", jsonObj.get("containers").toString()));
          }

          // validate the optional field `containers` (array)
          for (int i = 0; i < jsonArraycontainers.size(); i++) {
            V1AlertmanagerSpecContainersInner.validateJsonObject(jsonArraycontainers.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("enableFeatures") != null && !jsonObj.get("enableFeatures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enableFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("enableFeatures").toString()));
      }
      if ((jsonObj.get("enforcedBodySizeLimit") != null && !jsonObj.get("enforcedBodySizeLimit").isJsonNull()) && !jsonObj.get("enforcedBodySizeLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enforcedBodySizeLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enforcedBodySizeLimit").toString()));
      }
      if ((jsonObj.get("enforcedNamespaceLabel") != null && !jsonObj.get("enforcedNamespaceLabel").isJsonNull()) && !jsonObj.get("enforcedNamespaceLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enforcedNamespaceLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enforcedNamespaceLabel").toString()));
      }
      if ((jsonObj.get("evaluationInterval") != null && !jsonObj.get("evaluationInterval").isJsonNull()) && !jsonObj.get("evaluationInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationInterval").toString()));
      }
      if (jsonObj.get("excludedFromEnforcement") != null && !jsonObj.get("excludedFromEnforcement").isJsonNull()) {
        JsonArray jsonArrayexcludedFromEnforcement = jsonObj.getAsJsonArray("excludedFromEnforcement");
        if (jsonArrayexcludedFromEnforcement != null) {
          // ensure the json data is an array
          if (!jsonObj.get("excludedFromEnforcement").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `excludedFromEnforcement` to be an array in the JSON string but got `%s`", jsonObj.get("excludedFromEnforcement").toString()));
          }

          // validate the optional field `excludedFromEnforcement` (array)
          for (int i = 0; i < jsonArrayexcludedFromEnforcement.size(); i++) {
            V1PrometheusSpecExcludedFromEnforcementInner.validateJsonObject(jsonArrayexcludedFromEnforcement.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `exemplars`
      if (jsonObj.get("exemplars") != null && !jsonObj.get("exemplars").isJsonNull()) {
        V1PrometheusSpecExemplars.validateJsonObject(jsonObj.getAsJsonObject("exemplars"));
      }
      if ((jsonObj.get("externalUrl") != null && !jsonObj.get("externalUrl").isJsonNull()) && !jsonObj.get("externalUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalUrl").toString()));
      }
      if (jsonObj.get("hostAliases") != null && !jsonObj.get("hostAliases").isJsonNull()) {
        JsonArray jsonArrayhostAliases = jsonObj.getAsJsonArray("hostAliases");
        if (jsonArrayhostAliases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hostAliases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hostAliases` to be an array in the JSON string but got `%s`", jsonObj.get("hostAliases").toString()));
          }

          // validate the optional field `hostAliases` (array)
          for (int i = 0; i < jsonArrayhostAliases.size(); i++) {
            V1AlertmanagerSpecHostAliasesInner.validateJsonObject(jsonArrayhostAliases.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("imagePullPolicy") != null && !jsonObj.get("imagePullPolicy").isJsonNull()) && !jsonObj.get("imagePullPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imagePullPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imagePullPolicy").toString()));
      }
      if (jsonObj.get("imagePullSecrets") != null && !jsonObj.get("imagePullSecrets").isJsonNull()) {
        JsonArray jsonArrayimagePullSecrets = jsonObj.getAsJsonArray("imagePullSecrets");
        if (jsonArrayimagePullSecrets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("imagePullSecrets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `imagePullSecrets` to be an array in the JSON string but got `%s`", jsonObj.get("imagePullSecrets").toString()));
          }

          // validate the optional field `imagePullSecrets` (array)
          for (int i = 0; i < jsonArrayimagePullSecrets.size(); i++) {
            V1AlertmanagerSpecImagePullSecretsInner.validateJsonObject(jsonArrayimagePullSecrets.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("initContainers") != null && !jsonObj.get("initContainers").isJsonNull()) {
        JsonArray jsonArrayinitContainers = jsonObj.getAsJsonArray("initContainers");
        if (jsonArrayinitContainers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("initContainers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `initContainers` to be an array in the JSON string but got `%s`", jsonObj.get("initContainers").toString()));
          }

          // validate the optional field `initContainers` (array)
          for (int i = 0; i < jsonArrayinitContainers.size(); i++) {
            V1AlertmanagerSpecContainersInner.validateJsonObject(jsonArrayinitContainers.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("logFormat") != null && !jsonObj.get("logFormat").isJsonNull()) && !jsonObj.get("logFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logFormat").toString()));
      }
      if ((jsonObj.get("logLevel") != null && !jsonObj.get("logLevel").isJsonNull()) && !jsonObj.get("logLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logLevel").toString()));
      }
      // validate the optional field `podMetadata`
      if (jsonObj.get("podMetadata") != null && !jsonObj.get("podMetadata").isJsonNull()) {
        V1PrometheusSpecPodMetadata.validateJsonObject(jsonObj.getAsJsonObject("podMetadata"));
      }
      // validate the optional field `podMonitorNamespaceSelector`
      if (jsonObj.get("podMonitorNamespaceSelector") != null && !jsonObj.get("podMonitorNamespaceSelector").isJsonNull()) {
        V1PrometheusSpecPodMonitorNamespaceSelector.validateJsonObject(jsonObj.getAsJsonObject("podMonitorNamespaceSelector"));
      }
      // validate the optional field `podMonitorSelector`
      if (jsonObj.get("podMonitorSelector") != null && !jsonObj.get("podMonitorSelector").isJsonNull()) {
        V1PrometheusSpecPodMonitorSelector.validateJsonObject(jsonObj.getAsJsonObject("podMonitorSelector"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("podTargetLabels") != null && !jsonObj.get("podTargetLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `podTargetLabels` to be an array in the JSON string but got `%s`", jsonObj.get("podTargetLabels").toString()));
      }
      if ((jsonObj.get("portName") != null && !jsonObj.get("portName").isJsonNull()) && !jsonObj.get("portName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portName").toString()));
      }
      if ((jsonObj.get("priorityClassName") != null && !jsonObj.get("priorityClassName").isJsonNull()) && !jsonObj.get("priorityClassName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priorityClassName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priorityClassName").toString()));
      }
      // validate the optional field `probeNamespaceSelector`
      if (jsonObj.get("probeNamespaceSelector") != null && !jsonObj.get("probeNamespaceSelector").isJsonNull()) {
        V1PrometheusSpecProbeNamespaceSelector.validateJsonObject(jsonObj.getAsJsonObject("probeNamespaceSelector"));
      }
      // validate the optional field `probeSelector`
      if (jsonObj.get("probeSelector") != null && !jsonObj.get("probeSelector").isJsonNull()) {
        V1PrometheusSpecProbeSelector.validateJsonObject(jsonObj.getAsJsonObject("probeSelector"));
      }
      if ((jsonObj.get("prometheusExternalLabelName") != null && !jsonObj.get("prometheusExternalLabelName").isJsonNull()) && !jsonObj.get("prometheusExternalLabelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prometheusExternalLabelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prometheusExternalLabelName").toString()));
      }
      if (jsonObj.get("prometheusRulesExcludedFromEnforce") != null && !jsonObj.get("prometheusRulesExcludedFromEnforce").isJsonNull()) {
        JsonArray jsonArrayprometheusRulesExcludedFromEnforce = jsonObj.getAsJsonArray("prometheusRulesExcludedFromEnforce");
        if (jsonArrayprometheusRulesExcludedFromEnforce != null) {
          // ensure the json data is an array
          if (!jsonObj.get("prometheusRulesExcludedFromEnforce").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `prometheusRulesExcludedFromEnforce` to be an array in the JSON string but got `%s`", jsonObj.get("prometheusRulesExcludedFromEnforce").toString()));
          }

          // validate the optional field `prometheusRulesExcludedFromEnforce` (array)
          for (int i = 0; i < jsonArrayprometheusRulesExcludedFromEnforce.size(); i++) {
            V1PrometheusSpecPrometheusRulesExcludedFromEnforceInner.validateJsonObject(jsonArrayprometheusRulesExcludedFromEnforce.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `query`
      if (jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) {
        V1PrometheusSpecQuery.validateJsonObject(jsonObj.getAsJsonObject("query"));
      }
      if ((jsonObj.get("queryLogFile") != null && !jsonObj.get("queryLogFile").isJsonNull()) && !jsonObj.get("queryLogFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryLogFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryLogFile").toString()));
      }
      if (jsonObj.get("remoteRead") != null && !jsonObj.get("remoteRead").isJsonNull()) {
        JsonArray jsonArrayremoteRead = jsonObj.getAsJsonArray("remoteRead");
        if (jsonArrayremoteRead != null) {
          // ensure the json data is an array
          if (!jsonObj.get("remoteRead").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `remoteRead` to be an array in the JSON string but got `%s`", jsonObj.get("remoteRead").toString()));
          }

          // validate the optional field `remoteRead` (array)
          for (int i = 0; i < jsonArrayremoteRead.size(); i++) {
            V1PrometheusSpecRemoteReadInner.validateJsonObject(jsonArrayremoteRead.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("remoteWrite") != null && !jsonObj.get("remoteWrite").isJsonNull()) {
        JsonArray jsonArrayremoteWrite = jsonObj.getAsJsonArray("remoteWrite");
        if (jsonArrayremoteWrite != null) {
          // ensure the json data is an array
          if (!jsonObj.get("remoteWrite").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `remoteWrite` to be an array in the JSON string but got `%s`", jsonObj.get("remoteWrite").toString()));
          }

          // validate the optional field `remoteWrite` (array)
          for (int i = 0; i < jsonArrayremoteWrite.size(); i++) {
            V1PrometheusSpecRemoteWriteInner.validateJsonObject(jsonArrayremoteWrite.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("replicaExternalLabelName") != null && !jsonObj.get("replicaExternalLabelName").isJsonNull()) && !jsonObj.get("replicaExternalLabelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicaExternalLabelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicaExternalLabelName").toString()));
      }
      // validate the optional field `resources`
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        V1AlertmanagerSpecResources.validateJsonObject(jsonObj.getAsJsonObject("resources"));
      }
      if ((jsonObj.get("retention") != null && !jsonObj.get("retention").isJsonNull()) && !jsonObj.get("retention").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retention` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retention").toString()));
      }
      if ((jsonObj.get("retentionSize") != null && !jsonObj.get("retentionSize").isJsonNull()) && !jsonObj.get("retentionSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retentionSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retentionSize").toString()));
      }
      if ((jsonObj.get("routePrefix") != null && !jsonObj.get("routePrefix").isJsonNull()) && !jsonObj.get("routePrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routePrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routePrefix").toString()));
      }
      // validate the optional field `ruleNamespaceSelector`
      if (jsonObj.get("ruleNamespaceSelector") != null && !jsonObj.get("ruleNamespaceSelector").isJsonNull()) {
        V1PrometheusSpecRuleNamespaceSelector.validateJsonObject(jsonObj.getAsJsonObject("ruleNamespaceSelector"));
      }
      // validate the optional field `ruleSelector`
      if (jsonObj.get("ruleSelector") != null && !jsonObj.get("ruleSelector").isJsonNull()) {
        V1PrometheusSpecRuleSelector.validateJsonObject(jsonObj.getAsJsonObject("ruleSelector"));
      }
      // validate the optional field `rules`
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        V1PrometheusSpecRules.validateJsonObject(jsonObj.getAsJsonObject("rules"));
      }
      // validate the optional field `scrapeConfigNamespaceSelector`
      if (jsonObj.get("scrapeConfigNamespaceSelector") != null && !jsonObj.get("scrapeConfigNamespaceSelector").isJsonNull()) {
        V1PrometheusSpecScrapeConfigNamespaceSelector.validateJsonObject(jsonObj.getAsJsonObject("scrapeConfigNamespaceSelector"));
      }
      // validate the optional field `scrapeConfigSelector`
      if (jsonObj.get("scrapeConfigSelector") != null && !jsonObj.get("scrapeConfigSelector").isJsonNull()) {
        V1PrometheusSpecScrapeConfigSelector.validateJsonObject(jsonObj.getAsJsonObject("scrapeConfigSelector"));
      }
      if ((jsonObj.get("scrapeInterval") != null && !jsonObj.get("scrapeInterval").isJsonNull()) && !jsonObj.get("scrapeInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scrapeInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scrapeInterval").toString()));
      }
      if ((jsonObj.get("scrapeTimeout") != null && !jsonObj.get("scrapeTimeout").isJsonNull()) && !jsonObj.get("scrapeTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scrapeTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scrapeTimeout").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secrets") != null && !jsonObj.get("secrets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secrets` to be an array in the JSON string but got `%s`", jsonObj.get("secrets").toString()));
      }
      // validate the optional field `securityContext`
      if (jsonObj.get("securityContext") != null && !jsonObj.get("securityContext").isJsonNull()) {
        V1AlertmanagerSpecSecurityContext.validateJsonObject(jsonObj.getAsJsonObject("securityContext"));
      }
      if ((jsonObj.get("serviceAccountName") != null && !jsonObj.get("serviceAccountName").isJsonNull()) && !jsonObj.get("serviceAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccountName").toString()));
      }
      // validate the optional field `serviceMonitorNamespaceSelector`
      if (jsonObj.get("serviceMonitorNamespaceSelector") != null && !jsonObj.get("serviceMonitorNamespaceSelector").isJsonNull()) {
        V1PrometheusSpecServiceMonitorNamespaceSelector.validateJsonObject(jsonObj.getAsJsonObject("serviceMonitorNamespaceSelector"));
      }
      // validate the optional field `serviceMonitorSelector`
      if (jsonObj.get("serviceMonitorSelector") != null && !jsonObj.get("serviceMonitorSelector").isJsonNull()) {
        V1PrometheusSpecServiceMonitorSelector.validateJsonObject(jsonObj.getAsJsonObject("serviceMonitorSelector"));
      }
      if ((jsonObj.get("sha") != null && !jsonObj.get("sha").isJsonNull()) && !jsonObj.get("sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sha").toString()));
      }
      // validate the optional field `storage`
      if (jsonObj.get("storage") != null && !jsonObj.get("storage").isJsonNull()) {
        V1PrometheusSpecStorage.validateJsonObject(jsonObj.getAsJsonObject("storage"));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      // validate the optional field `thanos`
      if (jsonObj.get("thanos") != null && !jsonObj.get("thanos").isJsonNull()) {
        V1PrometheusSpecThanos.validateJsonObject(jsonObj.getAsJsonObject("thanos"));
      }
      if (jsonObj.get("tolerations") != null && !jsonObj.get("tolerations").isJsonNull()) {
        JsonArray jsonArraytolerations = jsonObj.getAsJsonArray("tolerations");
        if (jsonArraytolerations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tolerations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tolerations` to be an array in the JSON string but got `%s`", jsonObj.get("tolerations").toString()));
          }

          // validate the optional field `tolerations` (array)
          for (int i = 0; i < jsonArraytolerations.size(); i++) {
            V1AlertmanagerSpecTolerationsInner.validateJsonObject(jsonArraytolerations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("topologySpreadConstraints") != null && !jsonObj.get("topologySpreadConstraints").isJsonNull()) {
        JsonArray jsonArraytopologySpreadConstraints = jsonObj.getAsJsonArray("topologySpreadConstraints");
        if (jsonArraytopologySpreadConstraints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("topologySpreadConstraints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `topologySpreadConstraints` to be an array in the JSON string but got `%s`", jsonObj.get("topologySpreadConstraints").toString()));
          }

          // validate the optional field `topologySpreadConstraints` (array)
          for (int i = 0; i < jsonArraytopologySpreadConstraints.size(); i++) {
            V1AlertmanagerSpecTopologySpreadConstraintsInner.validateJsonObject(jsonArraytopologySpreadConstraints.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `tsdb`
      if (jsonObj.get("tsdb") != null && !jsonObj.get("tsdb").isJsonNull()) {
        V1PrometheusSpecTsdb.validateJsonObject(jsonObj.getAsJsonObject("tsdb"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (jsonObj.get("volumeMounts") != null && !jsonObj.get("volumeMounts").isJsonNull()) {
        JsonArray jsonArrayvolumeMounts = jsonObj.getAsJsonArray("volumeMounts");
        if (jsonArrayvolumeMounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumeMounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumeMounts` to be an array in the JSON string but got `%s`", jsonObj.get("volumeMounts").toString()));
          }

          // validate the optional field `volumeMounts` (array)
          for (int i = 0; i < jsonArrayvolumeMounts.size(); i++) {
            V1AlertmanagerSpecContainersInnerVolumeMountsInner.validateJsonObject(jsonArrayvolumeMounts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        JsonArray jsonArrayvolumes = jsonObj.getAsJsonArray("volumes");
        if (jsonArrayvolumes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumes` to be an array in the JSON string but got `%s`", jsonObj.get("volumes").toString()));
          }

          // validate the optional field `volumes` (array)
          for (int i = 0; i < jsonArrayvolumes.size(); i++) {
            V1AlertmanagerSpecVolumesInner.validateJsonObject(jsonArrayvolumes.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `web`
      if (jsonObj.get("web") != null && !jsonObj.get("web").isJsonNull()) {
        V1PrometheusSpecWeb.validateJsonObject(jsonObj.getAsJsonObject("web"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1PrometheusSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1PrometheusSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1PrometheusSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1PrometheusSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<V1PrometheusSpec>() {
           @Override
           public void write(JsonWriter out, V1PrometheusSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1PrometheusSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1PrometheusSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1PrometheusSpec
  * @throws IOException if the JSON string is invalid with respect to V1PrometheusSpec
  */
  public static V1PrometheusSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1PrometheusSpec.class);
  }

 /**
  * Convert an instance of V1PrometheusSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

