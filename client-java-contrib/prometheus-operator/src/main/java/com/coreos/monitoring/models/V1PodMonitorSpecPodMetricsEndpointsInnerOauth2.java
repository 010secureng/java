/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.coreos.monitoring.models.V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientId;
import com.coreos.monitoring.models.V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientSecret;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 {
  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientId clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "clientSecret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientSecret clientSecret;

  public static final String SERIALIZED_NAME_ENDPOINT_PARAMS = "endpointParams";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_PARAMS)
  private Map<String, String> endpointParams = new HashMap<>();

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<String> scopes;

  public static final String SERIALIZED_NAME_TOKEN_URL = "tokenUrl";
  @SerializedName(SERIALIZED_NAME_TOKEN_URL)
  private String tokenUrl;

  public V1PodMonitorSpecPodMetricsEndpointsInnerOauth2() {
  }

  public V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 clientId(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientId clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * Get clientId
   * @return clientId
  **/
  @jakarta.annotation.Nonnull
  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientId getClientId() {
    return clientId;
  }


  public void setClientId(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientId clientId) {
    this.clientId = clientId;
  }


  public V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 clientSecret(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientSecret clientSecret) {
    
    this.clientSecret = clientSecret;
    return this;
  }

   /**
   * Get clientSecret
   * @return clientSecret
  **/
  @jakarta.annotation.Nonnull
  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientSecret getClientSecret() {
    return clientSecret;
  }


  public void setClientSecret(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientSecret clientSecret) {
    this.clientSecret = clientSecret;
  }


  public V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 endpointParams(Map<String, String> endpointParams) {
    
    this.endpointParams = endpointParams;
    return this;
  }

  public V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 putEndpointParamsItem(String key, String endpointParamsItem) {
    if (this.endpointParams == null) {
      this.endpointParams = new HashMap<>();
    }
    this.endpointParams.put(key, endpointParamsItem);
    return this;
  }

   /**
   * Parameters to append to the token URL
   * @return endpointParams
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getEndpointParams() {
    return endpointParams;
  }


  public void setEndpointParams(Map<String, String> endpointParams) {
    this.endpointParams = endpointParams;
  }


  public V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 scopes(List<String> scopes) {
    
    this.scopes = scopes;
    return this;
  }

  public V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

   /**
   * OAuth2 scopes used for the token request
   * @return scopes
  **/
  @jakarta.annotation.Nullable
  public List<String> getScopes() {
    return scopes;
  }


  public void setScopes(List<String> scopes) {
    this.scopes = scopes;
  }


  public V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 tokenUrl(String tokenUrl) {
    
    this.tokenUrl = tokenUrl;
    return this;
  }

   /**
   * The URL to fetch the token from
   * @return tokenUrl
  **/
  @jakarta.annotation.Nonnull
  public String getTokenUrl() {
    return tokenUrl;
  }


  public void setTokenUrl(String tokenUrl) {
    this.tokenUrl = tokenUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 v1PodMonitorSpecPodMetricsEndpointsInnerOauth2 = (V1PodMonitorSpecPodMetricsEndpointsInnerOauth2) o;
    return Objects.equals(this.clientId, v1PodMonitorSpecPodMetricsEndpointsInnerOauth2.clientId) &&
        Objects.equals(this.clientSecret, v1PodMonitorSpecPodMetricsEndpointsInnerOauth2.clientSecret) &&
        Objects.equals(this.endpointParams, v1PodMonitorSpecPodMetricsEndpointsInnerOauth2.endpointParams) &&
        Objects.equals(this.scopes, v1PodMonitorSpecPodMetricsEndpointsInnerOauth2.scopes) &&
        Objects.equals(this.tokenUrl, v1PodMonitorSpecPodMetricsEndpointsInnerOauth2.tokenUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, clientSecret, endpointParams, scopes, tokenUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    endpointParams: ").append(toIndentedString(endpointParams)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    tokenUrl: ").append(toIndentedString(tokenUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientId");
    openapiFields.add("clientSecret");
    openapiFields.add("endpointParams");
    openapiFields.add("scopes");
    openapiFields.add("tokenUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clientId");
    openapiRequiredFields.add("clientSecret");
    openapiRequiredFields.add("tokenUrl");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1PodMonitorSpecPodMetricsEndpointsInnerOauth2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1PodMonitorSpecPodMetricsEndpointsInnerOauth2.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 is not found in the empty JSON string", V1PodMonitorSpecPodMetricsEndpointsInnerOauth2.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1PodMonitorSpecPodMetricsEndpointsInnerOauth2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1PodMonitorSpecPodMetricsEndpointsInnerOauth2` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1PodMonitorSpecPodMetricsEndpointsInnerOauth2.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `clientId`
      V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientId.validateJsonObject(jsonObj.getAsJsonObject("clientId"));
      // validate the required field `clientSecret`
      V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientSecret.validateJsonObject(jsonObj.getAsJsonObject("clientSecret"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
      if (!jsonObj.get("tokenUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1PodMonitorSpecPodMetricsEndpointsInnerOauth2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1PodMonitorSpecPodMetricsEndpointsInnerOauth2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1PodMonitorSpecPodMetricsEndpointsInnerOauth2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1PodMonitorSpecPodMetricsEndpointsInnerOauth2.class));

       return (TypeAdapter<T>) new TypeAdapter<V1PodMonitorSpecPodMetricsEndpointsInnerOauth2>() {
           @Override
           public void write(JsonWriter out, V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1PodMonitorSpecPodMetricsEndpointsInnerOauth2
  * @throws IOException if the JSON string is invalid with respect to V1PodMonitorSpecPodMetricsEndpointsInnerOauth2
  */
  public static V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1PodMonitorSpecPodMetricsEndpointsInnerOauth2.class);
  }

 /**
  * Convert an instance of V1PodMonitorSpecPodMetricsEndpointsInnerOauth2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

