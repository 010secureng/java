/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.coreos.monitoring.models.V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization;
import com.coreos.monitoring.models.V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBasicAuth;
import com.coreos.monitoring.models.V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBearerTokenSecret;
import com.coreos.monitoring.models.V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2;
import com.coreos.monitoring.models.V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfig;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * HTTP client configuration.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig {
  public static final String SERIALIZED_NAME_AUTHORIZATION = "authorization";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION)
  private V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization authorization;

  public static final String SERIALIZED_NAME_BASIC_AUTH = "basicAuth";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH)
  private V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBasicAuth basicAuth;

  public static final String SERIALIZED_NAME_BEARER_TOKEN_SECRET = "bearerTokenSecret";
  @SerializedName(SERIALIZED_NAME_BEARER_TOKEN_SECRET)
  private V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBearerTokenSecret bearerTokenSecret;

  public static final String SERIALIZED_NAME_FOLLOW_REDIRECTS = "followRedirects";
  @SerializedName(SERIALIZED_NAME_FOLLOW_REDIRECTS)
  private Boolean followRedirects;

  public static final String SERIALIZED_NAME_OAUTH2 = "oauth2";
  @SerializedName(SERIALIZED_NAME_OAUTH2)
  private V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2 oauth2;

  public static final String SERIALIZED_NAME_PROXY_U_R_L = "proxyURL";
  @SerializedName(SERIALIZED_NAME_PROXY_U_R_L)
  private String proxyURL;

  public static final String SERIALIZED_NAME_TLS_CONFIG = "tlsConfig";
  @SerializedName(SERIALIZED_NAME_TLS_CONFIG)
  private V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfig tlsConfig;

  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig() {
  }

  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig authorization(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization authorization) {
    
    this.authorization = authorization;
    return this;
  }

   /**
   * Get authorization
   * @return authorization
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization getAuthorization() {
    return authorization;
  }


  public void setAuthorization(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization authorization) {
    this.authorization = authorization;
  }


  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig basicAuth(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBasicAuth basicAuth) {
    
    this.basicAuth = basicAuth;
    return this;
  }

   /**
   * Get basicAuth
   * @return basicAuth
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBasicAuth getBasicAuth() {
    return basicAuth;
  }


  public void setBasicAuth(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBasicAuth basicAuth) {
    this.basicAuth = basicAuth;
  }


  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig bearerTokenSecret(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBearerTokenSecret bearerTokenSecret) {
    
    this.bearerTokenSecret = bearerTokenSecret;
    return this;
  }

   /**
   * Get bearerTokenSecret
   * @return bearerTokenSecret
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBearerTokenSecret getBearerTokenSecret() {
    return bearerTokenSecret;
  }


  public void setBearerTokenSecret(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBearerTokenSecret bearerTokenSecret) {
    this.bearerTokenSecret = bearerTokenSecret;
  }


  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig followRedirects(Boolean followRedirects) {
    
    this.followRedirects = followRedirects;
    return this;
  }

   /**
   * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
   * @return followRedirects
  **/
  @jakarta.annotation.Nullable
  public Boolean getFollowRedirects() {
    return followRedirects;
  }


  public void setFollowRedirects(Boolean followRedirects) {
    this.followRedirects = followRedirects;
  }


  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig oauth2(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2 oauth2) {
    
    this.oauth2 = oauth2;
    return this;
  }

   /**
   * Get oauth2
   * @return oauth2
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2 getOauth2() {
    return oauth2;
  }


  public void setOauth2(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2 oauth2) {
    this.oauth2 = oauth2;
  }


  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig proxyURL(String proxyURL) {
    
    this.proxyURL = proxyURL;
    return this;
  }

   /**
   * Optional proxy URL.
   * @return proxyURL
  **/
  @jakarta.annotation.Nullable
  public String getProxyURL() {
    return proxyURL;
  }


  public void setProxyURL(String proxyURL) {
    this.proxyURL = proxyURL;
  }


  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig tlsConfig(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfig tlsConfig) {
    
    this.tlsConfig = tlsConfig;
    return this;
  }

   /**
   * Get tlsConfig
   * @return tlsConfig
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfig getTlsConfig() {
    return tlsConfig;
  }


  public void setTlsConfig(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfig tlsConfig) {
    this.tlsConfig = tlsConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig v1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig = (V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig) o;
    return Objects.equals(this.authorization, v1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig.authorization) &&
        Objects.equals(this.basicAuth, v1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig.basicAuth) &&
        Objects.equals(this.bearerTokenSecret, v1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig.bearerTokenSecret) &&
        Objects.equals(this.followRedirects, v1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig.followRedirects) &&
        Objects.equals(this.oauth2, v1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig.oauth2) &&
        Objects.equals(this.proxyURL, v1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig.proxyURL) &&
        Objects.equals(this.tlsConfig, v1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig.tlsConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorization, basicAuth, bearerTokenSecret, followRedirects, oauth2, proxyURL, tlsConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig {\n");
    sb.append("    authorization: ").append(toIndentedString(authorization)).append("\n");
    sb.append("    basicAuth: ").append(toIndentedString(basicAuth)).append("\n");
    sb.append("    bearerTokenSecret: ").append(toIndentedString(bearerTokenSecret)).append("\n");
    sb.append("    followRedirects: ").append(toIndentedString(followRedirects)).append("\n");
    sb.append("    oauth2: ").append(toIndentedString(oauth2)).append("\n");
    sb.append("    proxyURL: ").append(toIndentedString(proxyURL)).append("\n");
    sb.append("    tlsConfig: ").append(toIndentedString(tlsConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorization");
    openapiFields.add("basicAuth");
    openapiFields.add("bearerTokenSecret");
    openapiFields.add("followRedirects");
    openapiFields.add("oauth2");
    openapiFields.add("proxyURL");
    openapiFields.add("tlsConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig is not found in the empty JSON string", V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `authorization`
      if (jsonObj.get("authorization") != null && !jsonObj.get("authorization").isJsonNull()) {
        V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization.validateJsonObject(jsonObj.getAsJsonObject("authorization"));
      }
      // validate the optional field `basicAuth`
      if (jsonObj.get("basicAuth") != null && !jsonObj.get("basicAuth").isJsonNull()) {
        V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBasicAuth.validateJsonObject(jsonObj.getAsJsonObject("basicAuth"));
      }
      // validate the optional field `bearerTokenSecret`
      if (jsonObj.get("bearerTokenSecret") != null && !jsonObj.get("bearerTokenSecret").isJsonNull()) {
        V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBearerTokenSecret.validateJsonObject(jsonObj.getAsJsonObject("bearerTokenSecret"));
      }
      // validate the optional field `oauth2`
      if (jsonObj.get("oauth2") != null && !jsonObj.get("oauth2").isJsonNull()) {
        V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2.validateJsonObject(jsonObj.getAsJsonObject("oauth2"));
      }
      if ((jsonObj.get("proxyURL") != null && !jsonObj.get("proxyURL").isJsonNull()) && !jsonObj.get("proxyURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxyURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxyURL").toString()));
      }
      // validate the optional field `tlsConfig`
      if (jsonObj.get("tlsConfig") != null && !jsonObj.get("tlsConfig").isJsonNull()) {
        V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfig.validateJsonObject(jsonObj.getAsJsonObject("tlsConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig>() {
           @Override
           public void write(JsonWriter out, V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig
  * @throws IOException if the JSON string is invalid with respect to V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig
  */
  public static V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig.class);
  }

 /**
  * Convert an instance of V1AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

