/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.coreos.monitoring.models.V1AlertmanagerSpecWebTlsConfigCert;
import com.coreos.monitoring.models.V1AlertmanagerSpecWebTlsConfigClientCa;
import com.coreos.monitoring.models.V1AlertmanagerSpecWebTlsConfigKeySecret;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Defines the TLS parameters for HTTPS.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1AlertmanagerSpecWebTlsConfig {
  public static final String SERIALIZED_NAME_CERT = "cert";
  @SerializedName(SERIALIZED_NAME_CERT)
  private V1AlertmanagerSpecWebTlsConfigCert cert;

  public static final String SERIALIZED_NAME_CIPHER_SUITES = "cipherSuites";
  @SerializedName(SERIALIZED_NAME_CIPHER_SUITES)
  private List<String> cipherSuites;

  public static final String SERIALIZED_NAME_CLIENT_AUTH_TYPE = "clientAuthType";
  @SerializedName(SERIALIZED_NAME_CLIENT_AUTH_TYPE)
  private String clientAuthType;

  public static final String SERIALIZED_NAME_CLIENT_CA = "client_ca";
  @SerializedName(SERIALIZED_NAME_CLIENT_CA)
  private V1AlertmanagerSpecWebTlsConfigClientCa clientCa;

  public static final String SERIALIZED_NAME_CURVE_PREFERENCES = "curvePreferences";
  @SerializedName(SERIALIZED_NAME_CURVE_PREFERENCES)
  private List<String> curvePreferences;

  public static final String SERIALIZED_NAME_KEY_SECRET = "keySecret";
  @SerializedName(SERIALIZED_NAME_KEY_SECRET)
  private V1AlertmanagerSpecWebTlsConfigKeySecret keySecret;

  public static final String SERIALIZED_NAME_MAX_VERSION = "maxVersion";
  @SerializedName(SERIALIZED_NAME_MAX_VERSION)
  private String maxVersion;

  public static final String SERIALIZED_NAME_MIN_VERSION = "minVersion";
  @SerializedName(SERIALIZED_NAME_MIN_VERSION)
  private String minVersion;

  public static final String SERIALIZED_NAME_PREFER_SERVER_CIPHER_SUITES = "preferServerCipherSuites";
  @SerializedName(SERIALIZED_NAME_PREFER_SERVER_CIPHER_SUITES)
  private Boolean preferServerCipherSuites;

  public V1AlertmanagerSpecWebTlsConfig() {
  }

  public V1AlertmanagerSpecWebTlsConfig cert(V1AlertmanagerSpecWebTlsConfigCert cert) {
    
    this.cert = cert;
    return this;
  }

   /**
   * Get cert
   * @return cert
  **/
  @jakarta.annotation.Nonnull
  public V1AlertmanagerSpecWebTlsConfigCert getCert() {
    return cert;
  }


  public void setCert(V1AlertmanagerSpecWebTlsConfigCert cert) {
    this.cert = cert;
  }


  public V1AlertmanagerSpecWebTlsConfig cipherSuites(List<String> cipherSuites) {
    
    this.cipherSuites = cipherSuites;
    return this;
  }

  public V1AlertmanagerSpecWebTlsConfig addCipherSuitesItem(String cipherSuitesItem) {
    if (this.cipherSuites == null) {
      this.cipherSuites = new ArrayList<>();
    }
    this.cipherSuites.add(cipherSuitesItem);
    return this;
  }

   /**
   * List of supported cipher suites for TLS versions up to TLS 1.2. If empty, Go default cipher suites are used. Available cipher suites are documented in the go documentation: https://golang.org/pkg/crypto/tls/#pkg-constants
   * @return cipherSuites
  **/
  @jakarta.annotation.Nullable
  public List<String> getCipherSuites() {
    return cipherSuites;
  }


  public void setCipherSuites(List<String> cipherSuites) {
    this.cipherSuites = cipherSuites;
  }


  public V1AlertmanagerSpecWebTlsConfig clientAuthType(String clientAuthType) {
    
    this.clientAuthType = clientAuthType;
    return this;
  }

   /**
   * Server policy for client authentication. Maps to ClientAuth Policies. For more detail on clientAuth options: https://golang.org/pkg/crypto/tls/#ClientAuthType
   * @return clientAuthType
  **/
  @jakarta.annotation.Nullable
  public String getClientAuthType() {
    return clientAuthType;
  }


  public void setClientAuthType(String clientAuthType) {
    this.clientAuthType = clientAuthType;
  }


  public V1AlertmanagerSpecWebTlsConfig clientCa(V1AlertmanagerSpecWebTlsConfigClientCa clientCa) {
    
    this.clientCa = clientCa;
    return this;
  }

   /**
   * Get clientCa
   * @return clientCa
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecWebTlsConfigClientCa getClientCa() {
    return clientCa;
  }


  public void setClientCa(V1AlertmanagerSpecWebTlsConfigClientCa clientCa) {
    this.clientCa = clientCa;
  }


  public V1AlertmanagerSpecWebTlsConfig curvePreferences(List<String> curvePreferences) {
    
    this.curvePreferences = curvePreferences;
    return this;
  }

  public V1AlertmanagerSpecWebTlsConfig addCurvePreferencesItem(String curvePreferencesItem) {
    if (this.curvePreferences == null) {
      this.curvePreferences = new ArrayList<>();
    }
    this.curvePreferences.add(curvePreferencesItem);
    return this;
  }

   /**
   * Elliptic curves that will be used in an ECDHE handshake, in preference order. Available curves are documented in the go documentation: https://golang.org/pkg/crypto/tls/#CurveID
   * @return curvePreferences
  **/
  @jakarta.annotation.Nullable
  public List<String> getCurvePreferences() {
    return curvePreferences;
  }


  public void setCurvePreferences(List<String> curvePreferences) {
    this.curvePreferences = curvePreferences;
  }


  public V1AlertmanagerSpecWebTlsConfig keySecret(V1AlertmanagerSpecWebTlsConfigKeySecret keySecret) {
    
    this.keySecret = keySecret;
    return this;
  }

   /**
   * Get keySecret
   * @return keySecret
  **/
  @jakarta.annotation.Nonnull
  public V1AlertmanagerSpecWebTlsConfigKeySecret getKeySecret() {
    return keySecret;
  }


  public void setKeySecret(V1AlertmanagerSpecWebTlsConfigKeySecret keySecret) {
    this.keySecret = keySecret;
  }


  public V1AlertmanagerSpecWebTlsConfig maxVersion(String maxVersion) {
    
    this.maxVersion = maxVersion;
    return this;
  }

   /**
   * Maximum TLS version that is acceptable. Defaults to TLS13.
   * @return maxVersion
  **/
  @jakarta.annotation.Nullable
  public String getMaxVersion() {
    return maxVersion;
  }


  public void setMaxVersion(String maxVersion) {
    this.maxVersion = maxVersion;
  }


  public V1AlertmanagerSpecWebTlsConfig minVersion(String minVersion) {
    
    this.minVersion = minVersion;
    return this;
  }

   /**
   * Minimum TLS version that is acceptable. Defaults to TLS12.
   * @return minVersion
  **/
  @jakarta.annotation.Nullable
  public String getMinVersion() {
    return minVersion;
  }


  public void setMinVersion(String minVersion) {
    this.minVersion = minVersion;
  }


  public V1AlertmanagerSpecWebTlsConfig preferServerCipherSuites(Boolean preferServerCipherSuites) {
    
    this.preferServerCipherSuites = preferServerCipherSuites;
    return this;
  }

   /**
   * Controls whether the server selects the client&#39;s most preferred cipher suite, or the server&#39;s most preferred cipher suite. If true then the server&#39;s preference, as expressed in the order of elements in cipherSuites, is used.
   * @return preferServerCipherSuites
  **/
  @jakarta.annotation.Nullable
  public Boolean getPreferServerCipherSuites() {
    return preferServerCipherSuites;
  }


  public void setPreferServerCipherSuites(Boolean preferServerCipherSuites) {
    this.preferServerCipherSuites = preferServerCipherSuites;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1AlertmanagerSpecWebTlsConfig v1AlertmanagerSpecWebTlsConfig = (V1AlertmanagerSpecWebTlsConfig) o;
    return Objects.equals(this.cert, v1AlertmanagerSpecWebTlsConfig.cert) &&
        Objects.equals(this.cipherSuites, v1AlertmanagerSpecWebTlsConfig.cipherSuites) &&
        Objects.equals(this.clientAuthType, v1AlertmanagerSpecWebTlsConfig.clientAuthType) &&
        Objects.equals(this.clientCa, v1AlertmanagerSpecWebTlsConfig.clientCa) &&
        Objects.equals(this.curvePreferences, v1AlertmanagerSpecWebTlsConfig.curvePreferences) &&
        Objects.equals(this.keySecret, v1AlertmanagerSpecWebTlsConfig.keySecret) &&
        Objects.equals(this.maxVersion, v1AlertmanagerSpecWebTlsConfig.maxVersion) &&
        Objects.equals(this.minVersion, v1AlertmanagerSpecWebTlsConfig.minVersion) &&
        Objects.equals(this.preferServerCipherSuites, v1AlertmanagerSpecWebTlsConfig.preferServerCipherSuites);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cert, cipherSuites, clientAuthType, clientCa, curvePreferences, keySecret, maxVersion, minVersion, preferServerCipherSuites);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1AlertmanagerSpecWebTlsConfig {\n");
    sb.append("    cert: ").append(toIndentedString(cert)).append("\n");
    sb.append("    cipherSuites: ").append(toIndentedString(cipherSuites)).append("\n");
    sb.append("    clientAuthType: ").append(toIndentedString(clientAuthType)).append("\n");
    sb.append("    clientCa: ").append(toIndentedString(clientCa)).append("\n");
    sb.append("    curvePreferences: ").append(toIndentedString(curvePreferences)).append("\n");
    sb.append("    keySecret: ").append(toIndentedString(keySecret)).append("\n");
    sb.append("    maxVersion: ").append(toIndentedString(maxVersion)).append("\n");
    sb.append("    minVersion: ").append(toIndentedString(minVersion)).append("\n");
    sb.append("    preferServerCipherSuites: ").append(toIndentedString(preferServerCipherSuites)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cert");
    openapiFields.add("cipherSuites");
    openapiFields.add("clientAuthType");
    openapiFields.add("client_ca");
    openapiFields.add("curvePreferences");
    openapiFields.add("keySecret");
    openapiFields.add("maxVersion");
    openapiFields.add("minVersion");
    openapiFields.add("preferServerCipherSuites");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cert");
    openapiRequiredFields.add("keySecret");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1AlertmanagerSpecWebTlsConfig
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1AlertmanagerSpecWebTlsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1AlertmanagerSpecWebTlsConfig is not found in the empty JSON string", V1AlertmanagerSpecWebTlsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1AlertmanagerSpecWebTlsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1AlertmanagerSpecWebTlsConfig` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1AlertmanagerSpecWebTlsConfig.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `cert`
      V1AlertmanagerSpecWebTlsConfigCert.validateJsonObject(jsonObj.getAsJsonObject("cert"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("cipherSuites") != null && !jsonObj.get("cipherSuites").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cipherSuites` to be an array in the JSON string but got `%s`", jsonObj.get("cipherSuites").toString()));
      }
      if ((jsonObj.get("clientAuthType") != null && !jsonObj.get("clientAuthType").isJsonNull()) && !jsonObj.get("clientAuthType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientAuthType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientAuthType").toString()));
      }
      // validate the optional field `client_ca`
      if (jsonObj.get("client_ca") != null && !jsonObj.get("client_ca").isJsonNull()) {
        V1AlertmanagerSpecWebTlsConfigClientCa.validateJsonObject(jsonObj.getAsJsonObject("client_ca"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("curvePreferences") != null && !jsonObj.get("curvePreferences").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `curvePreferences` to be an array in the JSON string but got `%s`", jsonObj.get("curvePreferences").toString()));
      }
      // validate the required field `keySecret`
      V1AlertmanagerSpecWebTlsConfigKeySecret.validateJsonObject(jsonObj.getAsJsonObject("keySecret"));
      if ((jsonObj.get("maxVersion") != null && !jsonObj.get("maxVersion").isJsonNull()) && !jsonObj.get("maxVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxVersion").toString()));
      }
      if ((jsonObj.get("minVersion") != null && !jsonObj.get("minVersion").isJsonNull()) && !jsonObj.get("minVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1AlertmanagerSpecWebTlsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1AlertmanagerSpecWebTlsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1AlertmanagerSpecWebTlsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1AlertmanagerSpecWebTlsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<V1AlertmanagerSpecWebTlsConfig>() {
           @Override
           public void write(JsonWriter out, V1AlertmanagerSpecWebTlsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1AlertmanagerSpecWebTlsConfig read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1AlertmanagerSpecWebTlsConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1AlertmanagerSpecWebTlsConfig
  * @throws IOException if the JSON string is invalid with respect to V1AlertmanagerSpecWebTlsConfig
  */
  public static V1AlertmanagerSpecWebTlsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1AlertmanagerSpecWebTlsConfig.class);
  }

 /**
  * Convert an instance of V1AlertmanagerSpecWebTlsConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

