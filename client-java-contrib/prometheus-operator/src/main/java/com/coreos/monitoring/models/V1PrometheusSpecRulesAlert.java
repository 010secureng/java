/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * /--rules.alert.*_/ command-line arguments
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1PrometheusSpecRulesAlert {
  public static final String SERIALIZED_NAME_FOR_GRACE_PERIOD = "forGracePeriod";
  @SerializedName(SERIALIZED_NAME_FOR_GRACE_PERIOD)
  private String forGracePeriod;

  public static final String SERIALIZED_NAME_FOR_OUTAGE_TOLERANCE = "forOutageTolerance";
  @SerializedName(SERIALIZED_NAME_FOR_OUTAGE_TOLERANCE)
  private String forOutageTolerance;

  public static final String SERIALIZED_NAME_RESEND_DELAY = "resendDelay";
  @SerializedName(SERIALIZED_NAME_RESEND_DELAY)
  private String resendDelay;

  public V1PrometheusSpecRulesAlert() {
  }

  public V1PrometheusSpecRulesAlert forGracePeriod(String forGracePeriod) {
    
    this.forGracePeriod = forGracePeriod;
    return this;
  }

   /**
   * Minimum duration between alert and restored &#39;for&#39; state. This is maintained only for alerts with configured &#39;for&#39; time greater than grace period.
   * @return forGracePeriod
  **/
  @jakarta.annotation.Nullable
  public String getForGracePeriod() {
    return forGracePeriod;
  }


  public void setForGracePeriod(String forGracePeriod) {
    this.forGracePeriod = forGracePeriod;
  }


  public V1PrometheusSpecRulesAlert forOutageTolerance(String forOutageTolerance) {
    
    this.forOutageTolerance = forOutageTolerance;
    return this;
  }

   /**
   * Max time to tolerate prometheus outage for restoring &#39;for&#39; state of alert.
   * @return forOutageTolerance
  **/
  @jakarta.annotation.Nullable
  public String getForOutageTolerance() {
    return forOutageTolerance;
  }


  public void setForOutageTolerance(String forOutageTolerance) {
    this.forOutageTolerance = forOutageTolerance;
  }


  public V1PrometheusSpecRulesAlert resendDelay(String resendDelay) {
    
    this.resendDelay = resendDelay;
    return this;
  }

   /**
   * Minimum amount of time to wait before resending an alert to Alertmanager.
   * @return resendDelay
  **/
  @jakarta.annotation.Nullable
  public String getResendDelay() {
    return resendDelay;
  }


  public void setResendDelay(String resendDelay) {
    this.resendDelay = resendDelay;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PrometheusSpecRulesAlert v1PrometheusSpecRulesAlert = (V1PrometheusSpecRulesAlert) o;
    return Objects.equals(this.forGracePeriod, v1PrometheusSpecRulesAlert.forGracePeriod) &&
        Objects.equals(this.forOutageTolerance, v1PrometheusSpecRulesAlert.forOutageTolerance) &&
        Objects.equals(this.resendDelay, v1PrometheusSpecRulesAlert.resendDelay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forGracePeriod, forOutageTolerance, resendDelay);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PrometheusSpecRulesAlert {\n");
    sb.append("    forGracePeriod: ").append(toIndentedString(forGracePeriod)).append("\n");
    sb.append("    forOutageTolerance: ").append(toIndentedString(forOutageTolerance)).append("\n");
    sb.append("    resendDelay: ").append(toIndentedString(resendDelay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("forGracePeriod");
    openapiFields.add("forOutageTolerance");
    openapiFields.add("resendDelay");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1PrometheusSpecRulesAlert
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1PrometheusSpecRulesAlert.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1PrometheusSpecRulesAlert is not found in the empty JSON string", V1PrometheusSpecRulesAlert.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1PrometheusSpecRulesAlert.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1PrometheusSpecRulesAlert` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("forGracePeriod") != null && !jsonObj.get("forGracePeriod").isJsonNull()) && !jsonObj.get("forGracePeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forGracePeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forGracePeriod").toString()));
      }
      if ((jsonObj.get("forOutageTolerance") != null && !jsonObj.get("forOutageTolerance").isJsonNull()) && !jsonObj.get("forOutageTolerance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forOutageTolerance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forOutageTolerance").toString()));
      }
      if ((jsonObj.get("resendDelay") != null && !jsonObj.get("resendDelay").isJsonNull()) && !jsonObj.get("resendDelay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resendDelay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resendDelay").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1PrometheusSpecRulesAlert.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1PrometheusSpecRulesAlert' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1PrometheusSpecRulesAlert> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1PrometheusSpecRulesAlert.class));

       return (TypeAdapter<T>) new TypeAdapter<V1PrometheusSpecRulesAlert>() {
           @Override
           public void write(JsonWriter out, V1PrometheusSpecRulesAlert value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1PrometheusSpecRulesAlert read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1PrometheusSpecRulesAlert given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1PrometheusSpecRulesAlert
  * @throws IOException if the JSON string is invalid with respect to V1PrometheusSpecRulesAlert
  */
  public static V1PrometheusSpecRulesAlert fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1PrometheusSpecRulesAlert.class);
  }

 /**
  * Convert an instance of V1PrometheusSpecRulesAlert to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

