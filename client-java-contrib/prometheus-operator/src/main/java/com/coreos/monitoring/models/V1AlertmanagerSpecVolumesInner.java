/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerAwsElasticBlockStore;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerAzureDisk;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerAzureFile;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerCephfs;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerCinder;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerConfigMap;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerCsi;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerDownwardAPI;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerEmptyDir;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerEphemeral;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerFc;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerFlexVolume;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerFlocker;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerGcePersistentDisk;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerGitRepo;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerGlusterfs;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerHostPath;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerIscsi;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerNfs;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerPersistentVolumeClaim;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerPhotonPersistentDisk;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerPortworxVolume;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerProjected;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerQuobyte;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerRbd;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerScaleIO;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerSecret;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerStorageos;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInnerVsphereVolume;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Volume represents a named volume in a pod that may be accessed by any container in the pod.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1AlertmanagerSpecVolumesInner {
  public static final String SERIALIZED_NAME_AWS_ELASTIC_BLOCK_STORE = "awsElasticBlockStore";
  @SerializedName(SERIALIZED_NAME_AWS_ELASTIC_BLOCK_STORE)
  private V1AlertmanagerSpecVolumesInnerAwsElasticBlockStore awsElasticBlockStore;

  public static final String SERIALIZED_NAME_AZURE_DISK = "azureDisk";
  @SerializedName(SERIALIZED_NAME_AZURE_DISK)
  private V1AlertmanagerSpecVolumesInnerAzureDisk azureDisk;

  public static final String SERIALIZED_NAME_AZURE_FILE = "azureFile";
  @SerializedName(SERIALIZED_NAME_AZURE_FILE)
  private V1AlertmanagerSpecVolumesInnerAzureFile azureFile;

  public static final String SERIALIZED_NAME_CEPHFS = "cephfs";
  @SerializedName(SERIALIZED_NAME_CEPHFS)
  private V1AlertmanagerSpecVolumesInnerCephfs cephfs;

  public static final String SERIALIZED_NAME_CINDER = "cinder";
  @SerializedName(SERIALIZED_NAME_CINDER)
  private V1AlertmanagerSpecVolumesInnerCinder cinder;

  public static final String SERIALIZED_NAME_CONFIG_MAP = "configMap";
  @SerializedName(SERIALIZED_NAME_CONFIG_MAP)
  private V1AlertmanagerSpecVolumesInnerConfigMap configMap;

  public static final String SERIALIZED_NAME_CSI = "csi";
  @SerializedName(SERIALIZED_NAME_CSI)
  private V1AlertmanagerSpecVolumesInnerCsi csi;

  public static final String SERIALIZED_NAME_DOWNWARD_A_P_I = "downwardAPI";
  @SerializedName(SERIALIZED_NAME_DOWNWARD_A_P_I)
  private V1AlertmanagerSpecVolumesInnerDownwardAPI downwardAPI;

  public static final String SERIALIZED_NAME_EMPTY_DIR = "emptyDir";
  @SerializedName(SERIALIZED_NAME_EMPTY_DIR)
  private V1AlertmanagerSpecVolumesInnerEmptyDir emptyDir;

  public static final String SERIALIZED_NAME_EPHEMERAL = "ephemeral";
  @SerializedName(SERIALIZED_NAME_EPHEMERAL)
  private V1AlertmanagerSpecVolumesInnerEphemeral ephemeral;

  public static final String SERIALIZED_NAME_FC = "fc";
  @SerializedName(SERIALIZED_NAME_FC)
  private V1AlertmanagerSpecVolumesInnerFc fc;

  public static final String SERIALIZED_NAME_FLEX_VOLUME = "flexVolume";
  @SerializedName(SERIALIZED_NAME_FLEX_VOLUME)
  private V1AlertmanagerSpecVolumesInnerFlexVolume flexVolume;

  public static final String SERIALIZED_NAME_FLOCKER = "flocker";
  @SerializedName(SERIALIZED_NAME_FLOCKER)
  private V1AlertmanagerSpecVolumesInnerFlocker flocker;

  public static final String SERIALIZED_NAME_GCE_PERSISTENT_DISK = "gcePersistentDisk";
  @SerializedName(SERIALIZED_NAME_GCE_PERSISTENT_DISK)
  private V1AlertmanagerSpecVolumesInnerGcePersistentDisk gcePersistentDisk;

  public static final String SERIALIZED_NAME_GIT_REPO = "gitRepo";
  @SerializedName(SERIALIZED_NAME_GIT_REPO)
  private V1AlertmanagerSpecVolumesInnerGitRepo gitRepo;

  public static final String SERIALIZED_NAME_GLUSTERFS = "glusterfs";
  @SerializedName(SERIALIZED_NAME_GLUSTERFS)
  private V1AlertmanagerSpecVolumesInnerGlusterfs glusterfs;

  public static final String SERIALIZED_NAME_HOST_PATH = "hostPath";
  @SerializedName(SERIALIZED_NAME_HOST_PATH)
  private V1AlertmanagerSpecVolumesInnerHostPath hostPath;

  public static final String SERIALIZED_NAME_ISCSI = "iscsi";
  @SerializedName(SERIALIZED_NAME_ISCSI)
  private V1AlertmanagerSpecVolumesInnerIscsi iscsi;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NFS = "nfs";
  @SerializedName(SERIALIZED_NAME_NFS)
  private V1AlertmanagerSpecVolumesInnerNfs nfs;

  public static final String SERIALIZED_NAME_PERSISTENT_VOLUME_CLAIM = "persistentVolumeClaim";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_VOLUME_CLAIM)
  private V1AlertmanagerSpecVolumesInnerPersistentVolumeClaim persistentVolumeClaim;

  public static final String SERIALIZED_NAME_PHOTON_PERSISTENT_DISK = "photonPersistentDisk";
  @SerializedName(SERIALIZED_NAME_PHOTON_PERSISTENT_DISK)
  private V1AlertmanagerSpecVolumesInnerPhotonPersistentDisk photonPersistentDisk;

  public static final String SERIALIZED_NAME_PORTWORX_VOLUME = "portworxVolume";
  @SerializedName(SERIALIZED_NAME_PORTWORX_VOLUME)
  private V1AlertmanagerSpecVolumesInnerPortworxVolume portworxVolume;

  public static final String SERIALIZED_NAME_PROJECTED = "projected";
  @SerializedName(SERIALIZED_NAME_PROJECTED)
  private V1AlertmanagerSpecVolumesInnerProjected projected;

  public static final String SERIALIZED_NAME_QUOBYTE = "quobyte";
  @SerializedName(SERIALIZED_NAME_QUOBYTE)
  private V1AlertmanagerSpecVolumesInnerQuobyte quobyte;

  public static final String SERIALIZED_NAME_RBD = "rbd";
  @SerializedName(SERIALIZED_NAME_RBD)
  private V1AlertmanagerSpecVolumesInnerRbd rbd;

  public static final String SERIALIZED_NAME_SCALE_I_O = "scaleIO";
  @SerializedName(SERIALIZED_NAME_SCALE_I_O)
  private V1AlertmanagerSpecVolumesInnerScaleIO scaleIO;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private V1AlertmanagerSpecVolumesInnerSecret secret;

  public static final String SERIALIZED_NAME_STORAGEOS = "storageos";
  @SerializedName(SERIALIZED_NAME_STORAGEOS)
  private V1AlertmanagerSpecVolumesInnerStorageos storageos;

  public static final String SERIALIZED_NAME_VSPHERE_VOLUME = "vsphereVolume";
  @SerializedName(SERIALIZED_NAME_VSPHERE_VOLUME)
  private V1AlertmanagerSpecVolumesInnerVsphereVolume vsphereVolume;

  public V1AlertmanagerSpecVolumesInner() {
  }

  public V1AlertmanagerSpecVolumesInner awsElasticBlockStore(V1AlertmanagerSpecVolumesInnerAwsElasticBlockStore awsElasticBlockStore) {
    
    this.awsElasticBlockStore = awsElasticBlockStore;
    return this;
  }

   /**
   * Get awsElasticBlockStore
   * @return awsElasticBlockStore
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerAwsElasticBlockStore getAwsElasticBlockStore() {
    return awsElasticBlockStore;
  }


  public void setAwsElasticBlockStore(V1AlertmanagerSpecVolumesInnerAwsElasticBlockStore awsElasticBlockStore) {
    this.awsElasticBlockStore = awsElasticBlockStore;
  }


  public V1AlertmanagerSpecVolumesInner azureDisk(V1AlertmanagerSpecVolumesInnerAzureDisk azureDisk) {
    
    this.azureDisk = azureDisk;
    return this;
  }

   /**
   * Get azureDisk
   * @return azureDisk
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerAzureDisk getAzureDisk() {
    return azureDisk;
  }


  public void setAzureDisk(V1AlertmanagerSpecVolumesInnerAzureDisk azureDisk) {
    this.azureDisk = azureDisk;
  }


  public V1AlertmanagerSpecVolumesInner azureFile(V1AlertmanagerSpecVolumesInnerAzureFile azureFile) {
    
    this.azureFile = azureFile;
    return this;
  }

   /**
   * Get azureFile
   * @return azureFile
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerAzureFile getAzureFile() {
    return azureFile;
  }


  public void setAzureFile(V1AlertmanagerSpecVolumesInnerAzureFile azureFile) {
    this.azureFile = azureFile;
  }


  public V1AlertmanagerSpecVolumesInner cephfs(V1AlertmanagerSpecVolumesInnerCephfs cephfs) {
    
    this.cephfs = cephfs;
    return this;
  }

   /**
   * Get cephfs
   * @return cephfs
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerCephfs getCephfs() {
    return cephfs;
  }


  public void setCephfs(V1AlertmanagerSpecVolumesInnerCephfs cephfs) {
    this.cephfs = cephfs;
  }


  public V1AlertmanagerSpecVolumesInner cinder(V1AlertmanagerSpecVolumesInnerCinder cinder) {
    
    this.cinder = cinder;
    return this;
  }

   /**
   * Get cinder
   * @return cinder
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerCinder getCinder() {
    return cinder;
  }


  public void setCinder(V1AlertmanagerSpecVolumesInnerCinder cinder) {
    this.cinder = cinder;
  }


  public V1AlertmanagerSpecVolumesInner configMap(V1AlertmanagerSpecVolumesInnerConfigMap configMap) {
    
    this.configMap = configMap;
    return this;
  }

   /**
   * Get configMap
   * @return configMap
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerConfigMap getConfigMap() {
    return configMap;
  }


  public void setConfigMap(V1AlertmanagerSpecVolumesInnerConfigMap configMap) {
    this.configMap = configMap;
  }


  public V1AlertmanagerSpecVolumesInner csi(V1AlertmanagerSpecVolumesInnerCsi csi) {
    
    this.csi = csi;
    return this;
  }

   /**
   * Get csi
   * @return csi
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerCsi getCsi() {
    return csi;
  }


  public void setCsi(V1AlertmanagerSpecVolumesInnerCsi csi) {
    this.csi = csi;
  }


  public V1AlertmanagerSpecVolumesInner downwardAPI(V1AlertmanagerSpecVolumesInnerDownwardAPI downwardAPI) {
    
    this.downwardAPI = downwardAPI;
    return this;
  }

   /**
   * Get downwardAPI
   * @return downwardAPI
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerDownwardAPI getDownwardAPI() {
    return downwardAPI;
  }


  public void setDownwardAPI(V1AlertmanagerSpecVolumesInnerDownwardAPI downwardAPI) {
    this.downwardAPI = downwardAPI;
  }


  public V1AlertmanagerSpecVolumesInner emptyDir(V1AlertmanagerSpecVolumesInnerEmptyDir emptyDir) {
    
    this.emptyDir = emptyDir;
    return this;
  }

   /**
   * Get emptyDir
   * @return emptyDir
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerEmptyDir getEmptyDir() {
    return emptyDir;
  }


  public void setEmptyDir(V1AlertmanagerSpecVolumesInnerEmptyDir emptyDir) {
    this.emptyDir = emptyDir;
  }


  public V1AlertmanagerSpecVolumesInner ephemeral(V1AlertmanagerSpecVolumesInnerEphemeral ephemeral) {
    
    this.ephemeral = ephemeral;
    return this;
  }

   /**
   * Get ephemeral
   * @return ephemeral
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerEphemeral getEphemeral() {
    return ephemeral;
  }


  public void setEphemeral(V1AlertmanagerSpecVolumesInnerEphemeral ephemeral) {
    this.ephemeral = ephemeral;
  }


  public V1AlertmanagerSpecVolumesInner fc(V1AlertmanagerSpecVolumesInnerFc fc) {
    
    this.fc = fc;
    return this;
  }

   /**
   * Get fc
   * @return fc
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerFc getFc() {
    return fc;
  }


  public void setFc(V1AlertmanagerSpecVolumesInnerFc fc) {
    this.fc = fc;
  }


  public V1AlertmanagerSpecVolumesInner flexVolume(V1AlertmanagerSpecVolumesInnerFlexVolume flexVolume) {
    
    this.flexVolume = flexVolume;
    return this;
  }

   /**
   * Get flexVolume
   * @return flexVolume
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerFlexVolume getFlexVolume() {
    return flexVolume;
  }


  public void setFlexVolume(V1AlertmanagerSpecVolumesInnerFlexVolume flexVolume) {
    this.flexVolume = flexVolume;
  }


  public V1AlertmanagerSpecVolumesInner flocker(V1AlertmanagerSpecVolumesInnerFlocker flocker) {
    
    this.flocker = flocker;
    return this;
  }

   /**
   * Get flocker
   * @return flocker
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerFlocker getFlocker() {
    return flocker;
  }


  public void setFlocker(V1AlertmanagerSpecVolumesInnerFlocker flocker) {
    this.flocker = flocker;
  }


  public V1AlertmanagerSpecVolumesInner gcePersistentDisk(V1AlertmanagerSpecVolumesInnerGcePersistentDisk gcePersistentDisk) {
    
    this.gcePersistentDisk = gcePersistentDisk;
    return this;
  }

   /**
   * Get gcePersistentDisk
   * @return gcePersistentDisk
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerGcePersistentDisk getGcePersistentDisk() {
    return gcePersistentDisk;
  }


  public void setGcePersistentDisk(V1AlertmanagerSpecVolumesInnerGcePersistentDisk gcePersistentDisk) {
    this.gcePersistentDisk = gcePersistentDisk;
  }


  public V1AlertmanagerSpecVolumesInner gitRepo(V1AlertmanagerSpecVolumesInnerGitRepo gitRepo) {
    
    this.gitRepo = gitRepo;
    return this;
  }

   /**
   * Get gitRepo
   * @return gitRepo
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerGitRepo getGitRepo() {
    return gitRepo;
  }


  public void setGitRepo(V1AlertmanagerSpecVolumesInnerGitRepo gitRepo) {
    this.gitRepo = gitRepo;
  }


  public V1AlertmanagerSpecVolumesInner glusterfs(V1AlertmanagerSpecVolumesInnerGlusterfs glusterfs) {
    
    this.glusterfs = glusterfs;
    return this;
  }

   /**
   * Get glusterfs
   * @return glusterfs
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerGlusterfs getGlusterfs() {
    return glusterfs;
  }


  public void setGlusterfs(V1AlertmanagerSpecVolumesInnerGlusterfs glusterfs) {
    this.glusterfs = glusterfs;
  }


  public V1AlertmanagerSpecVolumesInner hostPath(V1AlertmanagerSpecVolumesInnerHostPath hostPath) {
    
    this.hostPath = hostPath;
    return this;
  }

   /**
   * Get hostPath
   * @return hostPath
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerHostPath getHostPath() {
    return hostPath;
  }


  public void setHostPath(V1AlertmanagerSpecVolumesInnerHostPath hostPath) {
    this.hostPath = hostPath;
  }


  public V1AlertmanagerSpecVolumesInner iscsi(V1AlertmanagerSpecVolumesInnerIscsi iscsi) {
    
    this.iscsi = iscsi;
    return this;
  }

   /**
   * Get iscsi
   * @return iscsi
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerIscsi getIscsi() {
    return iscsi;
  }


  public void setIscsi(V1AlertmanagerSpecVolumesInnerIscsi iscsi) {
    this.iscsi = iscsi;
  }


  public V1AlertmanagerSpecVolumesInner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * @return name
  **/
  @jakarta.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V1AlertmanagerSpecVolumesInner nfs(V1AlertmanagerSpecVolumesInnerNfs nfs) {
    
    this.nfs = nfs;
    return this;
  }

   /**
   * Get nfs
   * @return nfs
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerNfs getNfs() {
    return nfs;
  }


  public void setNfs(V1AlertmanagerSpecVolumesInnerNfs nfs) {
    this.nfs = nfs;
  }


  public V1AlertmanagerSpecVolumesInner persistentVolumeClaim(V1AlertmanagerSpecVolumesInnerPersistentVolumeClaim persistentVolumeClaim) {
    
    this.persistentVolumeClaim = persistentVolumeClaim;
    return this;
  }

   /**
   * Get persistentVolumeClaim
   * @return persistentVolumeClaim
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerPersistentVolumeClaim getPersistentVolumeClaim() {
    return persistentVolumeClaim;
  }


  public void setPersistentVolumeClaim(V1AlertmanagerSpecVolumesInnerPersistentVolumeClaim persistentVolumeClaim) {
    this.persistentVolumeClaim = persistentVolumeClaim;
  }


  public V1AlertmanagerSpecVolumesInner photonPersistentDisk(V1AlertmanagerSpecVolumesInnerPhotonPersistentDisk photonPersistentDisk) {
    
    this.photonPersistentDisk = photonPersistentDisk;
    return this;
  }

   /**
   * Get photonPersistentDisk
   * @return photonPersistentDisk
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerPhotonPersistentDisk getPhotonPersistentDisk() {
    return photonPersistentDisk;
  }


  public void setPhotonPersistentDisk(V1AlertmanagerSpecVolumesInnerPhotonPersistentDisk photonPersistentDisk) {
    this.photonPersistentDisk = photonPersistentDisk;
  }


  public V1AlertmanagerSpecVolumesInner portworxVolume(V1AlertmanagerSpecVolumesInnerPortworxVolume portworxVolume) {
    
    this.portworxVolume = portworxVolume;
    return this;
  }

   /**
   * Get portworxVolume
   * @return portworxVolume
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerPortworxVolume getPortworxVolume() {
    return portworxVolume;
  }


  public void setPortworxVolume(V1AlertmanagerSpecVolumesInnerPortworxVolume portworxVolume) {
    this.portworxVolume = portworxVolume;
  }


  public V1AlertmanagerSpecVolumesInner projected(V1AlertmanagerSpecVolumesInnerProjected projected) {
    
    this.projected = projected;
    return this;
  }

   /**
   * Get projected
   * @return projected
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerProjected getProjected() {
    return projected;
  }


  public void setProjected(V1AlertmanagerSpecVolumesInnerProjected projected) {
    this.projected = projected;
  }


  public V1AlertmanagerSpecVolumesInner quobyte(V1AlertmanagerSpecVolumesInnerQuobyte quobyte) {
    
    this.quobyte = quobyte;
    return this;
  }

   /**
   * Get quobyte
   * @return quobyte
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerQuobyte getQuobyte() {
    return quobyte;
  }


  public void setQuobyte(V1AlertmanagerSpecVolumesInnerQuobyte quobyte) {
    this.quobyte = quobyte;
  }


  public V1AlertmanagerSpecVolumesInner rbd(V1AlertmanagerSpecVolumesInnerRbd rbd) {
    
    this.rbd = rbd;
    return this;
  }

   /**
   * Get rbd
   * @return rbd
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerRbd getRbd() {
    return rbd;
  }


  public void setRbd(V1AlertmanagerSpecVolumesInnerRbd rbd) {
    this.rbd = rbd;
  }


  public V1AlertmanagerSpecVolumesInner scaleIO(V1AlertmanagerSpecVolumesInnerScaleIO scaleIO) {
    
    this.scaleIO = scaleIO;
    return this;
  }

   /**
   * Get scaleIO
   * @return scaleIO
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerScaleIO getScaleIO() {
    return scaleIO;
  }


  public void setScaleIO(V1AlertmanagerSpecVolumesInnerScaleIO scaleIO) {
    this.scaleIO = scaleIO;
  }


  public V1AlertmanagerSpecVolumesInner secret(V1AlertmanagerSpecVolumesInnerSecret secret) {
    
    this.secret = secret;
    return this;
  }

   /**
   * Get secret
   * @return secret
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerSecret getSecret() {
    return secret;
  }


  public void setSecret(V1AlertmanagerSpecVolumesInnerSecret secret) {
    this.secret = secret;
  }


  public V1AlertmanagerSpecVolumesInner storageos(V1AlertmanagerSpecVolumesInnerStorageos storageos) {
    
    this.storageos = storageos;
    return this;
  }

   /**
   * Get storageos
   * @return storageos
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerStorageos getStorageos() {
    return storageos;
  }


  public void setStorageos(V1AlertmanagerSpecVolumesInnerStorageos storageos) {
    this.storageos = storageos;
  }


  public V1AlertmanagerSpecVolumesInner vsphereVolume(V1AlertmanagerSpecVolumesInnerVsphereVolume vsphereVolume) {
    
    this.vsphereVolume = vsphereVolume;
    return this;
  }

   /**
   * Get vsphereVolume
   * @return vsphereVolume
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecVolumesInnerVsphereVolume getVsphereVolume() {
    return vsphereVolume;
  }


  public void setVsphereVolume(V1AlertmanagerSpecVolumesInnerVsphereVolume vsphereVolume) {
    this.vsphereVolume = vsphereVolume;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1AlertmanagerSpecVolumesInner v1AlertmanagerSpecVolumesInner = (V1AlertmanagerSpecVolumesInner) o;
    return Objects.equals(this.awsElasticBlockStore, v1AlertmanagerSpecVolumesInner.awsElasticBlockStore) &&
        Objects.equals(this.azureDisk, v1AlertmanagerSpecVolumesInner.azureDisk) &&
        Objects.equals(this.azureFile, v1AlertmanagerSpecVolumesInner.azureFile) &&
        Objects.equals(this.cephfs, v1AlertmanagerSpecVolumesInner.cephfs) &&
        Objects.equals(this.cinder, v1AlertmanagerSpecVolumesInner.cinder) &&
        Objects.equals(this.configMap, v1AlertmanagerSpecVolumesInner.configMap) &&
        Objects.equals(this.csi, v1AlertmanagerSpecVolumesInner.csi) &&
        Objects.equals(this.downwardAPI, v1AlertmanagerSpecVolumesInner.downwardAPI) &&
        Objects.equals(this.emptyDir, v1AlertmanagerSpecVolumesInner.emptyDir) &&
        Objects.equals(this.ephemeral, v1AlertmanagerSpecVolumesInner.ephemeral) &&
        Objects.equals(this.fc, v1AlertmanagerSpecVolumesInner.fc) &&
        Objects.equals(this.flexVolume, v1AlertmanagerSpecVolumesInner.flexVolume) &&
        Objects.equals(this.flocker, v1AlertmanagerSpecVolumesInner.flocker) &&
        Objects.equals(this.gcePersistentDisk, v1AlertmanagerSpecVolumesInner.gcePersistentDisk) &&
        Objects.equals(this.gitRepo, v1AlertmanagerSpecVolumesInner.gitRepo) &&
        Objects.equals(this.glusterfs, v1AlertmanagerSpecVolumesInner.glusterfs) &&
        Objects.equals(this.hostPath, v1AlertmanagerSpecVolumesInner.hostPath) &&
        Objects.equals(this.iscsi, v1AlertmanagerSpecVolumesInner.iscsi) &&
        Objects.equals(this.name, v1AlertmanagerSpecVolumesInner.name) &&
        Objects.equals(this.nfs, v1AlertmanagerSpecVolumesInner.nfs) &&
        Objects.equals(this.persistentVolumeClaim, v1AlertmanagerSpecVolumesInner.persistentVolumeClaim) &&
        Objects.equals(this.photonPersistentDisk, v1AlertmanagerSpecVolumesInner.photonPersistentDisk) &&
        Objects.equals(this.portworxVolume, v1AlertmanagerSpecVolumesInner.portworxVolume) &&
        Objects.equals(this.projected, v1AlertmanagerSpecVolumesInner.projected) &&
        Objects.equals(this.quobyte, v1AlertmanagerSpecVolumesInner.quobyte) &&
        Objects.equals(this.rbd, v1AlertmanagerSpecVolumesInner.rbd) &&
        Objects.equals(this.scaleIO, v1AlertmanagerSpecVolumesInner.scaleIO) &&
        Objects.equals(this.secret, v1AlertmanagerSpecVolumesInner.secret) &&
        Objects.equals(this.storageos, v1AlertmanagerSpecVolumesInner.storageos) &&
        Objects.equals(this.vsphereVolume, v1AlertmanagerSpecVolumesInner.vsphereVolume);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awsElasticBlockStore, azureDisk, azureFile, cephfs, cinder, configMap, csi, downwardAPI, emptyDir, ephemeral, fc, flexVolume, flocker, gcePersistentDisk, gitRepo, glusterfs, hostPath, iscsi, name, nfs, persistentVolumeClaim, photonPersistentDisk, portworxVolume, projected, quobyte, rbd, scaleIO, secret, storageos, vsphereVolume);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1AlertmanagerSpecVolumesInner {\n");
    sb.append("    awsElasticBlockStore: ").append(toIndentedString(awsElasticBlockStore)).append("\n");
    sb.append("    azureDisk: ").append(toIndentedString(azureDisk)).append("\n");
    sb.append("    azureFile: ").append(toIndentedString(azureFile)).append("\n");
    sb.append("    cephfs: ").append(toIndentedString(cephfs)).append("\n");
    sb.append("    cinder: ").append(toIndentedString(cinder)).append("\n");
    sb.append("    configMap: ").append(toIndentedString(configMap)).append("\n");
    sb.append("    csi: ").append(toIndentedString(csi)).append("\n");
    sb.append("    downwardAPI: ").append(toIndentedString(downwardAPI)).append("\n");
    sb.append("    emptyDir: ").append(toIndentedString(emptyDir)).append("\n");
    sb.append("    ephemeral: ").append(toIndentedString(ephemeral)).append("\n");
    sb.append("    fc: ").append(toIndentedString(fc)).append("\n");
    sb.append("    flexVolume: ").append(toIndentedString(flexVolume)).append("\n");
    sb.append("    flocker: ").append(toIndentedString(flocker)).append("\n");
    sb.append("    gcePersistentDisk: ").append(toIndentedString(gcePersistentDisk)).append("\n");
    sb.append("    gitRepo: ").append(toIndentedString(gitRepo)).append("\n");
    sb.append("    glusterfs: ").append(toIndentedString(glusterfs)).append("\n");
    sb.append("    hostPath: ").append(toIndentedString(hostPath)).append("\n");
    sb.append("    iscsi: ").append(toIndentedString(iscsi)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nfs: ").append(toIndentedString(nfs)).append("\n");
    sb.append("    persistentVolumeClaim: ").append(toIndentedString(persistentVolumeClaim)).append("\n");
    sb.append("    photonPersistentDisk: ").append(toIndentedString(photonPersistentDisk)).append("\n");
    sb.append("    portworxVolume: ").append(toIndentedString(portworxVolume)).append("\n");
    sb.append("    projected: ").append(toIndentedString(projected)).append("\n");
    sb.append("    quobyte: ").append(toIndentedString(quobyte)).append("\n");
    sb.append("    rbd: ").append(toIndentedString(rbd)).append("\n");
    sb.append("    scaleIO: ").append(toIndentedString(scaleIO)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    storageos: ").append(toIndentedString(storageos)).append("\n");
    sb.append("    vsphereVolume: ").append(toIndentedString(vsphereVolume)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("awsElasticBlockStore");
    openapiFields.add("azureDisk");
    openapiFields.add("azureFile");
    openapiFields.add("cephfs");
    openapiFields.add("cinder");
    openapiFields.add("configMap");
    openapiFields.add("csi");
    openapiFields.add("downwardAPI");
    openapiFields.add("emptyDir");
    openapiFields.add("ephemeral");
    openapiFields.add("fc");
    openapiFields.add("flexVolume");
    openapiFields.add("flocker");
    openapiFields.add("gcePersistentDisk");
    openapiFields.add("gitRepo");
    openapiFields.add("glusterfs");
    openapiFields.add("hostPath");
    openapiFields.add("iscsi");
    openapiFields.add("name");
    openapiFields.add("nfs");
    openapiFields.add("persistentVolumeClaim");
    openapiFields.add("photonPersistentDisk");
    openapiFields.add("portworxVolume");
    openapiFields.add("projected");
    openapiFields.add("quobyte");
    openapiFields.add("rbd");
    openapiFields.add("scaleIO");
    openapiFields.add("secret");
    openapiFields.add("storageos");
    openapiFields.add("vsphereVolume");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1AlertmanagerSpecVolumesInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1AlertmanagerSpecVolumesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1AlertmanagerSpecVolumesInner is not found in the empty JSON string", V1AlertmanagerSpecVolumesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1AlertmanagerSpecVolumesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1AlertmanagerSpecVolumesInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1AlertmanagerSpecVolumesInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `awsElasticBlockStore`
      if (jsonObj.get("awsElasticBlockStore") != null && !jsonObj.get("awsElasticBlockStore").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerAwsElasticBlockStore.validateJsonObject(jsonObj.getAsJsonObject("awsElasticBlockStore"));
      }
      // validate the optional field `azureDisk`
      if (jsonObj.get("azureDisk") != null && !jsonObj.get("azureDisk").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerAzureDisk.validateJsonObject(jsonObj.getAsJsonObject("azureDisk"));
      }
      // validate the optional field `azureFile`
      if (jsonObj.get("azureFile") != null && !jsonObj.get("azureFile").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerAzureFile.validateJsonObject(jsonObj.getAsJsonObject("azureFile"));
      }
      // validate the optional field `cephfs`
      if (jsonObj.get("cephfs") != null && !jsonObj.get("cephfs").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerCephfs.validateJsonObject(jsonObj.getAsJsonObject("cephfs"));
      }
      // validate the optional field `cinder`
      if (jsonObj.get("cinder") != null && !jsonObj.get("cinder").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerCinder.validateJsonObject(jsonObj.getAsJsonObject("cinder"));
      }
      // validate the optional field `configMap`
      if (jsonObj.get("configMap") != null && !jsonObj.get("configMap").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerConfigMap.validateJsonObject(jsonObj.getAsJsonObject("configMap"));
      }
      // validate the optional field `csi`
      if (jsonObj.get("csi") != null && !jsonObj.get("csi").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerCsi.validateJsonObject(jsonObj.getAsJsonObject("csi"));
      }
      // validate the optional field `downwardAPI`
      if (jsonObj.get("downwardAPI") != null && !jsonObj.get("downwardAPI").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerDownwardAPI.validateJsonObject(jsonObj.getAsJsonObject("downwardAPI"));
      }
      // validate the optional field `emptyDir`
      if (jsonObj.get("emptyDir") != null && !jsonObj.get("emptyDir").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerEmptyDir.validateJsonObject(jsonObj.getAsJsonObject("emptyDir"));
      }
      // validate the optional field `ephemeral`
      if (jsonObj.get("ephemeral") != null && !jsonObj.get("ephemeral").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerEphemeral.validateJsonObject(jsonObj.getAsJsonObject("ephemeral"));
      }
      // validate the optional field `fc`
      if (jsonObj.get("fc") != null && !jsonObj.get("fc").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerFc.validateJsonObject(jsonObj.getAsJsonObject("fc"));
      }
      // validate the optional field `flexVolume`
      if (jsonObj.get("flexVolume") != null && !jsonObj.get("flexVolume").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerFlexVolume.validateJsonObject(jsonObj.getAsJsonObject("flexVolume"));
      }
      // validate the optional field `flocker`
      if (jsonObj.get("flocker") != null && !jsonObj.get("flocker").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerFlocker.validateJsonObject(jsonObj.getAsJsonObject("flocker"));
      }
      // validate the optional field `gcePersistentDisk`
      if (jsonObj.get("gcePersistentDisk") != null && !jsonObj.get("gcePersistentDisk").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerGcePersistentDisk.validateJsonObject(jsonObj.getAsJsonObject("gcePersistentDisk"));
      }
      // validate the optional field `gitRepo`
      if (jsonObj.get("gitRepo") != null && !jsonObj.get("gitRepo").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerGitRepo.validateJsonObject(jsonObj.getAsJsonObject("gitRepo"));
      }
      // validate the optional field `glusterfs`
      if (jsonObj.get("glusterfs") != null && !jsonObj.get("glusterfs").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerGlusterfs.validateJsonObject(jsonObj.getAsJsonObject("glusterfs"));
      }
      // validate the optional field `hostPath`
      if (jsonObj.get("hostPath") != null && !jsonObj.get("hostPath").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerHostPath.validateJsonObject(jsonObj.getAsJsonObject("hostPath"));
      }
      // validate the optional field `iscsi`
      if (jsonObj.get("iscsi") != null && !jsonObj.get("iscsi").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerIscsi.validateJsonObject(jsonObj.getAsJsonObject("iscsi"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `nfs`
      if (jsonObj.get("nfs") != null && !jsonObj.get("nfs").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerNfs.validateJsonObject(jsonObj.getAsJsonObject("nfs"));
      }
      // validate the optional field `persistentVolumeClaim`
      if (jsonObj.get("persistentVolumeClaim") != null && !jsonObj.get("persistentVolumeClaim").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerPersistentVolumeClaim.validateJsonObject(jsonObj.getAsJsonObject("persistentVolumeClaim"));
      }
      // validate the optional field `photonPersistentDisk`
      if (jsonObj.get("photonPersistentDisk") != null && !jsonObj.get("photonPersistentDisk").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerPhotonPersistentDisk.validateJsonObject(jsonObj.getAsJsonObject("photonPersistentDisk"));
      }
      // validate the optional field `portworxVolume`
      if (jsonObj.get("portworxVolume") != null && !jsonObj.get("portworxVolume").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerPortworxVolume.validateJsonObject(jsonObj.getAsJsonObject("portworxVolume"));
      }
      // validate the optional field `projected`
      if (jsonObj.get("projected") != null && !jsonObj.get("projected").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerProjected.validateJsonObject(jsonObj.getAsJsonObject("projected"));
      }
      // validate the optional field `quobyte`
      if (jsonObj.get("quobyte") != null && !jsonObj.get("quobyte").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerQuobyte.validateJsonObject(jsonObj.getAsJsonObject("quobyte"));
      }
      // validate the optional field `rbd`
      if (jsonObj.get("rbd") != null && !jsonObj.get("rbd").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerRbd.validateJsonObject(jsonObj.getAsJsonObject("rbd"));
      }
      // validate the optional field `scaleIO`
      if (jsonObj.get("scaleIO") != null && !jsonObj.get("scaleIO").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerScaleIO.validateJsonObject(jsonObj.getAsJsonObject("scaleIO"));
      }
      // validate the optional field `secret`
      if (jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerSecret.validateJsonObject(jsonObj.getAsJsonObject("secret"));
      }
      // validate the optional field `storageos`
      if (jsonObj.get("storageos") != null && !jsonObj.get("storageos").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerStorageos.validateJsonObject(jsonObj.getAsJsonObject("storageos"));
      }
      // validate the optional field `vsphereVolume`
      if (jsonObj.get("vsphereVolume") != null && !jsonObj.get("vsphereVolume").isJsonNull()) {
        V1AlertmanagerSpecVolumesInnerVsphereVolume.validateJsonObject(jsonObj.getAsJsonObject("vsphereVolume"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1AlertmanagerSpecVolumesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1AlertmanagerSpecVolumesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1AlertmanagerSpecVolumesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1AlertmanagerSpecVolumesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<V1AlertmanagerSpecVolumesInner>() {
           @Override
           public void write(JsonWriter out, V1AlertmanagerSpecVolumesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1AlertmanagerSpecVolumesInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1AlertmanagerSpecVolumesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1AlertmanagerSpecVolumesInner
  * @throws IOException if the JSON string is invalid with respect to V1AlertmanagerSpecVolumesInner
  */
  public static V1AlertmanagerSpecVolumesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1AlertmanagerSpecVolumesInner.class);
  }

 /**
  * Convert an instance of V1AlertmanagerSpecVolumesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

