/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.coreos.monitoring.models.V1AlertmanagerSpecAffinity;
import com.coreos.monitoring.models.V1AlertmanagerSpecContainersInner;
import com.coreos.monitoring.models.V1AlertmanagerSpecHostAliasesInner;
import com.coreos.monitoring.models.V1AlertmanagerSpecImagePullSecretsInner;
import com.coreos.monitoring.models.V1AlertmanagerSpecSecurityContext;
import com.coreos.monitoring.models.V1AlertmanagerSpecTolerationsInner;
import com.coreos.monitoring.models.V1AlertmanagerSpecTopologySpreadConstraintsInner;
import com.coreos.monitoring.models.V1AlertmanagerSpecVolumesInner;
import com.coreos.monitoring.models.V1PrometheusSpecAdditionalArgsInner;
import com.coreos.monitoring.models.V1PrometheusSpecExcludedFromEnforcementInner;
import com.coreos.monitoring.models.V1PrometheusSpecPrometheusRulesExcludedFromEnforceInner;
import com.coreos.monitoring.models.V1PrometheusSpecStorage;
import com.coreos.monitoring.models.V1PrometheusSpecThanosObjectStorageConfig;
import com.coreos.monitoring.models.V1PrometheusSpecThanosTracingConfig;
import com.coreos.monitoring.models.V1ThanosRulerSpecAlertRelabelConfigs;
import com.coreos.monitoring.models.V1ThanosRulerSpecAlertmanagersConfig;
import com.coreos.monitoring.models.V1ThanosRulerSpecGrpcServerTlsConfig;
import com.coreos.monitoring.models.V1ThanosRulerSpecPodMetadata;
import com.coreos.monitoring.models.V1ThanosRulerSpecQueryConfig;
import com.coreos.monitoring.models.V1ThanosRulerSpecResources;
import com.coreos.monitoring.models.V1ThanosRulerSpecRuleNamespaceSelector;
import com.coreos.monitoring.models.V1ThanosRulerSpecRuleSelector;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Specification of the desired behavior of the ThanosRuler cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1ThanosRulerSpec {
  public static final String SERIALIZED_NAME_ADDITIONAL_ARGS = "additionalArgs";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_ARGS)
  private List<V1PrometheusSpecAdditionalArgsInner> additionalArgs;

  public static final String SERIALIZED_NAME_AFFINITY = "affinity";
  @SerializedName(SERIALIZED_NAME_AFFINITY)
  private V1AlertmanagerSpecAffinity affinity;

  public static final String SERIALIZED_NAME_ALERT_DROP_LABELS = "alertDropLabels";
  @SerializedName(SERIALIZED_NAME_ALERT_DROP_LABELS)
  private List<String> alertDropLabels;

  public static final String SERIALIZED_NAME_ALERT_QUERY_URL = "alertQueryUrl";
  @SerializedName(SERIALIZED_NAME_ALERT_QUERY_URL)
  private String alertQueryUrl;

  public static final String SERIALIZED_NAME_ALERT_RELABEL_CONFIG_FILE = "alertRelabelConfigFile";
  @SerializedName(SERIALIZED_NAME_ALERT_RELABEL_CONFIG_FILE)
  private String alertRelabelConfigFile;

  public static final String SERIALIZED_NAME_ALERT_RELABEL_CONFIGS = "alertRelabelConfigs";
  @SerializedName(SERIALIZED_NAME_ALERT_RELABEL_CONFIGS)
  private V1ThanosRulerSpecAlertRelabelConfigs alertRelabelConfigs;

  public static final String SERIALIZED_NAME_ALERTMANAGERS_CONFIG = "alertmanagersConfig";
  @SerializedName(SERIALIZED_NAME_ALERTMANAGERS_CONFIG)
  private V1ThanosRulerSpecAlertmanagersConfig alertmanagersConfig;

  public static final String SERIALIZED_NAME_ALERTMANAGERS_URL = "alertmanagersUrl";
  @SerializedName(SERIALIZED_NAME_ALERTMANAGERS_URL)
  private List<String> alertmanagersUrl;

  public static final String SERIALIZED_NAME_CONTAINERS = "containers";
  @SerializedName(SERIALIZED_NAME_CONTAINERS)
  private List<V1AlertmanagerSpecContainersInner> containers;

  public static final String SERIALIZED_NAME_ENFORCED_NAMESPACE_LABEL = "enforcedNamespaceLabel";
  @SerializedName(SERIALIZED_NAME_ENFORCED_NAMESPACE_LABEL)
  private String enforcedNamespaceLabel;

  public static final String SERIALIZED_NAME_EVALUATION_INTERVAL = "evaluationInterval";
  @SerializedName(SERIALIZED_NAME_EVALUATION_INTERVAL)
  private String evaluationInterval;

  public static final String SERIALIZED_NAME_EXCLUDED_FROM_ENFORCEMENT = "excludedFromEnforcement";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_FROM_ENFORCEMENT)
  private List<V1PrometheusSpecExcludedFromEnforcementInner> excludedFromEnforcement;

  public static final String SERIALIZED_NAME_EXTERNAL_PREFIX = "externalPrefix";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_PREFIX)
  private String externalPrefix;

  public static final String SERIALIZED_NAME_GRPC_SERVER_TLS_CONFIG = "grpcServerTlsConfig";
  @SerializedName(SERIALIZED_NAME_GRPC_SERVER_TLS_CONFIG)
  private V1ThanosRulerSpecGrpcServerTlsConfig grpcServerTlsConfig;

  public static final String SERIALIZED_NAME_HOST_ALIASES = "hostAliases";
  @SerializedName(SERIALIZED_NAME_HOST_ALIASES)
  private List<V1AlertmanagerSpecHostAliasesInner> hostAliases;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  /**
   * Image pull policy for the &#39;thanos&#39;, &#39;init-config-reloader&#39; and &#39;config-reloader&#39; containers. See https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy for more details.
   */
  @JsonAdapter(ImagePullPolicyEnum.Adapter.class)
  public enum ImagePullPolicyEnum {
    EMPTY(""),
    
    ALWAYS("Always"),
    
    NEVER("Never"),
    
    IFNOTPRESENT("IfNotPresent");

    private String value;

    ImagePullPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImagePullPolicyEnum fromValue(String value) {
      for (ImagePullPolicyEnum b : ImagePullPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImagePullPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImagePullPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImagePullPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImagePullPolicyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IMAGE_PULL_POLICY = "imagePullPolicy";
  @SerializedName(SERIALIZED_NAME_IMAGE_PULL_POLICY)
  private ImagePullPolicyEnum imagePullPolicy;

  public static final String SERIALIZED_NAME_IMAGE_PULL_SECRETS = "imagePullSecrets";
  @SerializedName(SERIALIZED_NAME_IMAGE_PULL_SECRETS)
  private List<V1AlertmanagerSpecImagePullSecretsInner> imagePullSecrets;

  public static final String SERIALIZED_NAME_INIT_CONTAINERS = "initContainers";
  @SerializedName(SERIALIZED_NAME_INIT_CONTAINERS)
  private List<V1AlertmanagerSpecContainersInner> initContainers;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_LISTEN_LOCAL = "listenLocal";
  @SerializedName(SERIALIZED_NAME_LISTEN_LOCAL)
  private Boolean listenLocal;

  /**
   * Log format for ThanosRuler to be configured with.
   */
  @JsonAdapter(LogFormatEnum.Adapter.class)
  public enum LogFormatEnum {
    EMPTY(""),
    
    LOGFMT("logfmt"),
    
    JSON("json");

    private String value;

    LogFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogFormatEnum fromValue(String value) {
      for (LogFormatEnum b : LogFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogFormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LOG_FORMAT = "logFormat";
  @SerializedName(SERIALIZED_NAME_LOG_FORMAT)
  private LogFormatEnum logFormat;

  /**
   * Log level for ThanosRuler to be configured with.
   */
  @JsonAdapter(LogLevelEnum.Adapter.class)
  public enum LogLevelEnum {
    EMPTY(""),
    
    DEBUG("debug"),
    
    INFO("info"),
    
    WARN("warn"),
    
    ERROR("error");

    private String value;

    LogLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogLevelEnum fromValue(String value) {
      for (LogLevelEnum b : LogLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LOG_LEVEL = "logLevel";
  @SerializedName(SERIALIZED_NAME_LOG_LEVEL)
  private LogLevelEnum logLevel;

  public static final String SERIALIZED_NAME_MIN_READY_SECONDS = "minReadySeconds";
  @SerializedName(SERIALIZED_NAME_MIN_READY_SECONDS)
  private Integer minReadySeconds;

  public static final String SERIALIZED_NAME_NODE_SELECTOR = "nodeSelector";
  @SerializedName(SERIALIZED_NAME_NODE_SELECTOR)
  private Map<String, String> nodeSelector = new HashMap<>();

  public static final String SERIALIZED_NAME_OBJECT_STORAGE_CONFIG = "objectStorageConfig";
  @SerializedName(SERIALIZED_NAME_OBJECT_STORAGE_CONFIG)
  private V1PrometheusSpecThanosObjectStorageConfig objectStorageConfig;

  public static final String SERIALIZED_NAME_OBJECT_STORAGE_CONFIG_FILE = "objectStorageConfigFile";
  @SerializedName(SERIALIZED_NAME_OBJECT_STORAGE_CONFIG_FILE)
  private String objectStorageConfigFile;

  public static final String SERIALIZED_NAME_PAUSED = "paused";
  @SerializedName(SERIALIZED_NAME_PAUSED)
  private Boolean paused;

  public static final String SERIALIZED_NAME_POD_METADATA = "podMetadata";
  @SerializedName(SERIALIZED_NAME_POD_METADATA)
  private V1ThanosRulerSpecPodMetadata podMetadata;

  public static final String SERIALIZED_NAME_PORT_NAME = "portName";
  @SerializedName(SERIALIZED_NAME_PORT_NAME)
  private String portName;

  public static final String SERIALIZED_NAME_PRIORITY_CLASS_NAME = "priorityClassName";
  @SerializedName(SERIALIZED_NAME_PRIORITY_CLASS_NAME)
  private String priorityClassName;

  public static final String SERIALIZED_NAME_PROMETHEUS_RULES_EXCLUDED_FROM_ENFORCE = "prometheusRulesExcludedFromEnforce";
  @SerializedName(SERIALIZED_NAME_PROMETHEUS_RULES_EXCLUDED_FROM_ENFORCE)
  private List<V1PrometheusSpecPrometheusRulesExcludedFromEnforceInner> prometheusRulesExcludedFromEnforce;

  public static final String SERIALIZED_NAME_QUERY_CONFIG = "queryConfig";
  @SerializedName(SERIALIZED_NAME_QUERY_CONFIG)
  private V1ThanosRulerSpecQueryConfig queryConfig;

  public static final String SERIALIZED_NAME_QUERY_ENDPOINTS = "queryEndpoints";
  @SerializedName(SERIALIZED_NAME_QUERY_ENDPOINTS)
  private List<String> queryEndpoints;

  public static final String SERIALIZED_NAME_REPLICAS = "replicas";
  @SerializedName(SERIALIZED_NAME_REPLICAS)
  private Integer replicas;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private V1ThanosRulerSpecResources resources;

  public static final String SERIALIZED_NAME_RETENTION = "retention";
  @SerializedName(SERIALIZED_NAME_RETENTION)
  private String retention;

  public static final String SERIALIZED_NAME_ROUTE_PREFIX = "routePrefix";
  @SerializedName(SERIALIZED_NAME_ROUTE_PREFIX)
  private String routePrefix;

  public static final String SERIALIZED_NAME_RULE_NAMESPACE_SELECTOR = "ruleNamespaceSelector";
  @SerializedName(SERIALIZED_NAME_RULE_NAMESPACE_SELECTOR)
  private V1ThanosRulerSpecRuleNamespaceSelector ruleNamespaceSelector;

  public static final String SERIALIZED_NAME_RULE_SELECTOR = "ruleSelector";
  @SerializedName(SERIALIZED_NAME_RULE_SELECTOR)
  private V1ThanosRulerSpecRuleSelector ruleSelector;

  public static final String SERIALIZED_NAME_SECURITY_CONTEXT = "securityContext";
  @SerializedName(SERIALIZED_NAME_SECURITY_CONTEXT)
  private V1AlertmanagerSpecSecurityContext securityContext;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_NAME = "serviceAccountName";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_NAME)
  private String serviceAccountName;

  public static final String SERIALIZED_NAME_STORAGE = "storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  private V1PrometheusSpecStorage storage;

  public static final String SERIALIZED_NAME_TOLERATIONS = "tolerations";
  @SerializedName(SERIALIZED_NAME_TOLERATIONS)
  private List<V1AlertmanagerSpecTolerationsInner> tolerations;

  public static final String SERIALIZED_NAME_TOPOLOGY_SPREAD_CONSTRAINTS = "topologySpreadConstraints";
  @SerializedName(SERIALIZED_NAME_TOPOLOGY_SPREAD_CONSTRAINTS)
  private List<V1AlertmanagerSpecTopologySpreadConstraintsInner> topologySpreadConstraints;

  public static final String SERIALIZED_NAME_TRACING_CONFIG = "tracingConfig";
  @SerializedName(SERIALIZED_NAME_TRACING_CONFIG)
  private V1PrometheusSpecThanosTracingConfig tracingConfig;

  public static final String SERIALIZED_NAME_TRACING_CONFIG_FILE = "tracingConfigFile";
  @SerializedName(SERIALIZED_NAME_TRACING_CONFIG_FILE)
  private String tracingConfigFile;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<V1AlertmanagerSpecVolumesInner> volumes;

  public V1ThanosRulerSpec() {
  }

  public V1ThanosRulerSpec additionalArgs(List<V1PrometheusSpecAdditionalArgsInner> additionalArgs) {
    
    this.additionalArgs = additionalArgs;
    return this;
  }

  public V1ThanosRulerSpec addAdditionalArgsItem(V1PrometheusSpecAdditionalArgsInner additionalArgsItem) {
    if (this.additionalArgs == null) {
      this.additionalArgs = new ArrayList<>();
    }
    this.additionalArgs.add(additionalArgsItem);
    return this;
  }

   /**
   * AdditionalArgs allows setting additional arguments for the ThanosRuler container. It is intended for e.g. activating hidden flags which are not supported by the dedicated configuration options yet. The arguments are passed as-is to the ThanosRuler container which may cause issues if they are invalid or not supported by the given ThanosRuler version. In case of an argument conflict (e.g. an argument which is already set by the operator itself) or when providing an invalid argument the reconciliation will fail and an error will be logged.
   * @return additionalArgs
  **/
  @jakarta.annotation.Nullable
  public List<V1PrometheusSpecAdditionalArgsInner> getAdditionalArgs() {
    return additionalArgs;
  }


  public void setAdditionalArgs(List<V1PrometheusSpecAdditionalArgsInner> additionalArgs) {
    this.additionalArgs = additionalArgs;
  }


  public V1ThanosRulerSpec affinity(V1AlertmanagerSpecAffinity affinity) {
    
    this.affinity = affinity;
    return this;
  }

   /**
   * Get affinity
   * @return affinity
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecAffinity getAffinity() {
    return affinity;
  }


  public void setAffinity(V1AlertmanagerSpecAffinity affinity) {
    this.affinity = affinity;
  }


  public V1ThanosRulerSpec alertDropLabels(List<String> alertDropLabels) {
    
    this.alertDropLabels = alertDropLabels;
    return this;
  }

  public V1ThanosRulerSpec addAlertDropLabelsItem(String alertDropLabelsItem) {
    if (this.alertDropLabels == null) {
      this.alertDropLabels = new ArrayList<>();
    }
    this.alertDropLabels.add(alertDropLabelsItem);
    return this;
  }

   /**
   * AlertDropLabels configure the label names which should be dropped in ThanosRuler alerts. The replica label &#x60;thanos_ruler_replica&#x60; will always be dropped in alerts.
   * @return alertDropLabels
  **/
  @jakarta.annotation.Nullable
  public List<String> getAlertDropLabels() {
    return alertDropLabels;
  }


  public void setAlertDropLabels(List<String> alertDropLabels) {
    this.alertDropLabels = alertDropLabels;
  }


  public V1ThanosRulerSpec alertQueryUrl(String alertQueryUrl) {
    
    this.alertQueryUrl = alertQueryUrl;
    return this;
  }

   /**
   * The external Query URL the Thanos Ruler will set in the &#39;Source&#39; field of all alerts. Maps to the &#39;--alert.query-url&#39; CLI arg.
   * @return alertQueryUrl
  **/
  @jakarta.annotation.Nullable
  public String getAlertQueryUrl() {
    return alertQueryUrl;
  }


  public void setAlertQueryUrl(String alertQueryUrl) {
    this.alertQueryUrl = alertQueryUrl;
  }


  public V1ThanosRulerSpec alertRelabelConfigFile(String alertRelabelConfigFile) {
    
    this.alertRelabelConfigFile = alertRelabelConfigFile;
    return this;
  }

   /**
   * AlertRelabelConfigFile specifies the path of the alert relabeling configuration file. When used alongside with AlertRelabelConfigs, alertRelabelConfigFile takes precedence.
   * @return alertRelabelConfigFile
  **/
  @jakarta.annotation.Nullable
  public String getAlertRelabelConfigFile() {
    return alertRelabelConfigFile;
  }


  public void setAlertRelabelConfigFile(String alertRelabelConfigFile) {
    this.alertRelabelConfigFile = alertRelabelConfigFile;
  }


  public V1ThanosRulerSpec alertRelabelConfigs(V1ThanosRulerSpecAlertRelabelConfigs alertRelabelConfigs) {
    
    this.alertRelabelConfigs = alertRelabelConfigs;
    return this;
  }

   /**
   * Get alertRelabelConfigs
   * @return alertRelabelConfigs
  **/
  @jakarta.annotation.Nullable
  public V1ThanosRulerSpecAlertRelabelConfigs getAlertRelabelConfigs() {
    return alertRelabelConfigs;
  }


  public void setAlertRelabelConfigs(V1ThanosRulerSpecAlertRelabelConfigs alertRelabelConfigs) {
    this.alertRelabelConfigs = alertRelabelConfigs;
  }


  public V1ThanosRulerSpec alertmanagersConfig(V1ThanosRulerSpecAlertmanagersConfig alertmanagersConfig) {
    
    this.alertmanagersConfig = alertmanagersConfig;
    return this;
  }

   /**
   * Get alertmanagersConfig
   * @return alertmanagersConfig
  **/
  @jakarta.annotation.Nullable
  public V1ThanosRulerSpecAlertmanagersConfig getAlertmanagersConfig() {
    return alertmanagersConfig;
  }


  public void setAlertmanagersConfig(V1ThanosRulerSpecAlertmanagersConfig alertmanagersConfig) {
    this.alertmanagersConfig = alertmanagersConfig;
  }


  public V1ThanosRulerSpec alertmanagersUrl(List<String> alertmanagersUrl) {
    
    this.alertmanagersUrl = alertmanagersUrl;
    return this;
  }

  public V1ThanosRulerSpec addAlertmanagersUrlItem(String alertmanagersUrlItem) {
    if (this.alertmanagersUrl == null) {
      this.alertmanagersUrl = new ArrayList<>();
    }
    this.alertmanagersUrl.add(alertmanagersUrlItem);
    return this;
  }

   /**
   * Define URLs to send alerts to Alertmanager.  For Thanos v0.10.0 and higher, AlertManagersConfig should be used instead.  Note: this field will be ignored if AlertManagersConfig is specified. Maps to the &#x60;alertmanagers.url&#x60; arg.
   * @return alertmanagersUrl
  **/
  @jakarta.annotation.Nullable
  public List<String> getAlertmanagersUrl() {
    return alertmanagersUrl;
  }


  public void setAlertmanagersUrl(List<String> alertmanagersUrl) {
    this.alertmanagersUrl = alertmanagersUrl;
  }


  public V1ThanosRulerSpec containers(List<V1AlertmanagerSpecContainersInner> containers) {
    
    this.containers = containers;
    return this;
  }

  public V1ThanosRulerSpec addContainersItem(V1AlertmanagerSpecContainersInner containersItem) {
    if (this.containers == null) {
      this.containers = new ArrayList<>();
    }
    this.containers.add(containersItem);
    return this;
  }

   /**
   * Containers allows injecting additional containers or modifying operator generated containers. This can be used to allow adding an authentication proxy to a ThanosRuler pod or to change the behavior of an operator generated container. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: &#x60;thanos-ruler&#x60; and &#x60;config-reloader&#x60;. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
   * @return containers
  **/
  @jakarta.annotation.Nullable
  public List<V1AlertmanagerSpecContainersInner> getContainers() {
    return containers;
  }


  public void setContainers(List<V1AlertmanagerSpecContainersInner> containers) {
    this.containers = containers;
  }


  public V1ThanosRulerSpec enforcedNamespaceLabel(String enforcedNamespaceLabel) {
    
    this.enforcedNamespaceLabel = enforcedNamespaceLabel;
    return this;
  }

   /**
   * EnforcedNamespaceLabel enforces adding a namespace label of origin for each alert and metric that is user created. The label value will always be the namespace of the object that is being created.
   * @return enforcedNamespaceLabel
  **/
  @jakarta.annotation.Nullable
  public String getEnforcedNamespaceLabel() {
    return enforcedNamespaceLabel;
  }


  public void setEnforcedNamespaceLabel(String enforcedNamespaceLabel) {
    this.enforcedNamespaceLabel = enforcedNamespaceLabel;
  }


  public V1ThanosRulerSpec evaluationInterval(String evaluationInterval) {
    
    this.evaluationInterval = evaluationInterval;
    return this;
  }

   /**
   * Interval between consecutive evaluations.
   * @return evaluationInterval
  **/
  @jakarta.annotation.Nullable
  public String getEvaluationInterval() {
    return evaluationInterval;
  }


  public void setEvaluationInterval(String evaluationInterval) {
    this.evaluationInterval = evaluationInterval;
  }


  public V1ThanosRulerSpec excludedFromEnforcement(List<V1PrometheusSpecExcludedFromEnforcementInner> excludedFromEnforcement) {
    
    this.excludedFromEnforcement = excludedFromEnforcement;
    return this;
  }

  public V1ThanosRulerSpec addExcludedFromEnforcementItem(V1PrometheusSpecExcludedFromEnforcementInner excludedFromEnforcementItem) {
    if (this.excludedFromEnforcement == null) {
      this.excludedFromEnforcement = new ArrayList<>();
    }
    this.excludedFromEnforcement.add(excludedFromEnforcementItem);
    return this;
  }

   /**
   * List of references to PrometheusRule objects to be excluded from enforcing a namespace label of origin. Applies only if enforcedNamespaceLabel set to true.
   * @return excludedFromEnforcement
  **/
  @jakarta.annotation.Nullable
  public List<V1PrometheusSpecExcludedFromEnforcementInner> getExcludedFromEnforcement() {
    return excludedFromEnforcement;
  }


  public void setExcludedFromEnforcement(List<V1PrometheusSpecExcludedFromEnforcementInner> excludedFromEnforcement) {
    this.excludedFromEnforcement = excludedFromEnforcement;
  }


  public V1ThanosRulerSpec externalPrefix(String externalPrefix) {
    
    this.externalPrefix = externalPrefix;
    return this;
  }

   /**
   * The external URL the Thanos Ruler instances will be available under. This is necessary to generate correct URLs. This is necessary if Thanos Ruler is not served from root of a DNS name.
   * @return externalPrefix
  **/
  @jakarta.annotation.Nullable
  public String getExternalPrefix() {
    return externalPrefix;
  }


  public void setExternalPrefix(String externalPrefix) {
    this.externalPrefix = externalPrefix;
  }


  public V1ThanosRulerSpec grpcServerTlsConfig(V1ThanosRulerSpecGrpcServerTlsConfig grpcServerTlsConfig) {
    
    this.grpcServerTlsConfig = grpcServerTlsConfig;
    return this;
  }

   /**
   * Get grpcServerTlsConfig
   * @return grpcServerTlsConfig
  **/
  @jakarta.annotation.Nullable
  public V1ThanosRulerSpecGrpcServerTlsConfig getGrpcServerTlsConfig() {
    return grpcServerTlsConfig;
  }


  public void setGrpcServerTlsConfig(V1ThanosRulerSpecGrpcServerTlsConfig grpcServerTlsConfig) {
    this.grpcServerTlsConfig = grpcServerTlsConfig;
  }


  public V1ThanosRulerSpec hostAliases(List<V1AlertmanagerSpecHostAliasesInner> hostAliases) {
    
    this.hostAliases = hostAliases;
    return this;
  }

  public V1ThanosRulerSpec addHostAliasesItem(V1AlertmanagerSpecHostAliasesInner hostAliasesItem) {
    if (this.hostAliases == null) {
      this.hostAliases = new ArrayList<>();
    }
    this.hostAliases.add(hostAliasesItem);
    return this;
  }

   /**
   * Pods&#39; hostAliases configuration
   * @return hostAliases
  **/
  @jakarta.annotation.Nullable
  public List<V1AlertmanagerSpecHostAliasesInner> getHostAliases() {
    return hostAliases;
  }


  public void setHostAliases(List<V1AlertmanagerSpecHostAliasesInner> hostAliases) {
    this.hostAliases = hostAliases;
  }


  public V1ThanosRulerSpec image(String image) {
    
    this.image = image;
    return this;
  }

   /**
   * Thanos container image URL.
   * @return image
  **/
  @jakarta.annotation.Nullable
  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    this.image = image;
  }


  public V1ThanosRulerSpec imagePullPolicy(ImagePullPolicyEnum imagePullPolicy) {
    
    this.imagePullPolicy = imagePullPolicy;
    return this;
  }

   /**
   * Image pull policy for the &#39;thanos&#39;, &#39;init-config-reloader&#39; and &#39;config-reloader&#39; containers. See https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy for more details.
   * @return imagePullPolicy
  **/
  @jakarta.annotation.Nullable
  public ImagePullPolicyEnum getImagePullPolicy() {
    return imagePullPolicy;
  }


  public void setImagePullPolicy(ImagePullPolicyEnum imagePullPolicy) {
    this.imagePullPolicy = imagePullPolicy;
  }


  public V1ThanosRulerSpec imagePullSecrets(List<V1AlertmanagerSpecImagePullSecretsInner> imagePullSecrets) {
    
    this.imagePullSecrets = imagePullSecrets;
    return this;
  }

  public V1ThanosRulerSpec addImagePullSecretsItem(V1AlertmanagerSpecImagePullSecretsInner imagePullSecretsItem) {
    if (this.imagePullSecrets == null) {
      this.imagePullSecrets = new ArrayList<>();
    }
    this.imagePullSecrets.add(imagePullSecretsItem);
    return this;
  }

   /**
   * An optional list of references to secrets in the same namespace to use for pulling thanos images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
   * @return imagePullSecrets
  **/
  @jakarta.annotation.Nullable
  public List<V1AlertmanagerSpecImagePullSecretsInner> getImagePullSecrets() {
    return imagePullSecrets;
  }


  public void setImagePullSecrets(List<V1AlertmanagerSpecImagePullSecretsInner> imagePullSecrets) {
    this.imagePullSecrets = imagePullSecrets;
  }


  public V1ThanosRulerSpec initContainers(List<V1AlertmanagerSpecContainersInner> initContainers) {
    
    this.initContainers = initContainers;
    return this;
  }

  public V1ThanosRulerSpec addInitContainersItem(V1AlertmanagerSpecContainersInner initContainersItem) {
    if (this.initContainers == null) {
      this.initContainers = new ArrayList<>();
    }
    this.initContainers.add(initContainersItem);
    return this;
  }

   /**
   * InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the ThanosRuler configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
   * @return initContainers
  **/
  @jakarta.annotation.Nullable
  public List<V1AlertmanagerSpecContainersInner> getInitContainers() {
    return initContainers;
  }


  public void setInitContainers(List<V1AlertmanagerSpecContainersInner> initContainers) {
    this.initContainers = initContainers;
  }


  public V1ThanosRulerSpec labels(Map<String, String> labels) {
    
    this.labels = labels;
    return this;
  }

  public V1ThanosRulerSpec putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

   /**
   * Labels configure the external label pairs to ThanosRuler. A default replica label &#x60;thanos_ruler_replica&#x60; will be always added  as a label with the value of the pod&#39;s name and it will be dropped in the alerts.
   * @return labels
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }


  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public V1ThanosRulerSpec listenLocal(Boolean listenLocal) {
    
    this.listenLocal = listenLocal;
    return this;
  }

   /**
   * ListenLocal makes the Thanos ruler listen on loopback, so that it does not bind against the Pod IP.
   * @return listenLocal
  **/
  @jakarta.annotation.Nullable
  public Boolean getListenLocal() {
    return listenLocal;
  }


  public void setListenLocal(Boolean listenLocal) {
    this.listenLocal = listenLocal;
  }


  public V1ThanosRulerSpec logFormat(LogFormatEnum logFormat) {
    
    this.logFormat = logFormat;
    return this;
  }

   /**
   * Log format for ThanosRuler to be configured with.
   * @return logFormat
  **/
  @jakarta.annotation.Nullable
  public LogFormatEnum getLogFormat() {
    return logFormat;
  }


  public void setLogFormat(LogFormatEnum logFormat) {
    this.logFormat = logFormat;
  }


  public V1ThanosRulerSpec logLevel(LogLevelEnum logLevel) {
    
    this.logLevel = logLevel;
    return this;
  }

   /**
   * Log level for ThanosRuler to be configured with.
   * @return logLevel
  **/
  @jakarta.annotation.Nullable
  public LogLevelEnum getLogLevel() {
    return logLevel;
  }


  public void setLogLevel(LogLevelEnum logLevel) {
    this.logLevel = logLevel;
  }


  public V1ThanosRulerSpec minReadySeconds(Integer minReadySeconds) {
    
    this.minReadySeconds = minReadySeconds;
    return this;
  }

   /**
   * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) This is an alpha field from kubernetes 1.22 until 1.24 which requires enabling the StatefulSetMinReadySeconds feature gate.
   * @return minReadySeconds
  **/
  @jakarta.annotation.Nullable
  public Integer getMinReadySeconds() {
    return minReadySeconds;
  }


  public void setMinReadySeconds(Integer minReadySeconds) {
    this.minReadySeconds = minReadySeconds;
  }


  public V1ThanosRulerSpec nodeSelector(Map<String, String> nodeSelector) {
    
    this.nodeSelector = nodeSelector;
    return this;
  }

  public V1ThanosRulerSpec putNodeSelectorItem(String key, String nodeSelectorItem) {
    if (this.nodeSelector == null) {
      this.nodeSelector = new HashMap<>();
    }
    this.nodeSelector.put(key, nodeSelectorItem);
    return this;
  }

   /**
   * Define which Nodes the Pods are scheduled on.
   * @return nodeSelector
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getNodeSelector() {
    return nodeSelector;
  }


  public void setNodeSelector(Map<String, String> nodeSelector) {
    this.nodeSelector = nodeSelector;
  }


  public V1ThanosRulerSpec objectStorageConfig(V1PrometheusSpecThanosObjectStorageConfig objectStorageConfig) {
    
    this.objectStorageConfig = objectStorageConfig;
    return this;
  }

   /**
   * Get objectStorageConfig
   * @return objectStorageConfig
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecThanosObjectStorageConfig getObjectStorageConfig() {
    return objectStorageConfig;
  }


  public void setObjectStorageConfig(V1PrometheusSpecThanosObjectStorageConfig objectStorageConfig) {
    this.objectStorageConfig = objectStorageConfig;
  }


  public V1ThanosRulerSpec objectStorageConfigFile(String objectStorageConfigFile) {
    
    this.objectStorageConfigFile = objectStorageConfigFile;
    return this;
  }

   /**
   * ObjectStorageConfigFile specifies the path of the object storage configuration file. When used alongside with ObjectStorageConfig, ObjectStorageConfigFile takes precedence.
   * @return objectStorageConfigFile
  **/
  @jakarta.annotation.Nullable
  public String getObjectStorageConfigFile() {
    return objectStorageConfigFile;
  }


  public void setObjectStorageConfigFile(String objectStorageConfigFile) {
    this.objectStorageConfigFile = objectStorageConfigFile;
  }


  public V1ThanosRulerSpec paused(Boolean paused) {
    
    this.paused = paused;
    return this;
  }

   /**
   * When a ThanosRuler deployment is paused, no actions except for deletion will be performed on the underlying objects.
   * @return paused
  **/
  @jakarta.annotation.Nullable
  public Boolean getPaused() {
    return paused;
  }


  public void setPaused(Boolean paused) {
    this.paused = paused;
  }


  public V1ThanosRulerSpec podMetadata(V1ThanosRulerSpecPodMetadata podMetadata) {
    
    this.podMetadata = podMetadata;
    return this;
  }

   /**
   * Get podMetadata
   * @return podMetadata
  **/
  @jakarta.annotation.Nullable
  public V1ThanosRulerSpecPodMetadata getPodMetadata() {
    return podMetadata;
  }


  public void setPodMetadata(V1ThanosRulerSpecPodMetadata podMetadata) {
    this.podMetadata = podMetadata;
  }


  public V1ThanosRulerSpec portName(String portName) {
    
    this.portName = portName;
    return this;
  }

   /**
   * Port name used for the pods and governing service. Defaults to &#x60;web&#x60;.
   * @return portName
  **/
  @jakarta.annotation.Nullable
  public String getPortName() {
    return portName;
  }


  public void setPortName(String portName) {
    this.portName = portName;
  }


  public V1ThanosRulerSpec priorityClassName(String priorityClassName) {
    
    this.priorityClassName = priorityClassName;
    return this;
  }

   /**
   * Priority class assigned to the Pods
   * @return priorityClassName
  **/
  @jakarta.annotation.Nullable
  public String getPriorityClassName() {
    return priorityClassName;
  }


  public void setPriorityClassName(String priorityClassName) {
    this.priorityClassName = priorityClassName;
  }


  public V1ThanosRulerSpec prometheusRulesExcludedFromEnforce(List<V1PrometheusSpecPrometheusRulesExcludedFromEnforceInner> prometheusRulesExcludedFromEnforce) {
    
    this.prometheusRulesExcludedFromEnforce = prometheusRulesExcludedFromEnforce;
    return this;
  }

  public V1ThanosRulerSpec addPrometheusRulesExcludedFromEnforceItem(V1PrometheusSpecPrometheusRulesExcludedFromEnforceInner prometheusRulesExcludedFromEnforceItem) {
    if (this.prometheusRulesExcludedFromEnforce == null) {
      this.prometheusRulesExcludedFromEnforce = new ArrayList<>();
    }
    this.prometheusRulesExcludedFromEnforce.add(prometheusRulesExcludedFromEnforceItem);
    return this;
  }

   /**
   * PrometheusRulesExcludedFromEnforce - list of Prometheus rules to be excluded from enforcing of adding namespace labels. Works only if enforcedNamespaceLabel set to true. Make sure both ruleNamespace and ruleName are set for each pair Deprecated: use excludedFromEnforcement instead.
   * @return prometheusRulesExcludedFromEnforce
  **/
  @jakarta.annotation.Nullable
  public List<V1PrometheusSpecPrometheusRulesExcludedFromEnforceInner> getPrometheusRulesExcludedFromEnforce() {
    return prometheusRulesExcludedFromEnforce;
  }


  public void setPrometheusRulesExcludedFromEnforce(List<V1PrometheusSpecPrometheusRulesExcludedFromEnforceInner> prometheusRulesExcludedFromEnforce) {
    this.prometheusRulesExcludedFromEnforce = prometheusRulesExcludedFromEnforce;
  }


  public V1ThanosRulerSpec queryConfig(V1ThanosRulerSpecQueryConfig queryConfig) {
    
    this.queryConfig = queryConfig;
    return this;
  }

   /**
   * Get queryConfig
   * @return queryConfig
  **/
  @jakarta.annotation.Nullable
  public V1ThanosRulerSpecQueryConfig getQueryConfig() {
    return queryConfig;
  }


  public void setQueryConfig(V1ThanosRulerSpecQueryConfig queryConfig) {
    this.queryConfig = queryConfig;
  }


  public V1ThanosRulerSpec queryEndpoints(List<String> queryEndpoints) {
    
    this.queryEndpoints = queryEndpoints;
    return this;
  }

  public V1ThanosRulerSpec addQueryEndpointsItem(String queryEndpointsItem) {
    if (this.queryEndpoints == null) {
      this.queryEndpoints = new ArrayList<>();
    }
    this.queryEndpoints.add(queryEndpointsItem);
    return this;
  }

   /**
   * QueryEndpoints defines Thanos querier endpoints from which to query metrics. Maps to the --query flag of thanos ruler.
   * @return queryEndpoints
  **/
  @jakarta.annotation.Nullable
  public List<String> getQueryEndpoints() {
    return queryEndpoints;
  }


  public void setQueryEndpoints(List<String> queryEndpoints) {
    this.queryEndpoints = queryEndpoints;
  }


  public V1ThanosRulerSpec replicas(Integer replicas) {
    
    this.replicas = replicas;
    return this;
  }

   /**
   * Number of thanos ruler instances to deploy.
   * @return replicas
  **/
  @jakarta.annotation.Nullable
  public Integer getReplicas() {
    return replicas;
  }


  public void setReplicas(Integer replicas) {
    this.replicas = replicas;
  }


  public V1ThanosRulerSpec resources(V1ThanosRulerSpecResources resources) {
    
    this.resources = resources;
    return this;
  }

   /**
   * Get resources
   * @return resources
  **/
  @jakarta.annotation.Nullable
  public V1ThanosRulerSpecResources getResources() {
    return resources;
  }


  public void setResources(V1ThanosRulerSpecResources resources) {
    this.resources = resources;
  }


  public V1ThanosRulerSpec retention(String retention) {
    
    this.retention = retention;
    return this;
  }

   /**
   * Time duration ThanosRuler shall retain data for. Default is &#39;24h&#39;, and must match the regular expression &#x60;[0-9]+(ms|s|m|h|d|w|y)&#x60; (milliseconds seconds minutes hours days weeks years).
   * @return retention
  **/
  @jakarta.annotation.Nullable
  public String getRetention() {
    return retention;
  }


  public void setRetention(String retention) {
    this.retention = retention;
  }


  public V1ThanosRulerSpec routePrefix(String routePrefix) {
    
    this.routePrefix = routePrefix;
    return this;
  }

   /**
   * The route prefix ThanosRuler registers HTTP handlers for. This allows thanos UI to be served on a sub-path.
   * @return routePrefix
  **/
  @jakarta.annotation.Nullable
  public String getRoutePrefix() {
    return routePrefix;
  }


  public void setRoutePrefix(String routePrefix) {
    this.routePrefix = routePrefix;
  }


  public V1ThanosRulerSpec ruleNamespaceSelector(V1ThanosRulerSpecRuleNamespaceSelector ruleNamespaceSelector) {
    
    this.ruleNamespaceSelector = ruleNamespaceSelector;
    return this;
  }

   /**
   * Get ruleNamespaceSelector
   * @return ruleNamespaceSelector
  **/
  @jakarta.annotation.Nullable
  public V1ThanosRulerSpecRuleNamespaceSelector getRuleNamespaceSelector() {
    return ruleNamespaceSelector;
  }


  public void setRuleNamespaceSelector(V1ThanosRulerSpecRuleNamespaceSelector ruleNamespaceSelector) {
    this.ruleNamespaceSelector = ruleNamespaceSelector;
  }


  public V1ThanosRulerSpec ruleSelector(V1ThanosRulerSpecRuleSelector ruleSelector) {
    
    this.ruleSelector = ruleSelector;
    return this;
  }

   /**
   * Get ruleSelector
   * @return ruleSelector
  **/
  @jakarta.annotation.Nullable
  public V1ThanosRulerSpecRuleSelector getRuleSelector() {
    return ruleSelector;
  }


  public void setRuleSelector(V1ThanosRulerSpecRuleSelector ruleSelector) {
    this.ruleSelector = ruleSelector;
  }


  public V1ThanosRulerSpec securityContext(V1AlertmanagerSpecSecurityContext securityContext) {
    
    this.securityContext = securityContext;
    return this;
  }

   /**
   * Get securityContext
   * @return securityContext
  **/
  @jakarta.annotation.Nullable
  public V1AlertmanagerSpecSecurityContext getSecurityContext() {
    return securityContext;
  }


  public void setSecurityContext(V1AlertmanagerSpecSecurityContext securityContext) {
    this.securityContext = securityContext;
  }


  public V1ThanosRulerSpec serviceAccountName(String serviceAccountName) {
    
    this.serviceAccountName = serviceAccountName;
    return this;
  }

   /**
   * ServiceAccountName is the name of the ServiceAccount to use to run the Thanos Ruler Pods.
   * @return serviceAccountName
  **/
  @jakarta.annotation.Nullable
  public String getServiceAccountName() {
    return serviceAccountName;
  }


  public void setServiceAccountName(String serviceAccountName) {
    this.serviceAccountName = serviceAccountName;
  }


  public V1ThanosRulerSpec storage(V1PrometheusSpecStorage storage) {
    
    this.storage = storage;
    return this;
  }

   /**
   * Get storage
   * @return storage
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecStorage getStorage() {
    return storage;
  }


  public void setStorage(V1PrometheusSpecStorage storage) {
    this.storage = storage;
  }


  public V1ThanosRulerSpec tolerations(List<V1AlertmanagerSpecTolerationsInner> tolerations) {
    
    this.tolerations = tolerations;
    return this;
  }

  public V1ThanosRulerSpec addTolerationsItem(V1AlertmanagerSpecTolerationsInner tolerationsItem) {
    if (this.tolerations == null) {
      this.tolerations = new ArrayList<>();
    }
    this.tolerations.add(tolerationsItem);
    return this;
  }

   /**
   * If specified, the pod&#39;s tolerations.
   * @return tolerations
  **/
  @jakarta.annotation.Nullable
  public List<V1AlertmanagerSpecTolerationsInner> getTolerations() {
    return tolerations;
  }


  public void setTolerations(List<V1AlertmanagerSpecTolerationsInner> tolerations) {
    this.tolerations = tolerations;
  }


  public V1ThanosRulerSpec topologySpreadConstraints(List<V1AlertmanagerSpecTopologySpreadConstraintsInner> topologySpreadConstraints) {
    
    this.topologySpreadConstraints = topologySpreadConstraints;
    return this;
  }

  public V1ThanosRulerSpec addTopologySpreadConstraintsItem(V1AlertmanagerSpecTopologySpreadConstraintsInner topologySpreadConstraintsItem) {
    if (this.topologySpreadConstraints == null) {
      this.topologySpreadConstraints = new ArrayList<>();
    }
    this.topologySpreadConstraints.add(topologySpreadConstraintsItem);
    return this;
  }

   /**
   * If specified, the pod&#39;s topology spread constraints.
   * @return topologySpreadConstraints
  **/
  @jakarta.annotation.Nullable
  public List<V1AlertmanagerSpecTopologySpreadConstraintsInner> getTopologySpreadConstraints() {
    return topologySpreadConstraints;
  }


  public void setTopologySpreadConstraints(List<V1AlertmanagerSpecTopologySpreadConstraintsInner> topologySpreadConstraints) {
    this.topologySpreadConstraints = topologySpreadConstraints;
  }


  public V1ThanosRulerSpec tracingConfig(V1PrometheusSpecThanosTracingConfig tracingConfig) {
    
    this.tracingConfig = tracingConfig;
    return this;
  }

   /**
   * Get tracingConfig
   * @return tracingConfig
  **/
  @jakarta.annotation.Nullable
  public V1PrometheusSpecThanosTracingConfig getTracingConfig() {
    return tracingConfig;
  }


  public void setTracingConfig(V1PrometheusSpecThanosTracingConfig tracingConfig) {
    this.tracingConfig = tracingConfig;
  }


  public V1ThanosRulerSpec tracingConfigFile(String tracingConfigFile) {
    
    this.tracingConfigFile = tracingConfigFile;
    return this;
  }

   /**
   * TracingConfig specifies the path of the tracing configuration file. When used alongside with TracingConfig, TracingConfigFile takes precedence.
   * @return tracingConfigFile
  **/
  @jakarta.annotation.Nullable
  public String getTracingConfigFile() {
    return tracingConfigFile;
  }


  public void setTracingConfigFile(String tracingConfigFile) {
    this.tracingConfigFile = tracingConfigFile;
  }


  public V1ThanosRulerSpec version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Version of Thanos to be deployed.
   * @return version
  **/
  @jakarta.annotation.Nullable
  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public V1ThanosRulerSpec volumes(List<V1AlertmanagerSpecVolumesInner> volumes) {
    
    this.volumes = volumes;
    return this;
  }

  public V1ThanosRulerSpec addVolumesItem(V1AlertmanagerSpecVolumesInner volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

   /**
   * Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.
   * @return volumes
  **/
  @jakarta.annotation.Nullable
  public List<V1AlertmanagerSpecVolumesInner> getVolumes() {
    return volumes;
  }


  public void setVolumes(List<V1AlertmanagerSpecVolumesInner> volumes) {
    this.volumes = volumes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1ThanosRulerSpec v1ThanosRulerSpec = (V1ThanosRulerSpec) o;
    return Objects.equals(this.additionalArgs, v1ThanosRulerSpec.additionalArgs) &&
        Objects.equals(this.affinity, v1ThanosRulerSpec.affinity) &&
        Objects.equals(this.alertDropLabels, v1ThanosRulerSpec.alertDropLabels) &&
        Objects.equals(this.alertQueryUrl, v1ThanosRulerSpec.alertQueryUrl) &&
        Objects.equals(this.alertRelabelConfigFile, v1ThanosRulerSpec.alertRelabelConfigFile) &&
        Objects.equals(this.alertRelabelConfigs, v1ThanosRulerSpec.alertRelabelConfigs) &&
        Objects.equals(this.alertmanagersConfig, v1ThanosRulerSpec.alertmanagersConfig) &&
        Objects.equals(this.alertmanagersUrl, v1ThanosRulerSpec.alertmanagersUrl) &&
        Objects.equals(this.containers, v1ThanosRulerSpec.containers) &&
        Objects.equals(this.enforcedNamespaceLabel, v1ThanosRulerSpec.enforcedNamespaceLabel) &&
        Objects.equals(this.evaluationInterval, v1ThanosRulerSpec.evaluationInterval) &&
        Objects.equals(this.excludedFromEnforcement, v1ThanosRulerSpec.excludedFromEnforcement) &&
        Objects.equals(this.externalPrefix, v1ThanosRulerSpec.externalPrefix) &&
        Objects.equals(this.grpcServerTlsConfig, v1ThanosRulerSpec.grpcServerTlsConfig) &&
        Objects.equals(this.hostAliases, v1ThanosRulerSpec.hostAliases) &&
        Objects.equals(this.image, v1ThanosRulerSpec.image) &&
        Objects.equals(this.imagePullPolicy, v1ThanosRulerSpec.imagePullPolicy) &&
        Objects.equals(this.imagePullSecrets, v1ThanosRulerSpec.imagePullSecrets) &&
        Objects.equals(this.initContainers, v1ThanosRulerSpec.initContainers) &&
        Objects.equals(this.labels, v1ThanosRulerSpec.labels) &&
        Objects.equals(this.listenLocal, v1ThanosRulerSpec.listenLocal) &&
        Objects.equals(this.logFormat, v1ThanosRulerSpec.logFormat) &&
        Objects.equals(this.logLevel, v1ThanosRulerSpec.logLevel) &&
        Objects.equals(this.minReadySeconds, v1ThanosRulerSpec.minReadySeconds) &&
        Objects.equals(this.nodeSelector, v1ThanosRulerSpec.nodeSelector) &&
        Objects.equals(this.objectStorageConfig, v1ThanosRulerSpec.objectStorageConfig) &&
        Objects.equals(this.objectStorageConfigFile, v1ThanosRulerSpec.objectStorageConfigFile) &&
        Objects.equals(this.paused, v1ThanosRulerSpec.paused) &&
        Objects.equals(this.podMetadata, v1ThanosRulerSpec.podMetadata) &&
        Objects.equals(this.portName, v1ThanosRulerSpec.portName) &&
        Objects.equals(this.priorityClassName, v1ThanosRulerSpec.priorityClassName) &&
        Objects.equals(this.prometheusRulesExcludedFromEnforce, v1ThanosRulerSpec.prometheusRulesExcludedFromEnforce) &&
        Objects.equals(this.queryConfig, v1ThanosRulerSpec.queryConfig) &&
        Objects.equals(this.queryEndpoints, v1ThanosRulerSpec.queryEndpoints) &&
        Objects.equals(this.replicas, v1ThanosRulerSpec.replicas) &&
        Objects.equals(this.resources, v1ThanosRulerSpec.resources) &&
        Objects.equals(this.retention, v1ThanosRulerSpec.retention) &&
        Objects.equals(this.routePrefix, v1ThanosRulerSpec.routePrefix) &&
        Objects.equals(this.ruleNamespaceSelector, v1ThanosRulerSpec.ruleNamespaceSelector) &&
        Objects.equals(this.ruleSelector, v1ThanosRulerSpec.ruleSelector) &&
        Objects.equals(this.securityContext, v1ThanosRulerSpec.securityContext) &&
        Objects.equals(this.serviceAccountName, v1ThanosRulerSpec.serviceAccountName) &&
        Objects.equals(this.storage, v1ThanosRulerSpec.storage) &&
        Objects.equals(this.tolerations, v1ThanosRulerSpec.tolerations) &&
        Objects.equals(this.topologySpreadConstraints, v1ThanosRulerSpec.topologySpreadConstraints) &&
        Objects.equals(this.tracingConfig, v1ThanosRulerSpec.tracingConfig) &&
        Objects.equals(this.tracingConfigFile, v1ThanosRulerSpec.tracingConfigFile) &&
        Objects.equals(this.version, v1ThanosRulerSpec.version) &&
        Objects.equals(this.volumes, v1ThanosRulerSpec.volumes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalArgs, affinity, alertDropLabels, alertQueryUrl, alertRelabelConfigFile, alertRelabelConfigs, alertmanagersConfig, alertmanagersUrl, containers, enforcedNamespaceLabel, evaluationInterval, excludedFromEnforcement, externalPrefix, grpcServerTlsConfig, hostAliases, image, imagePullPolicy, imagePullSecrets, initContainers, labels, listenLocal, logFormat, logLevel, minReadySeconds, nodeSelector, objectStorageConfig, objectStorageConfigFile, paused, podMetadata, portName, priorityClassName, prometheusRulesExcludedFromEnforce, queryConfig, queryEndpoints, replicas, resources, retention, routePrefix, ruleNamespaceSelector, ruleSelector, securityContext, serviceAccountName, storage, tolerations, topologySpreadConstraints, tracingConfig, tracingConfigFile, version, volumes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1ThanosRulerSpec {\n");
    sb.append("    additionalArgs: ").append(toIndentedString(additionalArgs)).append("\n");
    sb.append("    affinity: ").append(toIndentedString(affinity)).append("\n");
    sb.append("    alertDropLabels: ").append(toIndentedString(alertDropLabels)).append("\n");
    sb.append("    alertQueryUrl: ").append(toIndentedString(alertQueryUrl)).append("\n");
    sb.append("    alertRelabelConfigFile: ").append(toIndentedString(alertRelabelConfigFile)).append("\n");
    sb.append("    alertRelabelConfigs: ").append(toIndentedString(alertRelabelConfigs)).append("\n");
    sb.append("    alertmanagersConfig: ").append(toIndentedString(alertmanagersConfig)).append("\n");
    sb.append("    alertmanagersUrl: ").append(toIndentedString(alertmanagersUrl)).append("\n");
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    enforcedNamespaceLabel: ").append(toIndentedString(enforcedNamespaceLabel)).append("\n");
    sb.append("    evaluationInterval: ").append(toIndentedString(evaluationInterval)).append("\n");
    sb.append("    excludedFromEnforcement: ").append(toIndentedString(excludedFromEnforcement)).append("\n");
    sb.append("    externalPrefix: ").append(toIndentedString(externalPrefix)).append("\n");
    sb.append("    grpcServerTlsConfig: ").append(toIndentedString(grpcServerTlsConfig)).append("\n");
    sb.append("    hostAliases: ").append(toIndentedString(hostAliases)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imagePullPolicy: ").append(toIndentedString(imagePullPolicy)).append("\n");
    sb.append("    imagePullSecrets: ").append(toIndentedString(imagePullSecrets)).append("\n");
    sb.append("    initContainers: ").append(toIndentedString(initContainers)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    listenLocal: ").append(toIndentedString(listenLocal)).append("\n");
    sb.append("    logFormat: ").append(toIndentedString(logFormat)).append("\n");
    sb.append("    logLevel: ").append(toIndentedString(logLevel)).append("\n");
    sb.append("    minReadySeconds: ").append(toIndentedString(minReadySeconds)).append("\n");
    sb.append("    nodeSelector: ").append(toIndentedString(nodeSelector)).append("\n");
    sb.append("    objectStorageConfig: ").append(toIndentedString(objectStorageConfig)).append("\n");
    sb.append("    objectStorageConfigFile: ").append(toIndentedString(objectStorageConfigFile)).append("\n");
    sb.append("    paused: ").append(toIndentedString(paused)).append("\n");
    sb.append("    podMetadata: ").append(toIndentedString(podMetadata)).append("\n");
    sb.append("    portName: ").append(toIndentedString(portName)).append("\n");
    sb.append("    priorityClassName: ").append(toIndentedString(priorityClassName)).append("\n");
    sb.append("    prometheusRulesExcludedFromEnforce: ").append(toIndentedString(prometheusRulesExcludedFromEnforce)).append("\n");
    sb.append("    queryConfig: ").append(toIndentedString(queryConfig)).append("\n");
    sb.append("    queryEndpoints: ").append(toIndentedString(queryEndpoints)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    retention: ").append(toIndentedString(retention)).append("\n");
    sb.append("    routePrefix: ").append(toIndentedString(routePrefix)).append("\n");
    sb.append("    ruleNamespaceSelector: ").append(toIndentedString(ruleNamespaceSelector)).append("\n");
    sb.append("    ruleSelector: ").append(toIndentedString(ruleSelector)).append("\n");
    sb.append("    securityContext: ").append(toIndentedString(securityContext)).append("\n");
    sb.append("    serviceAccountName: ").append(toIndentedString(serviceAccountName)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("    tolerations: ").append(toIndentedString(tolerations)).append("\n");
    sb.append("    topologySpreadConstraints: ").append(toIndentedString(topologySpreadConstraints)).append("\n");
    sb.append("    tracingConfig: ").append(toIndentedString(tracingConfig)).append("\n");
    sb.append("    tracingConfigFile: ").append(toIndentedString(tracingConfigFile)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalArgs");
    openapiFields.add("affinity");
    openapiFields.add("alertDropLabels");
    openapiFields.add("alertQueryUrl");
    openapiFields.add("alertRelabelConfigFile");
    openapiFields.add("alertRelabelConfigs");
    openapiFields.add("alertmanagersConfig");
    openapiFields.add("alertmanagersUrl");
    openapiFields.add("containers");
    openapiFields.add("enforcedNamespaceLabel");
    openapiFields.add("evaluationInterval");
    openapiFields.add("excludedFromEnforcement");
    openapiFields.add("externalPrefix");
    openapiFields.add("grpcServerTlsConfig");
    openapiFields.add("hostAliases");
    openapiFields.add("image");
    openapiFields.add("imagePullPolicy");
    openapiFields.add("imagePullSecrets");
    openapiFields.add("initContainers");
    openapiFields.add("labels");
    openapiFields.add("listenLocal");
    openapiFields.add("logFormat");
    openapiFields.add("logLevel");
    openapiFields.add("minReadySeconds");
    openapiFields.add("nodeSelector");
    openapiFields.add("objectStorageConfig");
    openapiFields.add("objectStorageConfigFile");
    openapiFields.add("paused");
    openapiFields.add("podMetadata");
    openapiFields.add("portName");
    openapiFields.add("priorityClassName");
    openapiFields.add("prometheusRulesExcludedFromEnforce");
    openapiFields.add("queryConfig");
    openapiFields.add("queryEndpoints");
    openapiFields.add("replicas");
    openapiFields.add("resources");
    openapiFields.add("retention");
    openapiFields.add("routePrefix");
    openapiFields.add("ruleNamespaceSelector");
    openapiFields.add("ruleSelector");
    openapiFields.add("securityContext");
    openapiFields.add("serviceAccountName");
    openapiFields.add("storage");
    openapiFields.add("tolerations");
    openapiFields.add("topologySpreadConstraints");
    openapiFields.add("tracingConfig");
    openapiFields.add("tracingConfigFile");
    openapiFields.add("version");
    openapiFields.add("volumes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1ThanosRulerSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1ThanosRulerSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1ThanosRulerSpec is not found in the empty JSON string", V1ThanosRulerSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1ThanosRulerSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1ThanosRulerSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("additionalArgs") != null && !jsonObj.get("additionalArgs").isJsonNull()) {
        JsonArray jsonArrayadditionalArgs = jsonObj.getAsJsonArray("additionalArgs");
        if (jsonArrayadditionalArgs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalArgs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalArgs` to be an array in the JSON string but got `%s`", jsonObj.get("additionalArgs").toString()));
          }

          // validate the optional field `additionalArgs` (array)
          for (int i = 0; i < jsonArrayadditionalArgs.size(); i++) {
            V1PrometheusSpecAdditionalArgsInner.validateJsonObject(jsonArrayadditionalArgs.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `affinity`
      if (jsonObj.get("affinity") != null && !jsonObj.get("affinity").isJsonNull()) {
        V1AlertmanagerSpecAffinity.validateJsonObject(jsonObj.getAsJsonObject("affinity"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("alertDropLabels") != null && !jsonObj.get("alertDropLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertDropLabels` to be an array in the JSON string but got `%s`", jsonObj.get("alertDropLabels").toString()));
      }
      if ((jsonObj.get("alertQueryUrl") != null && !jsonObj.get("alertQueryUrl").isJsonNull()) && !jsonObj.get("alertQueryUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertQueryUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertQueryUrl").toString()));
      }
      if ((jsonObj.get("alertRelabelConfigFile") != null && !jsonObj.get("alertRelabelConfigFile").isJsonNull()) && !jsonObj.get("alertRelabelConfigFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertRelabelConfigFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertRelabelConfigFile").toString()));
      }
      // validate the optional field `alertRelabelConfigs`
      if (jsonObj.get("alertRelabelConfigs") != null && !jsonObj.get("alertRelabelConfigs").isJsonNull()) {
        V1ThanosRulerSpecAlertRelabelConfigs.validateJsonObject(jsonObj.getAsJsonObject("alertRelabelConfigs"));
      }
      // validate the optional field `alertmanagersConfig`
      if (jsonObj.get("alertmanagersConfig") != null && !jsonObj.get("alertmanagersConfig").isJsonNull()) {
        V1ThanosRulerSpecAlertmanagersConfig.validateJsonObject(jsonObj.getAsJsonObject("alertmanagersConfig"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("alertmanagersUrl") != null && !jsonObj.get("alertmanagersUrl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertmanagersUrl` to be an array in the JSON string but got `%s`", jsonObj.get("alertmanagersUrl").toString()));
      }
      if (jsonObj.get("containers") != null && !jsonObj.get("containers").isJsonNull()) {
        JsonArray jsonArraycontainers = jsonObj.getAsJsonArray("containers");
        if (jsonArraycontainers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("containers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `containers` to be an array in the JSON string but got `%s`", jsonObj.get("containers").toString()));
          }

          // validate the optional field `containers` (array)
          for (int i = 0; i < jsonArraycontainers.size(); i++) {
            V1AlertmanagerSpecContainersInner.validateJsonObject(jsonArraycontainers.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("enforcedNamespaceLabel") != null && !jsonObj.get("enforcedNamespaceLabel").isJsonNull()) && !jsonObj.get("enforcedNamespaceLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enforcedNamespaceLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enforcedNamespaceLabel").toString()));
      }
      if ((jsonObj.get("evaluationInterval") != null && !jsonObj.get("evaluationInterval").isJsonNull()) && !jsonObj.get("evaluationInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationInterval").toString()));
      }
      if (jsonObj.get("excludedFromEnforcement") != null && !jsonObj.get("excludedFromEnforcement").isJsonNull()) {
        JsonArray jsonArrayexcludedFromEnforcement = jsonObj.getAsJsonArray("excludedFromEnforcement");
        if (jsonArrayexcludedFromEnforcement != null) {
          // ensure the json data is an array
          if (!jsonObj.get("excludedFromEnforcement").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `excludedFromEnforcement` to be an array in the JSON string but got `%s`", jsonObj.get("excludedFromEnforcement").toString()));
          }

          // validate the optional field `excludedFromEnforcement` (array)
          for (int i = 0; i < jsonArrayexcludedFromEnforcement.size(); i++) {
            V1PrometheusSpecExcludedFromEnforcementInner.validateJsonObject(jsonArrayexcludedFromEnforcement.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("externalPrefix") != null && !jsonObj.get("externalPrefix").isJsonNull()) && !jsonObj.get("externalPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalPrefix").toString()));
      }
      // validate the optional field `grpcServerTlsConfig`
      if (jsonObj.get("grpcServerTlsConfig") != null && !jsonObj.get("grpcServerTlsConfig").isJsonNull()) {
        V1ThanosRulerSpecGrpcServerTlsConfig.validateJsonObject(jsonObj.getAsJsonObject("grpcServerTlsConfig"));
      }
      if (jsonObj.get("hostAliases") != null && !jsonObj.get("hostAliases").isJsonNull()) {
        JsonArray jsonArrayhostAliases = jsonObj.getAsJsonArray("hostAliases");
        if (jsonArrayhostAliases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hostAliases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hostAliases` to be an array in the JSON string but got `%s`", jsonObj.get("hostAliases").toString()));
          }

          // validate the optional field `hostAliases` (array)
          for (int i = 0; i < jsonArrayhostAliases.size(); i++) {
            V1AlertmanagerSpecHostAliasesInner.validateJsonObject(jsonArrayhostAliases.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("imagePullPolicy") != null && !jsonObj.get("imagePullPolicy").isJsonNull()) && !jsonObj.get("imagePullPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imagePullPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imagePullPolicy").toString()));
      }
      if (jsonObj.get("imagePullSecrets") != null && !jsonObj.get("imagePullSecrets").isJsonNull()) {
        JsonArray jsonArrayimagePullSecrets = jsonObj.getAsJsonArray("imagePullSecrets");
        if (jsonArrayimagePullSecrets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("imagePullSecrets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `imagePullSecrets` to be an array in the JSON string but got `%s`", jsonObj.get("imagePullSecrets").toString()));
          }

          // validate the optional field `imagePullSecrets` (array)
          for (int i = 0; i < jsonArrayimagePullSecrets.size(); i++) {
            V1AlertmanagerSpecImagePullSecretsInner.validateJsonObject(jsonArrayimagePullSecrets.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("initContainers") != null && !jsonObj.get("initContainers").isJsonNull()) {
        JsonArray jsonArrayinitContainers = jsonObj.getAsJsonArray("initContainers");
        if (jsonArrayinitContainers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("initContainers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `initContainers` to be an array in the JSON string but got `%s`", jsonObj.get("initContainers").toString()));
          }

          // validate the optional field `initContainers` (array)
          for (int i = 0; i < jsonArrayinitContainers.size(); i++) {
            V1AlertmanagerSpecContainersInner.validateJsonObject(jsonArrayinitContainers.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("logFormat") != null && !jsonObj.get("logFormat").isJsonNull()) && !jsonObj.get("logFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logFormat").toString()));
      }
      if ((jsonObj.get("logLevel") != null && !jsonObj.get("logLevel").isJsonNull()) && !jsonObj.get("logLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logLevel").toString()));
      }
      // validate the optional field `objectStorageConfig`
      if (jsonObj.get("objectStorageConfig") != null && !jsonObj.get("objectStorageConfig").isJsonNull()) {
        V1PrometheusSpecThanosObjectStorageConfig.validateJsonObject(jsonObj.getAsJsonObject("objectStorageConfig"));
      }
      if ((jsonObj.get("objectStorageConfigFile") != null && !jsonObj.get("objectStorageConfigFile").isJsonNull()) && !jsonObj.get("objectStorageConfigFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectStorageConfigFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectStorageConfigFile").toString()));
      }
      // validate the optional field `podMetadata`
      if (jsonObj.get("podMetadata") != null && !jsonObj.get("podMetadata").isJsonNull()) {
        V1ThanosRulerSpecPodMetadata.validateJsonObject(jsonObj.getAsJsonObject("podMetadata"));
      }
      if ((jsonObj.get("portName") != null && !jsonObj.get("portName").isJsonNull()) && !jsonObj.get("portName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portName").toString()));
      }
      if ((jsonObj.get("priorityClassName") != null && !jsonObj.get("priorityClassName").isJsonNull()) && !jsonObj.get("priorityClassName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priorityClassName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priorityClassName").toString()));
      }
      if (jsonObj.get("prometheusRulesExcludedFromEnforce") != null && !jsonObj.get("prometheusRulesExcludedFromEnforce").isJsonNull()) {
        JsonArray jsonArrayprometheusRulesExcludedFromEnforce = jsonObj.getAsJsonArray("prometheusRulesExcludedFromEnforce");
        if (jsonArrayprometheusRulesExcludedFromEnforce != null) {
          // ensure the json data is an array
          if (!jsonObj.get("prometheusRulesExcludedFromEnforce").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `prometheusRulesExcludedFromEnforce` to be an array in the JSON string but got `%s`", jsonObj.get("prometheusRulesExcludedFromEnforce").toString()));
          }

          // validate the optional field `prometheusRulesExcludedFromEnforce` (array)
          for (int i = 0; i < jsonArrayprometheusRulesExcludedFromEnforce.size(); i++) {
            V1PrometheusSpecPrometheusRulesExcludedFromEnforceInner.validateJsonObject(jsonArrayprometheusRulesExcludedFromEnforce.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `queryConfig`
      if (jsonObj.get("queryConfig") != null && !jsonObj.get("queryConfig").isJsonNull()) {
        V1ThanosRulerSpecQueryConfig.validateJsonObject(jsonObj.getAsJsonObject("queryConfig"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("queryEndpoints") != null && !jsonObj.get("queryEndpoints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryEndpoints` to be an array in the JSON string but got `%s`", jsonObj.get("queryEndpoints").toString()));
      }
      // validate the optional field `resources`
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        V1ThanosRulerSpecResources.validateJsonObject(jsonObj.getAsJsonObject("resources"));
      }
      if ((jsonObj.get("retention") != null && !jsonObj.get("retention").isJsonNull()) && !jsonObj.get("retention").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retention` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retention").toString()));
      }
      if ((jsonObj.get("routePrefix") != null && !jsonObj.get("routePrefix").isJsonNull()) && !jsonObj.get("routePrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routePrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routePrefix").toString()));
      }
      // validate the optional field `ruleNamespaceSelector`
      if (jsonObj.get("ruleNamespaceSelector") != null && !jsonObj.get("ruleNamespaceSelector").isJsonNull()) {
        V1ThanosRulerSpecRuleNamespaceSelector.validateJsonObject(jsonObj.getAsJsonObject("ruleNamespaceSelector"));
      }
      // validate the optional field `ruleSelector`
      if (jsonObj.get("ruleSelector") != null && !jsonObj.get("ruleSelector").isJsonNull()) {
        V1ThanosRulerSpecRuleSelector.validateJsonObject(jsonObj.getAsJsonObject("ruleSelector"));
      }
      // validate the optional field `securityContext`
      if (jsonObj.get("securityContext") != null && !jsonObj.get("securityContext").isJsonNull()) {
        V1AlertmanagerSpecSecurityContext.validateJsonObject(jsonObj.getAsJsonObject("securityContext"));
      }
      if ((jsonObj.get("serviceAccountName") != null && !jsonObj.get("serviceAccountName").isJsonNull()) && !jsonObj.get("serviceAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccountName").toString()));
      }
      // validate the optional field `storage`
      if (jsonObj.get("storage") != null && !jsonObj.get("storage").isJsonNull()) {
        V1PrometheusSpecStorage.validateJsonObject(jsonObj.getAsJsonObject("storage"));
      }
      if (jsonObj.get("tolerations") != null && !jsonObj.get("tolerations").isJsonNull()) {
        JsonArray jsonArraytolerations = jsonObj.getAsJsonArray("tolerations");
        if (jsonArraytolerations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tolerations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tolerations` to be an array in the JSON string but got `%s`", jsonObj.get("tolerations").toString()));
          }

          // validate the optional field `tolerations` (array)
          for (int i = 0; i < jsonArraytolerations.size(); i++) {
            V1AlertmanagerSpecTolerationsInner.validateJsonObject(jsonArraytolerations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("topologySpreadConstraints") != null && !jsonObj.get("topologySpreadConstraints").isJsonNull()) {
        JsonArray jsonArraytopologySpreadConstraints = jsonObj.getAsJsonArray("topologySpreadConstraints");
        if (jsonArraytopologySpreadConstraints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("topologySpreadConstraints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `topologySpreadConstraints` to be an array in the JSON string but got `%s`", jsonObj.get("topologySpreadConstraints").toString()));
          }

          // validate the optional field `topologySpreadConstraints` (array)
          for (int i = 0; i < jsonArraytopologySpreadConstraints.size(); i++) {
            V1AlertmanagerSpecTopologySpreadConstraintsInner.validateJsonObject(jsonArraytopologySpreadConstraints.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `tracingConfig`
      if (jsonObj.get("tracingConfig") != null && !jsonObj.get("tracingConfig").isJsonNull()) {
        V1PrometheusSpecThanosTracingConfig.validateJsonObject(jsonObj.getAsJsonObject("tracingConfig"));
      }
      if ((jsonObj.get("tracingConfigFile") != null && !jsonObj.get("tracingConfigFile").isJsonNull()) && !jsonObj.get("tracingConfigFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracingConfigFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracingConfigFile").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        JsonArray jsonArrayvolumes = jsonObj.getAsJsonArray("volumes");
        if (jsonArrayvolumes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumes` to be an array in the JSON string but got `%s`", jsonObj.get("volumes").toString()));
          }

          // validate the optional field `volumes` (array)
          for (int i = 0; i < jsonArrayvolumes.size(); i++) {
            V1AlertmanagerSpecVolumesInner.validateJsonObject(jsonArrayvolumes.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1ThanosRulerSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1ThanosRulerSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1ThanosRulerSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1ThanosRulerSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<V1ThanosRulerSpec>() {
           @Override
           public void write(JsonWriter out, V1ThanosRulerSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1ThanosRulerSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1ThanosRulerSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1ThanosRulerSpec
  * @throws IOException if the JSON string is invalid with respect to V1ThanosRulerSpec
  */
  public static V1ThanosRulerSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1ThanosRulerSpec.class);
  }

 /**
  * Convert an instance of V1ThanosRulerSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

