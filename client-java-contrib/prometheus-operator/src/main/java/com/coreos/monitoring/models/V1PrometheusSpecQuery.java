/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * QuerySpec defines the query command line flags when starting Prometheus.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1PrometheusSpecQuery {
  public static final String SERIALIZED_NAME_LOOKBACK_DELTA = "lookbackDelta";
  @SerializedName(SERIALIZED_NAME_LOOKBACK_DELTA)
  private String lookbackDelta;

  public static final String SERIALIZED_NAME_MAX_CONCURRENCY = "maxConcurrency";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENCY)
  private Integer maxConcurrency;

  public static final String SERIALIZED_NAME_MAX_SAMPLES = "maxSamples";
  @SerializedName(SERIALIZED_NAME_MAX_SAMPLES)
  private Integer maxSamples;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public V1PrometheusSpecQuery() {
  }

  public V1PrometheusSpecQuery lookbackDelta(String lookbackDelta) {
    
    this.lookbackDelta = lookbackDelta;
    return this;
  }

   /**
   * The delta difference allowed for retrieving metrics during expression evaluations.
   * @return lookbackDelta
  **/
  @jakarta.annotation.Nullable
  public String getLookbackDelta() {
    return lookbackDelta;
  }


  public void setLookbackDelta(String lookbackDelta) {
    this.lookbackDelta = lookbackDelta;
  }


  public V1PrometheusSpecQuery maxConcurrency(Integer maxConcurrency) {
    
    this.maxConcurrency = maxConcurrency;
    return this;
  }

   /**
   * Number of concurrent queries that can be run at once.
   * minimum: 1
   * @return maxConcurrency
  **/
  @jakarta.annotation.Nullable
  public Integer getMaxConcurrency() {
    return maxConcurrency;
  }


  public void setMaxConcurrency(Integer maxConcurrency) {
    this.maxConcurrency = maxConcurrency;
  }


  public V1PrometheusSpecQuery maxSamples(Integer maxSamples) {
    
    this.maxSamples = maxSamples;
    return this;
  }

   /**
   * Maximum number of samples a single query can load into memory. Note that queries will fail if they would load more samples than this into memory, so this also limits the number of samples a query can return.
   * @return maxSamples
  **/
  @jakarta.annotation.Nullable
  public Integer getMaxSamples() {
    return maxSamples;
  }


  public void setMaxSamples(Integer maxSamples) {
    this.maxSamples = maxSamples;
  }


  public V1PrometheusSpecQuery timeout(String timeout) {
    
    this.timeout = timeout;
    return this;
  }

   /**
   * Maximum time a query may take before being aborted.
   * @return timeout
  **/
  @jakarta.annotation.Nullable
  public String getTimeout() {
    return timeout;
  }


  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PrometheusSpecQuery v1PrometheusSpecQuery = (V1PrometheusSpecQuery) o;
    return Objects.equals(this.lookbackDelta, v1PrometheusSpecQuery.lookbackDelta) &&
        Objects.equals(this.maxConcurrency, v1PrometheusSpecQuery.maxConcurrency) &&
        Objects.equals(this.maxSamples, v1PrometheusSpecQuery.maxSamples) &&
        Objects.equals(this.timeout, v1PrometheusSpecQuery.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lookbackDelta, maxConcurrency, maxSamples, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PrometheusSpecQuery {\n");
    sb.append("    lookbackDelta: ").append(toIndentedString(lookbackDelta)).append("\n");
    sb.append("    maxConcurrency: ").append(toIndentedString(maxConcurrency)).append("\n");
    sb.append("    maxSamples: ").append(toIndentedString(maxSamples)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lookbackDelta");
    openapiFields.add("maxConcurrency");
    openapiFields.add("maxSamples");
    openapiFields.add("timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1PrometheusSpecQuery
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1PrometheusSpecQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1PrometheusSpecQuery is not found in the empty JSON string", V1PrometheusSpecQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1PrometheusSpecQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1PrometheusSpecQuery` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("lookbackDelta") != null && !jsonObj.get("lookbackDelta").isJsonNull()) && !jsonObj.get("lookbackDelta").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lookbackDelta` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lookbackDelta").toString()));
      }
      if ((jsonObj.get("timeout") != null && !jsonObj.get("timeout").isJsonNull()) && !jsonObj.get("timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1PrometheusSpecQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1PrometheusSpecQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1PrometheusSpecQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1PrometheusSpecQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<V1PrometheusSpecQuery>() {
           @Override
           public void write(JsonWriter out, V1PrometheusSpecQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1PrometheusSpecQuery read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1PrometheusSpecQuery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1PrometheusSpecQuery
  * @throws IOException if the JSON string is invalid with respect to V1PrometheusSpecQuery
  */
  public static V1PrometheusSpecQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1PrometheusSpecQuery.class);
  }

 /**
  * Convert an instance of V1PrometheusSpecQuery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

