/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * Rule describes an alerting or recording rule See Prometheus documentation: [alerting](https://www.prometheus.io/docs/prometheus/latest/configuration/alerting_rules/) or [recording](https://www.prometheus.io/docs/prometheus/latest/configuration/recording_rules/#recording-rules) rule
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1PrometheusRuleSpecGroupsInnerRulesInner {
  public static final String SERIALIZED_NAME_ALERT = "alert";
  @SerializedName(SERIALIZED_NAME_ALERT)
  private String alert;

  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Map<String, String> annotations = new HashMap<>();

  public static final String SERIALIZED_NAME_EXPR = "expr";
  @SerializedName(SERIALIZED_NAME_EXPR)
  private Object expr;

  public static final String SERIALIZED_NAME_FOR = "for";
  @SerializedName(SERIALIZED_NAME_FOR)
  private String _for;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_RECORD = "record";
  @SerializedName(SERIALIZED_NAME_RECORD)
  private String record;

  public V1PrometheusRuleSpecGroupsInnerRulesInner() {
  }

  public V1PrometheusRuleSpecGroupsInnerRulesInner alert(String alert) {
    
    this.alert = alert;
    return this;
  }

   /**
   * Name of the alert. Must be a valid label value. Only one of &#x60;record&#x60; and &#x60;alert&#x60; must be set.
   * @return alert
  **/
  @jakarta.annotation.Nullable
  public String getAlert() {
    return alert;
  }


  public void setAlert(String alert) {
    this.alert = alert;
  }


  public V1PrometheusRuleSpecGroupsInnerRulesInner annotations(Map<String, String> annotations) {
    
    this.annotations = annotations;
    return this;
  }

  public V1PrometheusRuleSpecGroupsInnerRulesInner putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

   /**
   * Annotations to add to each alert. Only valid for alerting rules.
   * @return annotations
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getAnnotations() {
    return annotations;
  }


  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }


  public V1PrometheusRuleSpecGroupsInnerRulesInner expr(Object expr) {
    
    this.expr = expr;
    return this;
  }

   /**
   * PromQL expression to evaluate.
   * @return expr
  **/
  @jakarta.annotation.Nonnull
  public Object getExpr() {
    return expr;
  }


  public void setExpr(Object expr) {
    this.expr = expr;
  }


  public V1PrometheusRuleSpecGroupsInnerRulesInner _for(String _for) {
    
    this._for = _for;
    return this;
  }

   /**
   * Alerts are considered firing once they have been returned for this long.
   * @return _for
  **/
  @jakarta.annotation.Nullable
  public String getFor() {
    return _for;
  }


  public void setFor(String _for) {
    this._for = _for;
  }


  public V1PrometheusRuleSpecGroupsInnerRulesInner labels(Map<String, String> labels) {
    
    this.labels = labels;
    return this;
  }

  public V1PrometheusRuleSpecGroupsInnerRulesInner putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

   /**
   * Labels to add or overwrite.
   * @return labels
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }


  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public V1PrometheusRuleSpecGroupsInnerRulesInner record(String record) {
    
    this.record = record;
    return this;
  }

   /**
   * Name of the time series to output to. Must be a valid metric name. Only one of &#x60;record&#x60; and &#x60;alert&#x60; must be set.
   * @return record
  **/
  @jakarta.annotation.Nullable
  public String getRecord() {
    return record;
  }


  public void setRecord(String record) {
    this.record = record;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PrometheusRuleSpecGroupsInnerRulesInner v1PrometheusRuleSpecGroupsInnerRulesInner = (V1PrometheusRuleSpecGroupsInnerRulesInner) o;
    return Objects.equals(this.alert, v1PrometheusRuleSpecGroupsInnerRulesInner.alert) &&
        Objects.equals(this.annotations, v1PrometheusRuleSpecGroupsInnerRulesInner.annotations) &&
        Objects.equals(this.expr, v1PrometheusRuleSpecGroupsInnerRulesInner.expr) &&
        Objects.equals(this._for, v1PrometheusRuleSpecGroupsInnerRulesInner._for) &&
        Objects.equals(this.labels, v1PrometheusRuleSpecGroupsInnerRulesInner.labels) &&
        Objects.equals(this.record, v1PrometheusRuleSpecGroupsInnerRulesInner.record);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alert, annotations, expr, _for, labels, record);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PrometheusRuleSpecGroupsInnerRulesInner {\n");
    sb.append("    alert: ").append(toIndentedString(alert)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    expr: ").append(toIndentedString(expr)).append("\n");
    sb.append("    _for: ").append(toIndentedString(_for)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    record: ").append(toIndentedString(record)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alert");
    openapiFields.add("annotations");
    openapiFields.add("expr");
    openapiFields.add("for");
    openapiFields.add("labels");
    openapiFields.add("record");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("expr");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1PrometheusRuleSpecGroupsInnerRulesInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1PrometheusRuleSpecGroupsInnerRulesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1PrometheusRuleSpecGroupsInnerRulesInner is not found in the empty JSON string", V1PrometheusRuleSpecGroupsInnerRulesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1PrometheusRuleSpecGroupsInnerRulesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1PrometheusRuleSpecGroupsInnerRulesInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V1PrometheusRuleSpecGroupsInnerRulesInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("alert") != null && !jsonObj.get("alert").isJsonNull()) && !jsonObj.get("alert").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alert` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alert").toString()));
      }
      if ((jsonObj.get("for") != null && !jsonObj.get("for").isJsonNull()) && !jsonObj.get("for").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `for` to be a primitive type in the JSON string but got `%s`", jsonObj.get("for").toString()));
      }
      if ((jsonObj.get("record") != null && !jsonObj.get("record").isJsonNull()) && !jsonObj.get("record").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `record` to be a primitive type in the JSON string but got `%s`", jsonObj.get("record").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1PrometheusRuleSpecGroupsInnerRulesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1PrometheusRuleSpecGroupsInnerRulesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1PrometheusRuleSpecGroupsInnerRulesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1PrometheusRuleSpecGroupsInnerRulesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<V1PrometheusRuleSpecGroupsInnerRulesInner>() {
           @Override
           public void write(JsonWriter out, V1PrometheusRuleSpecGroupsInnerRulesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1PrometheusRuleSpecGroupsInnerRulesInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1PrometheusRuleSpecGroupsInnerRulesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1PrometheusRuleSpecGroupsInnerRulesInner
  * @throws IOException if the JSON string is invalid with respect to V1PrometheusRuleSpecGroupsInnerRulesInner
  */
  public static V1PrometheusRuleSpecGroupsInnerRulesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1PrometheusRuleSpecGroupsInnerRulesInner.class);
  }

 /**
  * Convert an instance of V1PrometheusRuleSpecGroupsInnerRulesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

