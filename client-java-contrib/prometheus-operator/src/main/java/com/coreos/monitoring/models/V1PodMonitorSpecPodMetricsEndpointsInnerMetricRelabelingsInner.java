/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coreos.monitoring.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.kubernetes.client.openapi.JSON;

/**
 * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines &#x60;&lt;metric_relabel_configs&gt;&#x60;-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:02:10.169254Z[Etc/UTC]")
public class V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner {
  /**
   * Action to perform based on regex matching. Default is &#39;replace&#39;. uppercase and lowercase actions require Prometheus &gt;&#x3D; 2.36.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    REPLACE("replace"),
    
    REPLACE("Replace"),
    
    KEEP("keep"),
    
    KEEP("Keep"),
    
    DROP("drop"),
    
    DROP("Drop"),
    
    HASHMOD("hashmod"),
    
    HASHMOD("HashMod"),
    
    LABELMAP("labelmap"),
    
    LABELMAP("LabelMap"),
    
    LABELDROP("labeldrop"),
    
    LABELDROP("LabelDrop"),
    
    LABELKEEP("labelkeep"),
    
    LABELKEEP("LabelKeep"),
    
    LOWERCASE("lowercase"),
    
    LOWERCASE("Lowercase"),
    
    UPPERCASE("uppercase"),
    
    UPPERCASE("Uppercase"),
    
    KEEPEQUAL("keepequal"),
    
    KEEPEQUAL("KeepEqual"),
    
    DROPEQUAL("dropequal"),
    
    DROPEQUAL("DropEqual");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_MODULUS = "modulus";
  @SerializedName(SERIALIZED_NAME_MODULUS)
  private Long modulus;

  public static final String SERIALIZED_NAME_REGEX = "regex";
  @SerializedName(SERIALIZED_NAME_REGEX)
  private String regex;

  public static final String SERIALIZED_NAME_REPLACEMENT = "replacement";
  @SerializedName(SERIALIZED_NAME_REPLACEMENT)
  private String replacement;

  public static final String SERIALIZED_NAME_SEPARATOR = "separator";
  @SerializedName(SERIALIZED_NAME_SEPARATOR)
  private String separator;

  public static final String SERIALIZED_NAME_SOURCE_LABELS = "sourceLabels";
  @SerializedName(SERIALIZED_NAME_SOURCE_LABELS)
  private List<String> sourceLabels;

  public static final String SERIALIZED_NAME_TARGET_LABEL = "targetLabel";
  @SerializedName(SERIALIZED_NAME_TARGET_LABEL)
  private String targetLabel;

  public V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner() {
  }

  public V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner action(ActionEnum action) {
    
    this.action = action;
    return this;
  }

   /**
   * Action to perform based on regex matching. Default is &#39;replace&#39;. uppercase and lowercase actions require Prometheus &gt;&#x3D; 2.36.
   * @return action
  **/
  @jakarta.annotation.Nullable
  public ActionEnum getAction() {
    return action;
  }


  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner modulus(Long modulus) {
    
    this.modulus = modulus;
    return this;
  }

   /**
   * Modulus to take of the hash of the source label values.
   * @return modulus
  **/
  @jakarta.annotation.Nullable
  public Long getModulus() {
    return modulus;
  }


  public void setModulus(Long modulus) {
    this.modulus = modulus;
  }


  public V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner regex(String regex) {
    
    this.regex = regex;
    return this;
  }

   /**
   * Regular expression against which the extracted value is matched. Default is &#39;(.*)&#39;
   * @return regex
  **/
  @jakarta.annotation.Nullable
  public String getRegex() {
    return regex;
  }


  public void setRegex(String regex) {
    this.regex = regex;
  }


  public V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner replacement(String replacement) {
    
    this.replacement = replacement;
    return this;
  }

   /**
   * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is &#39;$1&#39;
   * @return replacement
  **/
  @jakarta.annotation.Nullable
  public String getReplacement() {
    return replacement;
  }


  public void setReplacement(String replacement) {
    this.replacement = replacement;
  }


  public V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner separator(String separator) {
    
    this.separator = separator;
    return this;
  }

   /**
   * Separator placed between concatenated source label values. default is &#39;;&#39;.
   * @return separator
  **/
  @jakarta.annotation.Nullable
  public String getSeparator() {
    return separator;
  }


  public void setSeparator(String separator) {
    this.separator = separator;
  }


  public V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner sourceLabels(List<String> sourceLabels) {
    
    this.sourceLabels = sourceLabels;
    return this;
  }

  public V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner addSourceLabelsItem(String sourceLabelsItem) {
    if (this.sourceLabels == null) {
      this.sourceLabels = new ArrayList<>();
    }
    this.sourceLabels.add(sourceLabelsItem);
    return this;
  }

   /**
   * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
   * @return sourceLabels
  **/
  @jakarta.annotation.Nullable
  public List<String> getSourceLabels() {
    return sourceLabels;
  }


  public void setSourceLabels(List<String> sourceLabels) {
    this.sourceLabels = sourceLabels;
  }


  public V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner targetLabel(String targetLabel) {
    
    this.targetLabel = targetLabel;
    return this;
  }

   /**
   * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
   * @return targetLabel
  **/
  @jakarta.annotation.Nullable
  public String getTargetLabel() {
    return targetLabel;
  }


  public void setTargetLabel(String targetLabel) {
    this.targetLabel = targetLabel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner v1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner = (V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner) o;
    return Objects.equals(this.action, v1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner.action) &&
        Objects.equals(this.modulus, v1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner.modulus) &&
        Objects.equals(this.regex, v1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner.regex) &&
        Objects.equals(this.replacement, v1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner.replacement) &&
        Objects.equals(this.separator, v1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner.separator) &&
        Objects.equals(this.sourceLabels, v1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner.sourceLabels) &&
        Objects.equals(this.targetLabel, v1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner.targetLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, modulus, regex, replacement, separator, sourceLabels, targetLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    modulus: ").append(toIndentedString(modulus)).append("\n");
    sb.append("    regex: ").append(toIndentedString(regex)).append("\n");
    sb.append("    replacement: ").append(toIndentedString(replacement)).append("\n");
    sb.append("    separator: ").append(toIndentedString(separator)).append("\n");
    sb.append("    sourceLabels: ").append(toIndentedString(sourceLabels)).append("\n");
    sb.append("    targetLabel: ").append(toIndentedString(targetLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("modulus");
    openapiFields.add("regex");
    openapiFields.add("replacement");
    openapiFields.add("separator");
    openapiFields.add("sourceLabels");
    openapiFields.add("targetLabel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner is not found in the empty JSON string", V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("regex") != null && !jsonObj.get("regex").isJsonNull()) && !jsonObj.get("regex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regex").toString()));
      }
      if ((jsonObj.get("replacement") != null && !jsonObj.get("replacement").isJsonNull()) && !jsonObj.get("replacement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replacement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replacement").toString()));
      }
      if ((jsonObj.get("separator") != null && !jsonObj.get("separator").isJsonNull()) && !jsonObj.get("separator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `separator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("separator").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourceLabels") != null && !jsonObj.get("sourceLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceLabels` to be an array in the JSON string but got `%s`", jsonObj.get("sourceLabels").toString()));
      }
      if ((jsonObj.get("targetLabel") != null && !jsonObj.get("targetLabel").isJsonNull()) && !jsonObj.get("targetLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetLabel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner>() {
           @Override
           public void write(JsonWriter out, V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner
  * @throws IOException if the JSON string is invalid with respect to V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner
  */
  public static V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner.class);
  }

 /**
  * Convert an instance of V1PodMonitorSpecPodMetricsEndpointsInnerMetricRelabelingsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

